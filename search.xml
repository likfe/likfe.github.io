<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ubuntu 换源后仍然报错：404、没有 Release 文件</title>
      <link href="/2022/10/20/ubuntu-change-sources/"/>
      <url>/2022/10/20/ubuntu-change-sources/</url>
      
        <content type="html"><![CDATA[<p>关键词：Ubuntu 21.10、换源、404  Not Found、没有 Release 文件</p><p>Ubuntu 执行 <code>apt-get</code> 命令后会报错，如果简单得更换为国内的源地址也无法解决，那可能和 Ubuntu 的系统版本有关，需要根据具体情况处理。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Ubuntu 21.10 执行 <code>apt-get update</code> 后会报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xx Release 404  Not Found [IP: xxx]</span><br><span class="line">E: 仓库 <span class="string">"xx Release"</span> 没有 Release 文件。</span><br><span class="line">N: 无法安全地用该源进行更新，所以默认禁用该源。</span><br><span class="line">N: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节。</span><br></pre></td></tr></table></figure><p>尝试更换源（<code>/etc/apt/sources.list</code>）之后，还是一样的错误。</p><a id="more"></a><ul><li>阿里云镜像：<a href="https://developer.aliyun.com/mirror/ubuntu" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/ubuntu</a></li><li>清华大学开源软件镜像站：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a></li></ul><p>由于使用的是 Ubuntu 21.10，在查询 <a href="https://ubuntu.com/about/release-cycle" target="_blank" rel="noopener">Ubuntu 生命周期和发布节奏</a> 后发现，Ubuntu 21.10 生命周期截止到 2022.07。（还有 Ubuntu 21.04，生命周期截止时间是 2022.01）</p><p>当前是 2022.10，已经超出生命结束周期（EOL）时间了。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>对于超出 EOL 的版本，有两种解决方案可以让 <code>apt-get</code> 恢复正常：</p><ol><li>升级 Ubuntu 版本</li><li>将源 url 更换到旧的包存储库（old-releases）</li></ol><p>说明：示例的命令是非 root 用户，如果是 root 用户，则不需要输命令前面的 <code>sudo</code>。例如</p><ul><li>非 root 用户：<code>sudo apt-get update</code></li><li>则 root 用户时：<code>apt-get update</code></li></ul><p>详细方案如下：</p><h3 id="1-升级系统版本"><a href="#1-升级系统版本" class="headerlink" title="1. 升级系统版本"></a>1. 升级系统版本</h3><p>最简单的方法是将 Ubuntu 系统升级到最新版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get dist-upgrade</span><br></pre></td></tr></table></figure><p>这个方法风险比较大，尤其是我们当前的版本与最终要升级到的版本差的版本比较大的时候；另外，经过测试，升级系统的过程，会卸载重装一些软件，而软件重装后，软件安装过的三方包会丢失，需要重新安装。</p><p>例如 Python，升级完系统后，需要再次使用 pip 安装之前使用到的 package。</p><p>如果升级系统版本的方式暂时无法评估风险，可以考虑更换 sources url（Packages Url）的方式。</p><p>注意：如果遇到直接升级系统失败的情况，需要先使用方案2，更新好本地的源地址等信息之后，才能正常完成系统升级。</p><h3 id="2-更换为-old-releases-的源地址"><a href="#2-更换为-old-releases-的源地址" class="headerlink" title="2. 更换为 old-releases 的源地址"></a>2. 更换为 old-releases 的源地址</h3><p>Ubuntu 超出 EOL 的版本的源地址是 <a href="http://old-releases.ubuntu.com。" target="_blank" rel="noopener">http://old-releases.ubuntu.com。</a></p><ul><li>非 arm 架构的机器：需要用 <code>old-releases.ubuntu.com</code> 的地址替换掉所有的 <code>archive.ubuntu.com</code> 和 <code>security.ubuntu.com</code> 地址。</li><li>arm 架构的机器：需要用 <code>old-releases.ubuntu.com/ubuntu</code> 的地址替换掉所有的 <code>ports.ubuntu.com/ubuntu-ports</code> 地址。</li></ul><p>先确认下源的配置情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>情况一：使用的是 <code>archive.ubuntu.com</code> 和 <code>security.ubuntu.com</code> 地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 sed 命令，用 old-releases.ubuntu.com 替换掉所有的 archive.ubuntu.com 和 security.ubuntu.com</span></span><br><span class="line">sudo sed -i -e <span class="string">'s/archive.ubuntu.com\|security.ubuntu.com/old-releases.ubuntu.com/g'</span> /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 再次检查是否已经全部替换</span></span><br><span class="line">cat /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 更新和同步源信息</span></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>情况二：使用的是 <code>ports.ubuntu.com</code> 地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 sed 命令，用 old-releases.ubuntu.com/ubuntu 替换掉所有的 ports.ubuntu.com/ubuntu-ports</span></span><br><span class="line">sudo sed -i -e <span class="string">'s/ports.ubuntu.com\/ubuntu-ports/old-releases.ubuntu.com\/ubuntu/g'</span> /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 再次检查是否已经全部替换</span></span><br><span class="line">cat /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 更新和同步源信息</span></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>现在，就能够在不受支持的旧 Ubuntu 版本上安装或更新软件包了。</p><p>注意：如果使用了国内的源地址，可以参考上述 2 个情况，对域名或者路径进行替换。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>网上很多文章，解决这类问题的时候，通常是换一个阿里云或者清华大学开源软件镜像地址，无法切实解决问题。</p><p>同样是换源地址，我们在了解到 Ubuntu 系统有 EOL 时间这一信息后，才能根据实际情况做出正确的修改。</p><p>如果有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="https://micro.blog.csdn.net/" target="_blank" rel="noopener">他叫自己Mr.张</a></li><li>掘金：<a href="https://juejin.im/user/56042f4b60b2f3a91f58461d" target="_blank" rel="noopener">cafeting</a></li><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>禁用和卸载树莓派 4B 上 avahi-daemon</title>
      <link href="/2022/10/17/rasP4b-avahi-daemon/"/>
      <url>/2022/10/17/rasP4b-avahi-daemon/</url>
      
        <content type="html"><![CDATA[<p>关键词：树莓派、Linux、avahi、avahi-daemon、CPU</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在树莓派4B上安装了官方的 Ubuntu 系统，运行 <code>top</code> 指令，发现 <code>avahi-daemon</code> 占用 CPU 高，且对 CPU 的消耗波动比较大。</p><p>查资料发现：</p><blockquote><p>Avahi 允许程序在不需要进行手动网络配置的情况 下，在一个本地网络中发布和获知各种服务和主机。例如，当某用户把他的计算机接入到某个局域网时，如果他的机器运行有Avahi服务，则Avahi程式自动广播，从而发现网络中可用的打印机、共享文件和可相互聊天的其他用户。这有点象他正在接收局域网中的各种网络广告一样。</p><p><strong>除非你有兼容的设备或使用 zeroconf 协议的服务，否则应该关闭它。</strong></p></blockquote><p>我不需要 <strong>zeroconf</strong> 的相关功能，遂尝试禁用或者卸载  <code>avahi-daemon</code>。</p><a id="more"></a><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h2><p>基本环境：</p><ul><li>硬件：树莓派4B</li><li>系统：Ubuntu 21.10 (GNU/Linux 5.13.0-1031-raspi aarch64) </li><li>权限：root 用户权限</li></ul><h3 id="方式一：停止和禁用服务"><a href="#方式一：停止和禁用服务" class="headerlink" title="方式一：停止和禁用服务"></a>方式一：停止和禁用服务</h3><p>首先尝试禁用  <code>avahi-daemon</code> ：（root 权限）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 尝试停止并禁用 avahi-daemon</span></span><br><span class="line"><span class="comment">## 查看 avahi-daemon 当前状态</span></span><br><span class="line">systemctl status avahi-daemon.service</span><br><span class="line"><span class="comment">## 停止 avahi-daemon</span></span><br><span class="line">systemctl stop avahi-daemon.service</span><br><span class="line"><span class="comment">## 再次查看 avahi-daemon 当前状态</span></span><br><span class="line">systemctl status avahi-daemon.service</span><br><span class="line"><span class="comment">## 禁用 avahi-daemon</span></span><br><span class="line">systemctl <span class="built_in">disable</span> avahi-daemon.service</span><br></pre></td></tr></table></figure><p>执行停止  <code>avahi-daemon</code>  的时候，返回一个提示：<code>avahi-daemon.socket</code> 可能会重启 <code>avahi-daemon</code>。出现这种情况时，说明 <code>avahi-daemon</code> 是由 <code>avahi-daemon.socket</code> 启动的，我们单独停止和禁用 <code>avahi-daemon</code> 是不行的，它还会自动启动。</p><p>需要先停止 <code>avahi-daemon.socket</code>，再停止 <code>avahi-daemon</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止和禁用 avahi-daemon.socket</span></span><br><span class="line"><span class="comment">## 查看 avahi-daemon.socket 当前状态</span></span><br><span class="line">systemctl status avahi-daemon.socket</span><br><span class="line"><span class="comment">## 停止 avahi-daemon</span></span><br><span class="line">systemctl stop avahi-daemon.socket</span><br><span class="line"><span class="comment">## 再次查看 avahi-daemon 当前状态</span></span><br><span class="line">systemctl status avahi-daemon.socket</span><br><span class="line"><span class="comment">## 禁用 avahi-daemon</span></span><br><span class="line">systemctl <span class="built_in">disable</span> avahi-daemon.socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止和禁用 avahi-daemon</span></span><br><span class="line"><span class="comment">## 查看 avahi-daemon 当前状态</span></span><br><span class="line">systemctl status avahi-daemon.service</span><br><span class="line"><span class="comment">## 停止 avahi-daemon</span></span><br><span class="line">systemctl stop avahi-daemon.service</span><br><span class="line"><span class="comment">## 再次查看 avahi-daemon 当前状态</span></span><br><span class="line">systemctl status avahi-daemon.service</span><br><span class="line"><span class="comment">## 禁用 avahi-daemon</span></span><br><span class="line">systemctl <span class="built_in">disable</span> avahi-daemon.service</span><br></pre></td></tr></table></figure><p>由于本人遇到了重启后这2个服务还会自动重启的情况，所以最终通过卸载的方式来解决的。你可以根据自己的实际情况，决定是否使用卸载的方案。</p><h3 id="方式二：卸载-avahi-daemon-相关的所有服务"><a href="#方式二：卸载-avahi-daemon-相关的所有服务" class="headerlink" title="方式二：卸载 avahi-daemon 相关的所有服务"></a>方式二：卸载 avahi-daemon 相关的所有服务</h3><p>由于单纯的卸载 avahi-daemon 可能引起依赖它的软件无法正常运行，此操作需要慎重考虑和检测：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载方式一：卸载并清理配置文件</span></span><br><span class="line">apt-get purge avahi-daemon</span><br><span class="line"><span class="comment"># 卸载方式而：卸载并保留配置文件</span></span><br><span class="line">apt-get remove avahi-daemon</span><br><span class="line"><span class="comment">#注意：卸载时可能会提示下列软件包将被【卸载】，即卸载 avahi-daemon 会同时卸载依赖它的软件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，你可以清理下不需要的自动安装的软件：</span></span><br><span class="line">apt autoremove</span><br></pre></td></tr></table></figure><p>资料：</p><ul><li><a href="https://superuser.com/questions/316715/removing-the-avahi-daemon-on-ubuntu" target="_blank" rel="noopener">Removing the avahi-daemon on Ubuntu</a></li></ul><p>如果有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="https://micro.blog.csdn.net/" target="_blank" rel="noopener">他叫自己Mr.张</a></li><li>掘金：<a href="https://juejin.im/user/56042f4b60b2f3a91f58461d" target="_blank" rel="noopener">cafeting</a></li><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 项目开发填坑记 - 谷歌商店上架被拒 Apps On Device</title>
      <link href="/2022/10/12/google-play-rejected-by-apps-on-device/"/>
      <url>/2022/10/12/google-play-rejected-by-apps-on-device/</url>
      
        <content type="html"><![CDATA[<p>关键词：谷歌商店被拒、rejected、数据安全表单、已安装应用、Policy Declaration、Data Safety Section、App Activity Data Type、Apps On Device</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>应用在谷歌商店上架，更新商店包之后，收到审核被拒的邮件，邮箱的原因描述如下：</p><p><img src="https://raw.githubusercontent.com/likfe/imagerepo/dev/img/202210121415582.png" alt></p><p>邮件的意思是违反的谷歌用户数据政策的【数据安全表单】-【应用活动】-【已安装应用】这一项。</p><a id="more"></a><p>即 App 访问了「与用户设备上安装的应用相关的信息」，但是未在安全数据表单里勾选此项。</p><h2 id="定位原因"><a href="#定位原因" class="headerlink" title="定位原因"></a>定位原因</h2><h3 id="方法一：直接在-Android-Studio-里打开应用的-apk-安装包，"><a href="#方法一：直接在-Android-Studio-里打开应用的-apk-安装包，" class="headerlink" title="方法一：直接在 Android Studio 里打开应用的 apk 安装包，"></a>方法一：直接在 Android Studio 里打开应用的 apk 安装包，</h3><p>检查 AndroidManifest.xml 里是否有 <code>&lt;queries&gt;</code> 标签，并且 <code>&lt;queries&gt;</code> 标签内是否有内容。</p><p><img src="https://raw.githubusercontent.com/likfe/imagerepo/dev/img/202210121508501.png" alt></p><p>上述内容是 Facebook 分享 SDK 需要添加的内容，确实违反了谷歌的用户数据政策。如果你使用了三方登录、分享等， <code>&lt;queries&gt;</code> 标签里还会有 <code>&lt;package android:name=&quot;xx.xx.xx&quot; /&gt;</code> 的内容。</p><h3 id="方法二：查看-Merged-Manifest-状态的AndroidManifest-xml"><a href="#方法二：查看-Merged-Manifest-状态的AndroidManifest-xml" class="headerlink" title="方法二：查看 Merged Manifest 状态的AndroidManifest.xml"></a>方法二：查看 Merged Manifest 状态的AndroidManifest.xml</h3><p>打开 Android 工程的 app module，打开其目录下的 AndroidManifest.xml ，切换底部的 Tab，从 <code>Text</code> 切换到 <code>Merged Manifest</code>，然后看看是否有 <code>&lt;queries&gt;</code> 标签，并且 <code>&lt;queries&gt;</code> 标签内是否有内容。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>解决方案有 2 种：</p><ol><li>保持【已安装应用】不勾选状态：移除所有的 <code>&lt;queries&gt;...&lt;/queries&gt;</code> 内容，当然，这个前提是，移除后不影响已有业务</li><li>勾选【已安装应用】选项（<strong>推荐</strong>）：既然有业务需要读取设备上安装的应用信息，就按照实际情况声明即可。见下图</li></ol><p><img src="https://raw.githubusercontent.com/likfe/imagerepo/dev/img/202210121436821.jpg" alt></p><p>如果有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="https://micro.blog.csdn.net/" target="_blank" rel="noopener">他叫自己Mr.张</a></li><li>掘金：<a href="https://juejin.im/user/56042f4b60b2f3a91f58461d" target="_blank" rel="noopener">cafeting</a></li><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> GooglePlay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 必知必会：自定义 View 可以知道 onPause/onResume 被调用了吗？</title>
      <link href="/2022/03/23/custom-view-know-on-pause-called/"/>
      <url>/2022/03/23/custom-view-know-on-pause-called/</url>
      
        <content type="html"><![CDATA[<p>关键词：自定义View、custom View、Lifecycle、onPause、onResume </p><p>先说结论，可以。</p><p>在自定义 View 的类中，根据手机系统版本，重写<code>onVisibilityChanged()</code>或者<code>onVisibilityAggregated()</code>方法即可。详细判断条件见下文。 </p><a id="more"></a><p>如果 <code>Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.N</code> （手机系统低于 Android 7.0）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onVisibilityChanged</span><span class="params">(@NonNull View changedView, <span class="keyword">int</span> visibility)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onVisibilityChanged(changedView, visibility);</span><br><span class="line">    <span class="keyword">if</span> (visibility == View.VISIBLE) &#123; <span class="comment">//onResume() 被调用</span></span><br><span class="line">    <span class="comment">//处理动画播放、线程启动、开启定时任务等操作</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// onPause() 被调用</span></span><br><span class="line">      <span class="comment">//处理动画的暂停、取消或者线程的暂停、取消、定时任务的暂停、取消等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 <code>Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N</code> （手机系统 Android 7.0 及以上）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onVisibilityAggregated</span><span class="params">(<span class="keyword">boolean</span> isVisible)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onVisibilityAggregated(isVisible);</span><br><span class="line">    <span class="keyword">if</span> (isVisible) &#123; <span class="comment">//onResume() 被调用</span></span><br><span class="line">    <span class="comment">//处理动画播放、线程启动、开启定时任务等操作</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// onPause() 被调用</span></span><br><span class="line">      <span class="comment">//处理动画的暂停、取消或者线程的暂停、取消、定时任务的暂停、取消等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方案是我翻 Android 源码找到的最简单的方式，灵感来自 <a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/widget/ProgressBar.java" target="_blank" rel="noopener">ProgressBar</a> 。不需要监听所在 Fragment 或者 Activity 的生命周期。</p><p>其他方案参见：<a href="https://stackoverflow.com/questions/22368720/can-a-custom-view-know-that-onpause-has-been-called" target="_blank" rel="noopener">Can a custom View know that onPause has been called?</a></p><p>如果有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="https://micro.blog.csdn.net/" target="_blank" rel="noopener">他叫自己Mr.张</a></li><li>掘金：<a href="https://juejin.im/user/56042f4b60b2f3a91f58461d" target="_blank" rel="noopener">cafeting</a></li><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派配置文件 config.txt - HDMI 热插拔</title>
      <link href="/2021/12/19/raspberry-pi-hdmi/"/>
      <url>/2021/12/19/raspberry-pi-hdmi/</url>
      
        <content type="html"><![CDATA[<p>快速预览：</p><ol><li><code>config.txt</code> 的路径通常是 <code>/boot/config.txt</code>，如果找不到，可能是 <code>/boot/firmware/config.txt</code>。再找不到，参考文章内【找到 config.txt】的思路去找。</li><li>在 config.txt 里增加如下 2 行内容后重启树莓派即可开启 HDMI 热插拔功能<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hdmi_force_hotplug=1</span><br><span class="line">hdmi_drive=2</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h2 id="0x00：问题和背景"><a href="#0x00：问题和背景" class="headerlink" title="0x00：问题和背景"></a>0x00：问题和背景</h2><p>新到的树莓派4B，安装了带桌面的 Ubuntu 系统，前期为了方便，通过 HDMI 线外接了显示器，方便配置系统。但是配置完毕并拔掉显示器之后发现一个问题：重启树莓派后，如果没有外接显示器，则无法正常进入系统，定位到是 HDMI 检测机制的问题，它默认需要插上显示器才能正常启动。</p><p>查到资料需要开启树莓派的 HDMI 热插拔才能不依赖外接显示器。<br>于是需要我们：</p><ol><li>找到配置文件 config.txt （本文重点）</li><li>修改 config.txt</li></ol><h2 id="0x01：定位-config-txt"><a href="#0x01：定位-config-txt" class="headerlink" title="0x01：定位 config.txt"></a>0x01：定位 config.txt</h2><p>修改 config.txt 有2大类方法</p><ol><li>取出 SD 卡，在其他电脑上进行读取 SD 卡内容，找到 <code>config.txt</code> 进行修改</li><li>直接在树莓派内部运行中的系统当中进行修改</li></ol><p>下面说下方法2：</p><p>通常 <code>config.txt</code> 的路径是 <code>/boot/config.txt</code>，但是<strong>如果找不到</strong>，需要查看下磁盘分区，找到<strong>启动分区</strong>所在的目录。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> fdisk -l</span></span><br><span class="line">Device         Boot  Start       End   Sectors  Size Id Type</span><br><span class="line">/dev/mmcblk0p1 *      2048    526335    524288  256M  c W95 FAT32 (LBA)</span><br><span class="line">/dev/mmcblk0p2      526336 124735454 124209119 59.2G 83 Linux</span><br><span class="line"></span><br><span class="line">看到2个分区：</span><br><span class="line">- /dev/mmcblk0p1 (启动分区)</span><br><span class="line">- /dev/mmcblk0p2</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> df</span></span><br><span class="line">Filesystem     1K-blocks     Used Available Use% Mounted on</span><br><span class="line">/dev/mmcblk0p1    258095   113997    144099  45% /boot/firmware</span><br><span class="line">/dev/mmcblk0p2  61862116 11804636  47472868  20% /</span><br><span class="line"></span><br><span class="line">可见</span><br><span class="line">- /dev/mmcblk0p2 挂载到 / 目录下，</span><br><span class="line">- /dev/mmcblk0p1 挂载到 /boot/firmware 目录下</span><br><span class="line"></span><br><span class="line">那么，config.txt 没在 /boot/下，应该就在 /boot/firmware 下了，即 /boot/firmware/config.txt</span><br></pre></td></tr></table></figure></p><h2 id="0x02：修改-config-txt"><a href="#0x02：修改-config-txt" class="headerlink" title="0x02：修改 config.txt"></a>0x02：修改 config.txt</h2><p>添加如下2行到 <code>config.txt</code> 然后重启树莓派即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hdmi_force_hotplug=1</span><br><span class="line">hdmi_drive=2</span><br></pre></td></tr></table></figure></p><ul><li><code>hdmi_force_hotplug=1</code> 设置树莓派使用 HDMI 热插拔模式，即使没有检测到 HDMI 显示器。 </li><li><code>hdmi_drive=2</code> 将树莓派设置为正常的 HDMI 模式（如果支持和启用，将发送声音）。如果没有这条线，树莓派将默认切换到 DVI（无音频）模式。</li></ul><p>参考资料：</p><ul><li><a href="https://raspberrypi.stackexchange.com/questions/2169/how-do-i-force-the-raspberry-pi-to-turn-on-hdmi" target="_blank" rel="noopener">How do I force the Raspberry Pi to turn on HDMI?</a></li><li><a href="http://www.raspigeek.com/index.php?c=read&amp;id=116&amp;page=1" target="_blank" rel="noopener">树莓派配置文件config.txt 参数详细介绍</a></li><li><a href="https://zhuanlan.zhihu.com/p/104282522" target="_blank" rel="noopener">树莓派4系统初始配置</a></li><li><a href="https://www.shellhacks.com/raspberry-pi-force-hdmi-hotplug/" target="_blank" rel="noopener">Raspberry Pi：强制 HDMI 热插拔</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 项目开发填坑记 - No Activity found to handle Intent</title>
      <link href="/2021/03/09/android-forms-gle/"/>
      <url>/2021/03/09/android-forms-gle/</url>
      
        <content type="html"><![CDATA[<p>关键词：forms.gle、No Activity found to handle Intent</p><p>前端同学说在 APP 内的 Webview 内不能跳转到 Google 表单的页面，但是在 iOS 里可以。</p><p>日志是一个比较奇怪的报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.content.ActivityNotFoundException: No Activity found to handle Intent &#123; act=android.intent.action.VIEW dat=intent://forms.gle/xxx</span><br></pre></td></tr></table></figure><a id="more"></a><p>要跳转的是 <code>https://forms.gle/xxxxxx</code> 这种链接，尝试在 PC 浏览器中打开，发现会最终跳转到 <code>https://docs.google.com/forms/xxxxxxxx</code> 的地方，可以正常打开。</p><p>最后多次测试排查，发现是 <code>https://forms.gle/xxxxxx</code> 这个链接，在 Android 的浏览器中打开，会显示如下错误：</p><p><img src="https://raw.githubusercontent.com/likfe/imagerepo/dev/img/20210309210242.jpg" alt></p><p>最终定位到此链接在 Android 系统下的浏览器内会有特殊的逻辑，故<strong>让前端同学直接使用最终的跳转链接  <code>https://docs.google.com/forms/xxxxxxxx</code> 来进行跳转</strong>，就能正常打开了，特此记录。</p><p>如果有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="https://micro.blog.csdn.net/" target="_blank" rel="noopener">他叫自己Mr.张</a></li><li>掘金：<a href="https://juejin.im/user/56042f4b60b2f3a91f58461d" target="_blank" rel="noopener">cafeting</a></li><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【友情曝光】源动力餐饮集团虚假宣传，选址老师不负责任，租店铺被坑，损失惨重</title>
      <link href="/2020/05/13/yuandongli-pianzi/"/>
      <url>/2020/05/13/yuandongli-pianzi/</url>
      
        <content type="html"><![CDATA[<p>源动力餐饮集团、乔东家排骨大包、北京源动力、北京源动力餐饮集团、源动力餐饮加盟可靠吗？源动力餐饮靠谱么?乔东家排骨大包靠谱么?</p><p>一位北京的朋友今年加盟了【源动力餐饮集团】的【乔东家排骨大包】项目。<br>【源动力餐饮集团】承诺店铺选址会做市场调研、数据分析等等，但是实际的操作环节，选址老师就看了一眼，未做任何评估和调研，便建议朋友选这个店铺，作为初次创业的朋友，便按照选址老师建议租下这个店铺。</p><p>后面交了一年店铺房租，正式开店后发现，一个是此店铺房租比上家高出2~3倍，二是周边客源、人流很少；<br>运营2个多月，发现人流过少，入不敷出，前后投入近40万要打水漂，而【源动力餐饮集团】在承认了自己选址老师失职后仍然不愿意进行协商处理，态度敷衍。</p><a id="more"></a><p>是的，在明确知道自家选址老师失职得情况下，北京源动力仍然拒绝协商处理并且不给予任何赔偿。剩余2万元的物料，也拒绝朋友的低价回收要求。</p><p>中间付费找了律师，律师看完合同明确说明合同中的条文全是对我朋友的要求，而对北京源动力自己倒是几乎没什么责任需要承担，其工作人员的承诺都没有在合同中一一写明，典型的套路！</p><p>请大家务必擦亮眼睛，防止被骗。</p><p>由于商家借助[非IT类内容] 投诉到 CSDN，文章被下架，特此记录备份。</p><p>原博文的评论如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">灬Crazy丶丨血月:</span><br><span class="line">刚被这家公司坑了15W，确实是家坑人的公司。还是选择大品牌吧，这种半瓶子咣当的，还是需要慎重。(8个月前)</span><br><span class="line">点赞1</span><br><span class="line"></span><br><span class="line">validatetoken:</span><br><span class="line">就是一个骗子公司，什么狗屁合同，都是套路，这种公司为什么不查查，有多少人的血汗钱让骗，希望有关部门严查 (2个月前)</span><br><span class="line"></span><br><span class="line">m0_45845906:</span><br><span class="line">选址的就是个坑比，什么都不懂，千万不要相信选址的。什么老师，都是垃圾！(6个月前)</span><br><span class="line"></span><br><span class="line">m0_45845906:</span><br><span class="line">南京源动力也是个坑比，就一直叫你交钱，加盟费那么多，后面还有各种费用，说是免费提供装修样板，其实就是给你画个摆放位置，没有水电具体施工图，你想要，又要你交钱，然后你店都装好了，你会发现，原来说是送全套设备，发现还缺很多设备，然后又让你交钱买，然后你又会发现你买的原材料包装盒之类的又比外面贵，然后你店生意不好，就没人问没人管了，从头到尾就是吸血，炸干你身上的钱，在等你反应过来，几十万已经没了。所以加盟一定要谨慎。(6个月前)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>友盟 SDK 分享到 Messenger 无法发送消息</title>
      <link href="/2020/05/01/android-umeng-messenger/"/>
      <url>/2020/05/01/android-umeng-messenger/</url>
      
        <content type="html"><![CDATA[<p>友盟 Messenger 无法发送消息<br>umeng  Messenger 无法发送消息<br>umeng Facebook Messenger 无法发送消息</p><hr><p>由于项目的登录和分享基于友盟进行的设计，接入 Facebook Messenger 分享，发出去的消息总是提示【无法发送消息 轻触了解详情】</p><p>可能的原因有2点：</p><ol><li>Messenger 平台从 2019 年 6 月 10 日开始，<strong>新应用</strong>将不再支持将应用中的链接和媒体分享至 Messenger 的功能，详见 <a href="https://developers.facebook.com/docs/messenger-platform/changelog/#20190610" target="_blank" rel="noopener">官方公告</a> ；(此条不成立，文章底部有更新)</li><li>友盟分享 SDK 处理 Messenger 的相关代码比较老旧，新应用使用的话不再被官方接受了，也就不能发送成功。</li></ol><p>既然官方都发公告说不支持将应用中的链接和媒体分享至 Messenger 的功能了，那就真的没办法了吗? 经过测试，虽然有些限制，但还是可以直接将应用中的<strong>链接</strong>分享至 Messenger 的，至于媒体，没有进行单独测试，理论上可行。</p><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>简单点来说就是<strong>调用 Facebook 官方最新 SDK 里的方法进行分享</strong>。<br>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.facebook.share.model.ShareLinkContent;</span><br><span class="line"><span class="keyword">import</span> com.facebook.share.widget.MessageDialog;</span><br><span class="line"></span><br><span class="line"><span class="comment">//限制就是不能设置标题、描述等字段了</span></span><br><span class="line">ShareLinkContent content = <span class="keyword">new</span> ShareLinkContent.Builder()</span><br><span class="line">                        .setContentUrl(Uri.parse(<span class="string">"https://xxx.xxx/xxx"</span>))</span><br><span class="line">                        .build();</span><br><span class="line"><span class="comment">//不需要回调</span></span><br><span class="line">MessageDialog.show(context, content);</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要回调</span></span><br><span class="line">MessageDialog messageDialog = <span class="keyword">new</span> MessageDialog(context);</span><br><span class="line">messageDialog.registerCallback(CallbackManager.Factory.create(), <span class="keyword">new</span> com.facebook.FacebookCallback&lt;com.facebook.share.Sharer.Result&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(com.facebook.share.Sharer.Result result)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(com.facebook.FacebookException error)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">messageDialog.show(content);</span><br></pre></td></tr></table></figure></p><p>那么问题来了，怎么和友盟的 SDK 进行结合呢？毕竟如果项目的整个分享模块都是基于友盟来设计的话，必须要在它这个体系内才行。</p><p>另外，通过粗略的阅读友盟分享 SDK 的相关逻辑，好像并没有提供自定义分享渠道的逻辑，分享渠道的处理类  <code>UMxxHandler</code>  (xx 指分享渠道，比如 <code>UMLineHandler</code> 是 Line 分享渠道的处理类) 又很多是写死在源码里的，是否能调用到 <code>onActivityResult</code> 也是预先写死的，这就很难受了。</p><p>我这里提供一个简单的思路：重写某个用不到的分享渠道的 <code>UMxxHandler</code> 来实现。</p><p>如果也需要调用到 <code>onActivityResult</code>  来进行分享结果的回调处理，那需要把所有的分享渠道的代码看一下，看看哪些有覆写了 <code>getRequestCode()</code> 和 <code>onActivityResult()</code>方法，即有分享结果回调处理逻辑，挑一个用不到的分享渠道，然后去覆写它的 <code>share()</code> 方法来进行具体的分享操作。</p><p>博主选了 <code>UMFlickrHandler</code> 进行了重写，它没有处理回调的情况。Messenger 本身分享出去也是无法区分成功和取消，博主便稍微偷个懒，选个不需要处理回调的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>友盟的 SDK 吧，一言难尽，鉴于项目过于依赖它（登录、分享、Push模块），暂时只能选择继续用着。这里趁机也提示一下，它的 Line 分享功能也是有 Bug 的，有空再写吧。</p><p>今天五一了，祝大家代码日日精进。</p><blockquote><p>更新于 20200503 <a href="https://developers.facebook.com/docs/messenger-platform/changelog/" target="_blank" rel="noopener">Messenger 平台更新日志</a></p><p>通读了一下更新日志，发现 2020 年 3 月 4 日 Messenger 平台又重新支持将应用中的链接和媒体分享至 Messenger 的功能了，详细内容如下：</p><p><strong>2020 年 3 月 4 日</strong></p><p><strong>Messenger 平台公告</strong></p><ul><li><strong><a href="https://developers.facebook.com/docs/messenger-platform/webhook/versioning" target="_blank" rel="noopener">推出 Messenger Webhook Versioning</a></strong> - 允许提供一个窗口，让开发者能够选择加入影响 Webhook 的平台更改。可以实时完成版本更改，并在需要时回滚到之前版本，促成顺畅迁移。</li><li><strong><a href="https://developers.facebook.com/docs/sharing/messenger/" target="_blank" rel="noopener">分享到 Messenger SDK 的最新情况</a></strong> - 去年六月，我们宣布了不再支持分享到 Messenger SDK 的计划。我们很高兴与大家分享，我们将继续支持分享到 Messenger SDK 的修改版本，该版本将允许用户将您应用程序中的链接和照片分享到 Messenger。我们将在未来几周内逐步推出适用于 iOS 版 Messenger 应用链接和图像/视频分享的支持。我们将不再支持分享常规和多媒体素材的模板。如果您的应用中仍包含此 SDK，则无需采取任何操作。</li></ul></blockquote><p>如果有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="https://micro.blog.csdn.net/" target="_blank" rel="noopener">他叫自己Mr.张</a></li><li>掘金：<a href="https://juejin.im/user/56042f4b60b2f3a91f58461d" target="_blank" rel="noopener">cafeting</a></li><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Messenger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android必知必会 - RecyclerView 恢复上次滚动位置</title>
      <link href="/2020/04/22/android-recycleview-log-resume-position/"/>
      <url>/2020/04/22/android-recycleview-log-resume-position/</url>
      
        <content type="html"><![CDATA[<p>记录 RecyclerView 滚动位置并恢复是一个很常见的需求，通常需要精准恢复到上次的位置。</p><p>预计会用到 RecyclerView 相关的三个知识点：</p><ol><li>监听 RecyclerView 滚动状态</li><li>监听 RecyclerView 完成绘制</li><li>滚动 RecyclerView 到指定的位置</li></ol><p>思路：</p><ul><li>在「RecyclerView 完成绘制」时，记录首个元素的偏移量作为基础偏移量；此步非必须流程，根据自己实际情况看是否需要，有些情况此基础偏移量为0，即不存在基础偏移量的问题；</li><li>在「监听 RecyclerView 滚动状态」里，滚动结束时，记录最左侧的元素坐标和偏移量；</li><li>再次打开当前页面时，检查是否存在偏移量信息的记录，有则进行位置恢复，即「滚动 RecyclerView 到指定的位置」。</li></ul><a id="more"></a><p>条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LinearLayoutManager linearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(mContext);</span><br><span class="line">linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL); <span class="comment">// 水平，本文以此为例</span></span><br><span class="line">linearLayoutManager.setOrientation(LinearLayoutManager.VERTICAL); <span class="comment">//或 垂直</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以下3个变量的值需要持久化存储到 SharedPreferences 类似的地方</span></span><br><span class="line"><span class="keyword">int</span> rvBaseOffset; <span class="comment">//初始状态时position=0元素的的基础偏移量 Offset</span></span><br><span class="line"><span class="keyword">int</span> rvPosition; <span class="comment">//最左边首个可见元素的 position</span></span><br><span class="line"><span class="keyword">int</span> rvOffset; <span class="comment">//最左边首个可见元素的偏移量 Offset</span></span><br></pre></td></tr></table></figure><h2 id="1-前置知识"><a href="#1-前置知识" class="headerlink" title="1. 前置知识"></a>1. 前置知识</h2><h3 id="监听-RecyclerView-滚动状态"><a href="#监听-RecyclerView-滚动状态" class="headerlink" title="监听 RecyclerView 滚动状态"></a>监听 RecyclerView 滚动状态</h3><p>调用 <code>recyclerView.addOnScrollListener(onScrollListener);</code> 来设置 RecyclerView 的滚动监听器。</p><p>自定义一个类来继承 <code>RecyclerView.OnScrollListener</code> 并覆写 <code>onScrollStateChanged()</code> 方法，在其中处理关键状态的监听。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MOnScrollListener</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">OnScrollListener</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(@NonNull RecyclerView recyclerView, <span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onScrollStateChanged(recyclerView, newState);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> hasStarted = newState == RecyclerView.SCROLL_STATE_DRAGGING; <span class="comment">//此时，RecyclerView 滚动开始</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> hasEnded = newState == RecyclerView.SCROLL_STATE_IDLE; <span class="comment">//此时，RecyclerView 滚动结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hasEnded &amp;&amp; linearLayoutManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">      View leftView = linearLayoutManager.getChildAt(<span class="number">0</span>); <span class="comment">//获取可视的第一个view</span></span><br><span class="line">      <span class="keyword">if</span> (leftView == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      rvOffset = leftView.getLeft(); <span class="comment">//获取该view的左边的偏移量，垂直布局时获取 getTop()</span></span><br><span class="line">      rvPosition = linearLayoutManager.getPosition(leftView);</span><br><span class="line">      SPManager.getInstance().setRvOffset(rvOffset);</span><br><span class="line">      SPManager.getInstance().setRvPosition(rvPosition);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监听-RecyclerView-完成绘制"><a href="#监听-RecyclerView-完成绘制" class="headerlink" title="监听 RecyclerView 完成绘制"></a>监听 RecyclerView 完成绘制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">recyclerView.getViewTreeObserver()</span><br><span class="line">                    .addOnGlobalLayoutListener(<span class="keyword">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">View leftView = linearLayoutManager.getChildAt(<span class="number">0</span>); <span class="comment">//获取可视的第一个view</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (leftView == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rvBaseOffset = leftView.getLeft();</span><br><span class="line">    <span class="keyword">int</span> lastPosition = linearLayoutManager.getPosition(leftView);</span><br><span class="line">    <span class="keyword">if</span> (lastPosition == <span class="number">0</span>) &#123;</span><br><span class="line">      SPManager.getInstance().setRvBaseOffset(rvBaseOffset);</span><br><span class="line">    &#125;</span><br><span class="line">    recyclerView.getViewTreeObserver().removeOnGlobalLayoutListener(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="滚动-RecyclerView-到指定的位置"><a href="#滚动-RecyclerView-到指定的位置" class="headerlink" title="滚动 RecyclerView 到指定的位置"></a>滚动 RecyclerView 到指定的位置</h3><p>具有类似功能的 API 有：</p><ul><li><code>RecyclerView.scrollToPosition(int position)</code></li><li><code>RecyclerView.smoothScrollToPosition(int position)</code></li><li><code>RecyclerView.scrollBy(int x, int y)</code></li><li><code>LinearLayoutManager.scrollToPositionWithOffset(int position, int offset)</code></li></ul><p>注意不同 API 是不同的类的方法，另外还有使用有滚动动画的区别等。</p><p>这里使用 <code>LinearLayoutManager.scrollToPositionWithOffset(int position, int offset)</code> ，它可以精准的定位到上次的位置，也不需要展示滚动动画。</p><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">LinearLayoutManager linearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(getContext());</span><br><span class="line">linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);</span><br><span class="line"></span><br><span class="line">recyclerView.setLayoutManager(linearLayoutManager);</span><br><span class="line"></span><br><span class="line">onScrollListener = <span class="keyword">new</span> MOnScrollListener();</span><br><span class="line">recyclerView.addOnScrollListener(onScrollListener);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lastPositionHistory = SPManager.getInstance().getRvPosition();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (lastPositionHistory == -<span class="number">1</span>) &#123; <span class="comment">//从未设置过偏移位置时获取一次基础偏移量</span></span><br><span class="line">  recyclerView.getViewTreeObserver()</span><br><span class="line">                    .addOnGlobalLayoutListener(<span class="keyword">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">View leftView = linearLayoutManager.getChildAt(<span class="number">0</span>); <span class="comment">//获取可视的第一个view</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (leftView == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rvBaseOffset = leftView.getLeft();</span><br><span class="line">    <span class="keyword">int</span> lastPosition = linearLayoutManager.getPosition(leftView);</span><br><span class="line">    <span class="keyword">if</span> (lastPosition == <span class="number">0</span>) &#123;</span><br><span class="line">      SPManager.getInstance().setRvBaseOffset(rvBaseOffset);</span><br><span class="line">    &#125;</span><br><span class="line">    recyclerView.getViewTreeObserver().removeOnGlobalLayoutListener(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在合适的时机，比如 onResume() 或者获取完数据后进行位置恢复</span></span><br><span class="line"><span class="keyword">if</span> (linearLayoutManager != <span class="keyword">null</span> &amp;&amp; recyclerView != <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="keyword">int</span> lastPosition = SPManager.getInstance().getRvPositiont();</span><br><span class="line">  <span class="keyword">if</span> (lastPosition &gt;= <span class="number">0</span> &amp;&amp; linearLayoutManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> lastOffset = SPManager.getInstance().getRvOffset();</span><br><span class="line">    <span class="keyword">int</span> baseOffset = SPManager.getInstance().getRvBaseOffset();</span><br><span class="line">    linearLayoutManager.scrollToPositionWithOffset(lastPosition, lastOffset - baseOffset);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-回顾总结"><a href="#3-回顾总结" class="headerlink" title="3. 回顾总结"></a>3. 回顾总结</h2><p>本次记录的是实际使用中的情况，基础偏移量的值不为 0 可能不是普遍现象，没看到过相关记录，特记录下来，避免后人踩坑吧。</p><p>参考链接：</p><blockquote><ul><li><a href="https://stackoverflow.com/questions/34271773/how-to-scrollto-an-offset-inside-recyclerview" target="_blank" rel="noopener">How to scrollto an offset inside recyclerview?</a></li><li><a href="https://stackoverflow.com/questions/27507715/android-how-to-get-the-current-x-offset-of-recyclerview" target="_blank" rel="noopener">Android: How to get the current X offset of RecyclerView?</a></li><li><a href="https://stackoverflow.com/questions/34271773/how-to-scrollto-an-offset-inside-recyclerview" target="_blank" rel="noopener">How to scrollto an offset inside recyclerview?</a></li><li><a href="https://stackoverflow.com/questions/30397460/how-to-know-when-the-recyclerview-has-finished-laying-down-the-items" target="_blank" rel="noopener">How to know when the RecyclerView has finished laying down the items?</a></li></ul></blockquote><p>如果有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="https://micro.blog.csdn.net/" target="_blank" rel="noopener">他叫自己Mr.张</a></li><li>掘金：<a href="https://juejin.im/user/56042f4b60b2f3a91f58461d" target="_blank" rel="noopener">cafeting</a></li><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> RecyclerView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 下 RGBA 转 ARGB</title>
      <link href="/2020/04/10/androd-rgba-to-argb/"/>
      <url>/2020/04/10/androd-rgba-to-argb/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>服务端下发的颜色值字符串由于一开始依据 iOS 端的 RGBA 格式，Android 端（Android 使用 ARGB 方式）需要进行兼容，需要对此字符串转换。<br>举例：RGBA <code>#ABCDEF99</code> =&gt; ARGB <code>#99ABCDEF</code></p><p>扩展：ARGB <code>#99ABCDEF</code> =&gt; RGBA <code>#ABCDEF99</code></p><p>即 RGBA 和 ARGB 互转。</p><a id="more"></a><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><h3 id="①-字符串截取和组合"><a href="#①-字符串截取和组合" class="headerlink" title="① 字符串截取和组合"></a>① 字符串截取和组合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String argbStr = rgba.substring(<span class="number">0</span>, <span class="number">1</span>) + rgba.substring(<span class="number">7</span>, <span class="number">9</span>) + rgba.substring(<span class="number">1</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">int</span> argb = Color.parseColor(argbStr);</span><br></pre></td></tr></table></figure><h3 id="②-转为Char数组，遍历重组"><a href="#②-转为Char数组，遍历重组" class="headerlink" title="② 转为Char数组，遍历重组"></a>② 转为Char数组，遍历重组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] chars = rgba.toCharArray();</span><br><span class="line">StringBuilder tempStr = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">    tempStr.append(chars[<span class="number">0</span>]);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">    tempStr.append(chars[<span class="number">7</span>]);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">    tempStr.append(chars[<span class="number">8</span>]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    tempStr.append(chars[i - <span class="number">2</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> argb = Color.parseColor(tempStr.toString());</span><br></pre></td></tr></table></figure><h3 id="③位操作"><a href="#③位操作" class="headerlink" title="③位操作"></a>③位操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> rgba = Color.parseColor(rgbaStr);</span><br><span class="line"><span class="keyword">int</span> argb = (rgba &gt;&gt;&gt; <span class="number">8</span>) | (rgba &lt;&lt; (<span class="number">32</span> - <span class="number">8</span>));</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong><br><code>rgbaStr</code> 字符的长度为 9 的时候，才需要转换，7 位时只有RGB色值，直接使用 <code>Color.parseColor()</code>  即可。</p><p><code>Color.parseColor()</code>  使用注意事项：</p><ol><li>可能会抛出 <code>IllegalArgumentException</code> 的异常，使用时可以进行一层封装，对异常进行捕获并记录日志，出现异常时返回一个预设的颜色值。</li><li>未做非空判断，可以先判空处理。</li></ol><h2 id="扩展：ARGB-转-RGBA"><a href="#扩展：ARGB-转-RGBA" class="headerlink" title="扩展：ARGB 转 RGBA"></a>扩展：ARGB 转 RGBA</h2><p>以下算法临时改写而成，未经实际产品应用，<strong>建议先跑一些测试用例进行验证</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 字符串截取+拼接</span></span><br><span class="line">String argbTemp= argbStr.substring(<span class="number">0</span>, <span class="number">1</span>) + argbStr.substring(<span class="number">3</span>, <span class="number">9</span>) + argbStr.substring(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">int</span> rgba = Color.parseColor(argbTemp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 转为Char数组，遍历重组</span></span><br><span class="line"><span class="keyword">char</span>[] chars = argbStr.toCharArray();</span><br><span class="line">StringBuilder tempStr = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">tempStr.append(chars[<span class="number">0</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">7</span>) &#123;</span><br><span class="line">tempStr.append(chars[<span class="number">1</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">8</span>) &#123;</span><br><span class="line">tempStr.append(chars[<span class="number">2</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tempStr.append(chars[i + <span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> rgba = Color.parseColor(tempStr.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 位操作</span></span><br><span class="line"><span class="keyword">int</span> argb = Color.parseColor(argbStr);</span><br><span class="line"><span class="keyword">int</span> rgba = (argb &lt;&lt; <span class="number">8</span>) | (argb &gt;&gt;&gt; (<span class="number">32</span>-<span class="number">8</span>));</span><br></pre></td></tr></table></figure><p>如果有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="https://micro.blog.csdn.net/" target="_blank" rel="noopener">他叫自己Mr.张</a></li><li>掘金：<a href="https://juejin.im/user/56042f4b60b2f3a91f58461d" target="_blank" rel="noopener">cafeting</a></li><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Confluence 移动应用无法连接 Can&#39;t get a secure connection error</title>
      <link href="/2019/12/04/Confluence-Can-t-get-a-secure-connection-error/"/>
      <url>/2019/12/04/Confluence-Can-t-get-a-secure-connection-error/</url>
      
        <content type="html"><![CDATA[<p>最近尝试逐步体系化自己的知识管理系统，发现了 Confluence 这个强大的 Wiki 系统，它还提供了移动端 App 进行访问自己的 Confluence，但 App 使用时在填写网站之后遇到了这个错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Can’t get a secure connection</span><br><span class="line"></span><br><span class="line">Either there’s a problem with your site’s certificate, or you need to install the certificate on your device. </span><br><span class="line">-----------------------</span><br><span class="line">Can’t get a secure connection</span><br><span class="line"></span><br><span class="line">Either you’re not using HTTPS, there’s a problem with your site’s certificate, or it’s not trusted by this device.</span><br></pre></td></tr></table></figure><p>原因比较简单，就是部署的SSL证书或者网站的 SSL 相关配置有问题。参考：<a href="https://confluence.atlassian.com/confkb/can-t-get-a-secure-connection-error-on-confluence-server-mobile-app-940695063.html" target="_blank" rel="noopener">Can’t get a secure connection error on Confluence Server mobile app</a></p><ul><li>证书链不完整</li><li>Apache 或者 Nginx 不支持 TLSv1.2 协议等</li></ul><a id="more"></a><p>这里我遇到的情况是「证书链不完整」。</p><ol><li><p>首先检测证书链：<a href="https://myssl.com/" target="_blank" rel="noopener">https://myssl.com/</a></p></li><li><p>如果检查结果里有说证书链不完整，可以使用 <a href="https://myssl.com/chain_download.html" target="_blank" rel="noopener">证书链修复工具</a> 进行修复，获取完整的证书链。</p></li></ol><p>如果有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="https://micro.blog.csdn.net/" target="_blank" rel="noopener">他叫自己Mr.张</a></li><li>掘金：<a href="https://juejin.im/user/56042f4b60b2f3a91f58461d" target="_blank" rel="noopener">cafeting</a></li><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Confluence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flurry 分析 API 中文文档（Flurry Analytics API）</title>
      <link href="/2019/07/13/Flurry-Analytics-API/"/>
      <url>/2019/07/13/Flurry-Analytics-API/</url>
      
        <content type="html"><![CDATA[<p>本文记录使用 API 获取 Flurry Analytics 报告的文档。</p><p>包含前期准备、API基础、数据详情、请求示例等</p><a id="more"></a><h2 id="初期准备"><a href="#初期准备" class="headerlink" title="初期准备"></a>初期准备</h2><ul><li><a href="https://developer.yahoo.com/flurry/docs/api/code/apptoken/" target="_blank" rel="noopener">获取 App Token</a></li><li>header 中必须包含：<code>Authorization: Bearer + App Token</code></li><li><a href="https://developer.yahoo.com/flurry-analytics-console/" target="_blank" rel="noopener">Flurry Analytics API Query Builder 查询器、调试器</a></li></ul><p>示例：</p><p>Headers:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Bearer xxxxxx</span><br></pre></td></tr></table></figure><h2 id="API-基础"><a href="#API-基础" class="headerlink" title="API 基础"></a>API 基础</h2><p><strong>API 地址</strong>：<code>https://api-metrics.flurry.com/public/v1/data/</code></p><p>API 请求可以组合起来去查询分析数据的元素。 API 中的所有内容都<strong>区分大小写</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">endPoint/table/timeGrain/dimension1/dimension2;show=all/dimension3&#123;...&#125;?metrics=[comma-separated-metrics]&amp;dateTime=[..]&amp;filters=[...]&amp;topN=[..]&amp;sort=[..]&amp;having=[..]&amp;format=[..]&amp;timeZone=[..]</span><br></pre></td></tr></table></figure><p>参数表及示例详见原文。</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">必要</th><th>例子</th></tr></thead><tbody><tr><td style="text-align:center">endpoint</td><td style="text-align:center">是</td><td>v1: <a href="https://api-metrics.flurry.com/public/v1/data/" target="_blank" rel="noopener">https://api-metrics.flurry.com/public/v1/data/</a></td></tr><tr><td style="text-align:center">table</td><td style="text-align:center">是</td><td><a href="#appUsage">appUsage</a>、<a href="#appEvent">appEvent</a>、 <a href="#eventParams">eventParams</a>、<a href="#realtime">realtime</a></td></tr><tr><td style="text-align:center">timeGrain</td><td style="text-align:center">是</td><td>见表详情内容</td></tr><tr><td style="text-align:center">dimension</td><td style="text-align:center">否</td><td>见表详情内容</td></tr><tr><td style="text-align:center">metrics</td><td style="text-align:center">是</td><td>见表详情内容</td></tr><tr><td style="text-align:center">dateTime</td><td style="text-align:center">是</td><td>Format for Day, Week: YYYY-MM-DD/YYYY-MM-DD <br> Format for Month: YYYY-MM/YYYY-MM <br>Format for Hour: YYYY-MM-DDTHH/YYYY-MM-DDTHH (HH in 24- hour format) follows ISO 8601</td></tr><tr><td style="text-align:center">filters</td><td style="text-align:center">否</td><td>组合的一个或多个维度属性过滤器（使用 <code>AND</code>）以减少输出以匹配您的条件。 id和name可用于所有维度。 一些维度具有在维度部分中调用的附加属性。<br>格式: `dimension1</td><td>attribute-operator [ value(s) ], dimension2</td><td>attribute-operator [ value(s) ]<code>&lt;br&gt;运算符:</code>in, notin, contains, startsWith<code>&lt;br&gt;例如:</code>country</td><td>name-in [‘United States’,‘Canada’,’Mexico’] ,appVersion</td><td>name-in[‘2.3’]`</td></tr><tr><td style="text-align:center">sort</td><td style="text-align:center">否</td><td>指定一个或多个指标来排序结果。 如果未指定顺序，则默认为降序。<br>例如: `sort=sessions</td><td>desc,activeDevices</td><td>desc`</td></tr><tr><td style="text-align:center">topN</td><td style="text-align:center">否</td><td>减少结果以匹配此参数指定的数字。 如果使用此参数，则还必须使用排序来指示必须计算顶点 n 的度量和顺序<br>例如：`topN=5 &amp; sort=sessions</td><td>desc`</td></tr><tr><td style="text-align:center">having</td><td style="text-align:center">否</td><td>减少结果以匹配指定的指标标准。 您可以组合多个指标标准。<br>格式：<code>metric-operator[value(s)]</code> <br>可用运算符：等于（eq），大于（gt），小于（lt），而不是版本<br>例子：<code>sessions-gt[1000],activeDevices-gt[200]</code></td></tr><tr><td style="text-align:center">format</td><td style="text-align:center">否</td><td>json (默认), csv</td></tr><tr><td style="text-align:center">timeZone</td><td style="text-align:center">否</td><td>默认的结果是UTC时区。 要获取所需时区的结果，请使用此参数。<br>例如: <code>America/New_York</code> 或 <code>America/Los_Angeles</code></td></tr></tbody></table><p>关于时区：<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/List_of_tz_database_time_zones</a></p><h3 id="Analytics-Metrics-分析指标"><a href="#Analytics-Metrics-分析指标" class="headerlink" title="Analytics Metrics 分析指标"></a>Analytics Metrics 分析指标</h3><p>以下是可用于报告的指标。</p><table><thead><tr><th style="text-align:left">Metric 指标</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left">sessions</td><td>用户访问应用程序的次数</td></tr><tr><td style="text-align:left">activeDevices</td><td>访问应用程序的唯一设备</td></tr><tr><td style="text-align:left">newDevices</td><td>安装并启动应用程序的新设备</td></tr><tr><td style="text-align:left">timeSpent</td><td>用户花在应用程序中的时间</td></tr><tr><td style="text-align:left">averageTimePerDevice</td><td>平均每个用户在应用程序中花费的时间</td></tr><tr><td style="text-align:left">averageTimePerSession</td><td>平均用户在应用程序每个会话中花费的时间</td></tr></tbody></table><h3 id="Analytics-Dimensions-分析范围、维度"><a href="#Analytics-Dimensions-分析范围、维度" class="headerlink" title="Analytics Dimensions 分析范围、维度"></a>Analytics Dimensions 分析范围、维度</h3><p>以下是可用于报告的维度和维度属性。</p><table><thead><tr><th>Dimensions范围、维度</th><th>描述</th><th>值</th></tr></thead><tbody><tr><td>company</td><td>Flurry company account</td><td>id, name (默认)</td></tr><tr><td>app</td><td>Flurry app</td><td>id, name (默认), company\</td><td>id, apiKey, platform\</td><td>id, platform\</td><td>name</td></tr><tr><td>country</td><td>每个国家的维度总计</td><td>id, name (默认), iso</td></tr><tr><td>appVersion</td><td>应用程式的版本号，名称，公司编号，应用程式编号，已删除和筛选。 删除和过滤是布尔值（0或1），并根据开发人员对Flurry开发人员门户的操作反映应用程序版本的当前状态</td><td>id, name (默认), company\</td><td>id, app\</td><td>id, deleted, filtered</td></tr><tr><td>language</td><td>Language id and name</td><td>id, name (默认)</td></tr><tr><td>region</td><td>地区：Region id and name</td><td>id, name (default)</td></tr><tr><td>category</td><td>分类： App category id and name</td><td>id, name (default)</td></tr><tr><td>event</td><td>仅适用于appEvent表; 事件ID，名称，应用ID，公司ID，删除和过滤。 删除和过滤是布尔值（0或1），并根据开发人员对Flurry开发人员门户的操作反映应用程序事件的当前状态。</td><td>id, name (default) , company\</td><td>id, app\</td><td>id, deleted, filtered</td></tr></tbody></table><p>在运行度量标准查询之前，您需要知道可能的维度值。 例如：您公司帐户上所有应用的列表名称和api密钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api-metrics.flurry.com/public/v1/data/appUsage/day/company/app;show=name,apiKey?metrics=...</span><br></pre></td></tr></table></figure><p>通常，要查看为给定维度返回的默认名称以外的值，请添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;show=all</span><br><span class="line">or</span><br><span class="line">;show=id  (any other value listed in the value column above for the given dimension</span><br></pre></td></tr></table></figure><p>添加维度名称之后：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://api-metrics.flurry.com/public/v1/data/appUsage/day/company/country;show=all/category?metrics=sessions,activeDevices,newDevices,timeSpent&amp;dateTime=2017-05-01/2017-05-02</span><br><span class="line"></span><br><span class="line">https://api-metrics.flurry.com/public/v1/data/appUsage/day/company/country;show=iso/category?metrics=sessions,activeDevices,newDevices,timeSpent&amp;dateTime=2017-05-01/2017-05-02</span><br></pre></td></tr></table></figure><h2 id="App-Usage-Data-应用使用的数据"><a href="#App-Usage-Data-应用使用的数据" class="headerlink" title="App Usage Data 应用使用的数据"></a>App Usage Data 应用使用的数据</h2><p>Table: <a id="appUsage">appUsage</a></p><table><thead><tr><th>Metrics 指标</th><th>Dimensions 范围</th><th>Time Grain</th></tr></thead><tbody><tr><td>sessions</td><td>company</td><td>day</td></tr><tr><td>activeDevices</td><td>app</td><td>week</td></tr><tr><td>newDevices</td><td>appVersion</td><td>month</td></tr><tr><td>timeSpent</td><td>country</td><td>all</td></tr><tr><td>averageTimePerDevice</td><td>language</td><td></td></tr><tr><td>averageTimePerSession</td><td>region</td><td></td></tr><tr><td>medianTimePerSession</td><td>category</td></tr></tbody></table><p>示例：关键应用指标查询</p><p>对于所有应用程序，每日会话，每日活动设备，2 天的新设备：请注意，由于过滤器中没有应用信息，结果将包括您公司的所有应用程序。</p><p>Request 请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api-metrics.flurry.com/public/v1/data/appUsage/day/app?metrics=sessions,activeDevices,newDevices&amp;dateTime=2016-07-01/2016-07-03</span><br></pre></td></tr></table></figure><p>Response 响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">"rows"</span>: [&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-01 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"sessions"</span>: <span class="number">372</span>,</span><br><span class="line">                <span class="attr">"activeDevices"</span>: <span class="number">123</span>,</span><br><span class="line">                <span class="attr">"newDevices"</span>: <span class="number">32</span>&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-01 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"bar"</span>,</span><br><span class="line">                <span class="attr">"sessions"</span>: <span class="number">1120</span>,</span><br><span class="line">                <span class="attr">"activeDevices"</span>: <span class="number">487</span>,</span><br><span class="line">                <span class="attr">"newDevices"</span>: <span class="number">34</span>&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-02 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"sessions"</span>: <span class="number">421</span>,</span><br><span class="line">                <span class="attr">"activeDevices"</span>: <span class="number">140</span>,</span><br><span class="line">                <span class="attr">"newDevices"</span>: <span class="number">12</span>&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-02 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"bar"</span>,</span><br><span class="line">                <span class="attr">"sessions"</span>: <span class="number">1164</span>,</span><br><span class="line">                <span class="attr">"activeDevices"</span>: <span class="number">453</span>,</span><br><span class="line">                <span class="attr">"newDevices"</span>: <span class="number">51</span>&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于特定应用程序，每月会话，有效设备和新设备（2个月）：</p><p>Request using Flurry API key:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api-metrics.flurry.com/public/v1/data/appUsage/day?metrics=sessions,activeDevices,newDevices&amp;dateTime=2016-06-01/2016-08-01&amp;filters=app|apiKey-in[3WD7Q8329867K7MY6RNS]</span><br></pre></td></tr></table></figure><p>Request using App name:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api-metrics.flurry.com/public/v1/data/appUsage/day?metrics=sessions,activeDevices,newDevices&amp;dateTime=2016-06-01/2016-08-01&amp;filters=app|name-in[appname]</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">"rows"</span>: [&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-06-01 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"sessions"</span>: <span class="number">12744</span>,</span><br><span class="line">                <span class="attr">"activeDevices"</span>: <span class="number">6373</span>,</span><br><span class="line">                <span class="attr">"newDevices"</span>: <span class="number">6373</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-01 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"sessions"</span>: <span class="number">13805</span>,</span><br><span class="line">                <span class="attr">"activeDevices"</span>: <span class="number">6882</span>,</span><br><span class="line">                <span class="attr">"newDevices"</span>: <span class="number">6882</span></span><br><span class="line">        &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="App-Events-Data"><a href="#App-Events-Data" class="headerlink" title="App Events Data"></a>App Events Data</h2><p>Table: <a id="appEvent">appEvent</a></p><table><thead><tr><th>Metrics 指标</th><th>Dimensions 范围</th><th>Time Grain</th></tr></thead><tbody><tr><td>activeDevices</td><td>company</td><td>day</td></tr><tr><td>newDevices</td><td>app</td><td>week</td></tr><tr><td>eventDuration</td><td>appVersion</td><td>month</td></tr><tr><td>averageTimePerDevice</td><td>country</td><td>all</td></tr><tr><td>averageTimePerSession</td><td>language</td><td></td></tr><tr><td>medianTimePerSession</td><td>region</td><td></td></tr><tr><td>occurrences</td><td>category</td><td></td></tr><tr><td></td><td>event</td></tr></tbody></table><p>示例：关键应用事件指标查询</p><p>对于特定应用程序事件，应用程序版本的事件发生次数（2天）：</p><p>Request:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api-metrics.flurry.com/public/v1/data/appEvent/day/app/appVersion/event?metrics=occurrences&amp;dateTime=2016-07-01/2016-07-03&amp;filters=app|name-in[foo],event|name-in[login,register]</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">"rows"</span>: [&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-01 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"event|name"</span>: <span class="string">"login"</span>,</span><br><span class="line">                <span class="attr">"occurrences"</span>: <span class="number">293</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-01 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"event|name"</span>: <span class="string">"register"</span>,</span><br><span class="line">                <span class="attr">"occurrences"</span>: <span class="number">57</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-02 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"event|name"</span>: <span class="string">"login"</span>,</span><br><span class="line">                <span class="attr">"occurrences"</span>: <span class="number">146</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-02 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"event|name"</span>: <span class="string">"register"</span>,</span><br><span class="line">                <span class="attr">"occurrences"</span>: <span class="number">31</span></span><br><span class="line">        &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于特定的应用程序事件，按活动设备排序的前5个国家的有效设备和新设备（2天）：</p><p>Request:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api-metrics.flurry.com/public/v1/data/appEvent/day/app/country?metrics=activeDevices,newDevices&amp;dateTime=2016-07-01/2016-07-03&amp;filters=app|name-in[foo],event|name-in[login]&amp;topN=5&amp;sort=activeDevices|desc</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">"rows"</span>: [&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-01 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"event|name"</span>: <span class="string">"login"</span>,</span><br><span class="line">                <span class="attr">"country|name"</span>: <span class="string">"United States"</span>,</span><br><span class="line">                <span class="attr">"occurrences"</span>: <span class="number">515</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-01 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"event|name"</span>: <span class="string">"login"</span>,</span><br><span class="line">                <span class="attr">"country|name"</span>: <span class="string">"United Kingdom"</span>,</span><br><span class="line">                <span class="attr">"occurrences"</span>: <span class="number">210</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-01 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"event|name"</span>: <span class="string">"login"</span>,</span><br><span class="line">                <span class="attr">"country|name"</span>: <span class="string">"Canada"</span>,</span><br><span class="line">                <span class="attr">"occurrences"</span>: <span class="number">165</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-01 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"event|name"</span>: <span class="string">"login"</span>,</span><br><span class="line">                <span class="attr">"country|name"</span>: <span class="string">"Germany"</span>,</span><br><span class="line">                <span class="attr">"occurrences"</span>: <span class="number">87</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-01 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"event|name"</span>: <span class="string">"login"</span>,</span><br><span class="line">                <span class="attr">"country|name"</span>: <span class="string">"France"</span>,</span><br><span class="line">                <span class="attr">"occurrences"</span>: <span class="number">46</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-02 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"event|name"</span>: <span class="string">"login"</span>,</span><br><span class="line">                <span class="attr">"country|name"</span>: <span class="string">"United States"</span>,</span><br><span class="line">                <span class="attr">"occurrences"</span>: <span class="number">435</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-02 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"event|name"</span>: <span class="string">"login"</span>,</span><br><span class="line">                <span class="attr">"country|name"</span>: <span class="string">"United Kingdom"</span>,</span><br><span class="line">                <span class="attr">"occurrences"</span>: <span class="number">190</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-02 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"event|name"</span>: <span class="string">"login"</span>,</span><br><span class="line">                <span class="attr">"country|name"</span>: <span class="string">"Canada"</span>,</span><br><span class="line">                <span class="attr">"occurrences"</span>: <span class="number">127</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-02 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"event|name"</span>: <span class="string">"login"</span>,</span><br><span class="line">                <span class="attr">"country|name"</span>: <span class="string">"Germany"</span>,</span><br><span class="line">                <span class="attr">"occurrences"</span>: <span class="number">76</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-07-02 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"event|name"</span>: <span class="string">"login"</span>,</span><br><span class="line">                <span class="attr">"country|name"</span>: <span class="string">"France"</span>,</span><br><span class="line">                <span class="attr">"occurrences"</span>: <span class="number">39</span></span><br><span class="line">        &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="App-Event-Parameter-Data"><a href="#App-Event-Parameter-Data" class="headerlink" title="App Event Parameter Data"></a>App Event Parameter Data</h2><p>Table: <a id="eventParams">eventParams</a></p><table><thead><tr><th>Metrics</th><th>Dimensions</th><th>Time Grain</th></tr></thead><tbody><tr><td>count</td><td>company</td><td>day</td></tr><tr><td></td><td>app</td><td>week</td></tr><tr><td></td><td>appVersion</td><td>month</td></tr><tr><td></td><td>country</td><td>all</td></tr><tr><td></td><td>language</td><td></td></tr><tr><td></td><td>region</td><td></td></tr><tr><td></td><td>category</td><td></td></tr><tr><td></td><td>event</td><td></td></tr><tr><td></td><td>paramName</td><td></td></tr><tr><td></td><td>paramValue</td></tr></tbody></table><p>示例：app 事件参数指标查询</p><p>对于特定的应用程序事件，提供1天的事件参数值细目：</p><p>Request:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api-metrics.flurry.com/public/v1/data/eventParams/day/app;show=all/event/paramName/paramValue?metrics=count&amp;filters=app|name-in[foo],event|name-in[level_complete]&amp;dateTime=2016-11-07/2016-11-08</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">"rows"</span>: [&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-11-07 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"event|name"</span>: <span class="string">"level_complete"</span>,</span><br><span class="line">                <span class="attr">"paramName|name"</span>: <span class="string">"level"</span>,</span><br><span class="line">                <span class="attr">"paramValue|name"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="attr">"count"</span>: <span class="number">32</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-11-07 00:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"event|name"</span>: <span class="string">"login"</span>,</span><br><span class="line">                <span class="attr">"paramName|name"</span>: <span class="string">"level"</span>,</span><br><span class="line">                <span class="attr">"paramValue|name"</span>: <span class="string">"2"</span>,</span><br><span class="line">                <span class="attr">"count"</span>: <span class="number">15</span></span><br><span class="line">        &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Real-Time-App-Data-实时数据"><a href="#Real-Time-App-Data-实时数据" class="headerlink" title="Real Time App Data 实时数据"></a>Real Time App Data 实时数据</h2><p>Table: <a id="realtime">realtime</a> (最近 48 小时)</p><table><thead><tr><th>Metrics</th><th>Dimensions</th><th>Time Grain</th></tr></thead><tbody><tr><td>sessions</td><td>company</td><td>hour</td></tr><tr><td>activeDevices</td><td>app</td><td>day</td></tr><tr><td></td><td>appVersion</td><td>all</td></tr><tr><td></td><td>country</td></tr></tbody></table><p>示例：实时<strong>指标查询</strong>，仅限48小时</p><p>对于特定应用程序，会话和活动设备在特定时间内：</p><p>Request:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api-metrics.flurry.com/public/v1/data/realtime/hour?metrics=sessions,activeDevices&amp;dateTime=2016-08-27T12/2016-08-27T13&amp;filters=app|name-in[foo]</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">"rows"</span>: [&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-08-31 12:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"sessions"</span>: <span class="number">145</span>,</span><br><span class="line">                <span class="attr">"activeDevices"</span>: <span class="number">90</span></span><br><span class="line">        &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于特定应用程序，在特定24小时内（不是日期边界），区分应用程序版本的会话总数和活动设备：</p><p>Request:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api-metrics.flurry.com/public/v1/data/realtime/all/app/appVersion?metrics=sessions,activeDevices&amp;dateTime=2016-08-31T12/2016-09-01T13&amp;filters=app|name-in[appname]</span><br></pre></td></tr></table></figure><p>Response:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">"rows"</span>: [&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-08-31 12:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"appVersion|name"</span>: <span class="string">"1.0"</span>,</span><br><span class="line">                <span class="attr">"sessions"</span>: <span class="number">231</span>,</span><br><span class="line">                <span class="attr">"activeDevices"</span>: <span class="number">87</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">                <span class="attr">"dateTime"</span>: <span class="string">"2016-08-31 12:00:00.000-07:00"</span>,</span><br><span class="line">                <span class="attr">"app|name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">                <span class="attr">"appVersion|name"</span>: <span class="string">"1.1"</span>,</span><br><span class="line">                <span class="attr">"Sessions"</span>: <span class="number">345</span>,</span><br><span class="line">                <span class="attr">"activeDevices"</span>: <span class="number">167</span></span><br><span class="line">        &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p>详见原文。</p><blockquote><p>官方文档：<a href="https://developer.yahoo.com/flurry/docs/api/code/analyticsapi/" target="_blank" rel="noopener">https://developer.yahoo.com/flurry/docs/api/code/analyticsapi/</a></p></blockquote><p>如果有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="https://micro.blog.csdn.net/" target="_blank" rel="noopener">他叫自己Mr.张</a> </li><li>掘金：<a href="https://juejin.im/user/56042f4b60b2f3a91f58461d" target="_blank" rel="noopener">cafeting</a></li><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Flurry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为 Android Studio 或者 Android 项目设置代理</title>
      <link href="/2019/06/05/SetProxyForAndroidStudio/"/>
      <url>/2019/06/05/SetProxyForAndroidStudio/</url>
      
        <content type="html"><![CDATA[<p>本文记录给 Android Studio 设置代理，并添加白名单。适用于 Jenkins 等 CI/CD 环境。有修改配置文件和命令行2种方式。</p><a id="more"></a><p>前置环境：一个 HTTP 代理</p><ul><li>Host：xx.xx.xx.xx</li><li>Port：xxxx</li><li>User：userid</li><li>Password：password</li></ul><p>需要加入白名单的域名：*.nonproxydomains.com</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>有2种使用方式：</p><ol><li>添加代理配置到当前项目或者全局环境下的 <code>gradle.properties</code> </li><li>命令行方式</li></ol><h3 id="方式一：修改gradle-properties"><a href="#方式一：修改gradle-properties" class="headerlink" title="方式一：修改gradle.properties"></a>方式一：修改<code>gradle.properties</code></h3><p>如果只想修改当前项目，则修改对象是当前项目下的 <code>gradle.properties</code> 文件</p><p>如果想修改后对所有使用 gradle 构建的项目都起作用，则修改当前用户下 <code>.gradle/gradle.properties</code> 文件。对于 类Unix系统(Linux、macOs) 是 <code>~/.gradle/</code> 目录（GRADLE_USER_HOME），Windows 是 系统盘下的 <code>/User/XXX/.gradle/</code> 目录。</p><p>要添加的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">systemProp.http.proxyHost=xx.xx.xx.xx</span><br><span class="line">systemProp.http.proxyPort=xxxx</span><br><span class="line">systemProp.http.proxyUser=userid</span><br><span class="line">systemProp.http.proxyPassword=password</span><br><span class="line">systemProp.http.nonProxyHosts=*.nonproxydomains.com|localhost</span><br><span class="line"></span><br><span class="line">systemProp.https.proxyHost=xx.xx.xx.xx</span><br><span class="line">systemProp.https.proxyPort=xxxx</span><br><span class="line">systemProp.https.proxyUser=userid</span><br><span class="line">systemProp.https.proxyPassword=password</span><br><span class="line">systemProp.https.nonProxyHosts=*.nonproxydomains.com|localhost</span><br></pre></td></tr></table></figure><h3 id="方式二：命令行方式"><a href="#方式二：命令行方式" class="headerlink" title="方式二：命令行方式"></a>方式二：命令行方式</h3><p>首先看个 Android 打包的完整命令，然后根据平台差异做一下说明（以macOS下为例）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cd projectRoot</span><br><span class="line">./gradlew :app:assembleDebug -Dhttp.proxyHost=xx.xx.xx.xx -Dhttp.proxyPort=xxxx -Dhttp.nonProxyHosts=*.nonproxydomains.com|localhost -Dhttp.proxyUser=userid -Dhttp.proxyPassword=password -Dhttps.proxyHost=xx.xx.xx.xx -Dhttps.proxyPort=xxxx -Dhttps.nonProxyHosts=*.nonproxydomains.com|localhost -Dhttps.proxyUser=userid -Dhttps.proxyPassword=password</span><br><span class="line"><span class="meta">#</span># 换行看下参数，和配置文件的参数对应</span><br><span class="line"><span class="meta">#</span> -Dhttp.proxyHost=xx.xx.xx.xx </span><br><span class="line"><span class="meta">#</span> -Dhttp.proxyPort=xxxx </span><br><span class="line"><span class="meta">#</span> -Dhttp.nonProxyHosts=*.nonproxydomains.com|localhost </span><br><span class="line"><span class="meta">#</span> -Dhttp.proxyUser=userid </span><br><span class="line"><span class="meta">#</span> -Dhttp.proxyPassword=password</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> -Dhttps.proxyHost=xx.xx.xx.xx </span><br><span class="line"><span class="meta">#</span> -Dhttps.proxyPort=xxxx </span><br><span class="line"><span class="meta">#</span> -Dhttps.nonProxyHosts=*.nonproxydomains.com|localhost </span><br><span class="line"><span class="meta">#</span> -Dhttps.proxyUser=userid </span><br><span class="line"><span class="meta">#</span> -Dhttps.proxyPassword=password</span><br></pre></td></tr></table></figure><p>这里特别说下 <code>http.nonProxyHosts=*.nonproxydomains.com|localhost</code> 中的 <code>|</code> 符号，命令行使用时可能因为平台差异、字符转义问题需要特殊处理。</p><p><strong>当然，如果按照上面的方式没有问题，则不需要特殊处理。</strong></p><p>对于 <code>Unix/Linux</code> 系统：管道字符 <code>|</code> 可能需要反斜杠 <code>\</code> 来转义，使它不被解释为 shell 管道。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-Dhttp.nonProxyHosts=*.nonproxydomains.com|localhost</span><br><span class="line"><span class="meta">#</span> 当上面的使用方式有问题时改为：</span><br><span class="line">-Dhttp.nonProxyHosts=*.nonproxydomains.com\|localhost</span><br></pre></td></tr></table></figure><p>对于 <code>Windows</code> 系统： <code>|</code> 可能需要反斜杠 <code>^</code> 来转。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-Dhttp.nonProxyHosts=*.nonproxydomains.com|localhost</span><br><span class="line"><span class="meta">#</span> 当上面的使用方式有问题时改为：</span><br><span class="line">-Dhttp.nonProxyHosts=*.nonproxydomains.com^|localhost</span><br></pre></td></tr></table></figure><p>对于使用字符串（双引号包裹）时，也需要转义处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-Dhttp.nonProxyHosts=*.nonproxydomains|localhost</span><br><span class="line"><span class="meta">#</span> 作为字符串处理时</span><br><span class="line">-Dhttp.nonProxyHosts="*.nonproxydomains\|localhost"</span><br></pre></td></tr></table></figure><blockquote><p>参考：</p><ul><li><a href="https://docs.gradle.org/current/userguide/build_environment.html#sec:accessing_the_web_via_a_proxy" target="_blank" rel="noopener">设置 HTTP 代理</a></li><li><a href="https://confluence.atlassian.com/jirakb/java-option-http-nonproxyhosts-does-not-work-214863640.html" target="_blank" rel="noopener">nonProxyHosts 无效</a> </li></ul></blockquote><p>如果有什么问题或者意见，可以通过下面的方式和我联系</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a> </li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a> </li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Proxy </tag>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最新支持备案域名后缀列表</title>
      <link href="/2019/06/05/domainRecordSuffix/"/>
      <url>/2019/06/05/domainRecordSuffix/</url>
      
        <content type="html"><![CDATA[<p>官网地址：<a href="http://xn--eqrt2g.xn--vuq861b/" target="_blank" rel="noopener">http://域名.信息</a></p><p>最新审核时间：2019-05-10</p><p>本文对中文域名未做识别处理。这里只列出英文域名。</p><a id="more"></a><p>注意：<code>cn</code> 以及 二级 <code>cn</code> 域名均可备案，包含：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cn</span><br><span class="line">gov.cn ZF机构</span><br><span class="line">org.cn 非盈利机构</span><br><span class="line">ac.cn 科研机构</span><br><span class="line">mil.cn国防机构</span><br><span class="line">net.cn互联网服务机构</span><br><span class="line">edu.cn教育机构</span><br><span class="line">com.cn企业</span><br></pre></td></tr></table></figure><p>用到的工具：</p><ul><li>OCR文字识别：白描</li><li>大小写转换：<a href="https://www.iamwawa.cn/daxiaoxie.html" target="_blank" rel="noopener">蛙蛙工具</a></li><li><a href="https://www.bejson.com/othertools/stringarraysort/" target="_blank" rel="noopener">字符串数组在线排序工具</a></li></ul><p>文字版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">REN</span><br><span class="line">WANG</span><br><span class="line">CITIC</span><br><span class="line">TOP</span><br><span class="line">SOHU</span><br><span class="line">XIN</span><br><span class="line">COM</span><br><span class="line">NET</span><br><span class="line">CLUB</span><br><span class="line">XYZ</span><br><span class="line">VIP</span><br><span class="line">SITE</span><br><span class="line">SHOP</span><br><span class="line">INK</span><br><span class="line">INFO</span><br><span class="line">MOBI</span><br><span class="line">RED</span><br><span class="line">PRO</span><br><span class="line">KIM</span><br><span class="line">LTD</span><br><span class="line">GROUP</span><br><span class="line">BIZ</span><br><span class="line">AUTO</span><br><span class="line">LINK</span><br><span class="line">WORK</span><br><span class="line">LAW</span><br><span class="line">BEER</span><br><span class="line">STORE</span><br><span class="line">TECH</span><br><span class="line">FUN</span><br><span class="line">ONLINE</span><br><span class="line">ART</span><br><span class="line">DESIGN</span><br><span class="line">WIKI</span><br><span class="line">LOVE</span><br><span class="line">CENTER</span><br><span class="line">VIDEO</span><br><span class="line">SOCIAL</span><br><span class="line">TEAM</span><br><span class="line">SHOW</span><br><span class="line">COOL</span><br><span class="line">ZONE</span><br><span class="line">WORLD</span><br><span class="line">TODAY</span><br><span class="line">CITY</span><br><span class="line">CHAT</span><br><span class="line">COMPANY</span><br><span class="line">LIVE</span><br><span class="line">FUND</span><br><span class="line">GURU</span><br><span class="line">RUN</span><br><span class="line">PUB</span><br><span class="line">EMAIL</span><br><span class="line">LIFE</span><br><span class="line">CO</span><br><span class="line">FASHION</span><br><span class="line">FIT</span><br><span class="line">LUXE</span><br><span class="line">YOGA</span><br><span class="line">BAIDU</span><br><span class="line">CLOUD</span><br><span class="line">HOST</span><br><span class="line">SPACE</span><br><span class="line">PRESS</span><br><span class="line">WEBSITE</span><br><span class="line">ARCHI</span><br><span class="line">ASIA</span><br><span class="line">BIO</span><br><span class="line">BLACK</span><br><span class="line">BLUE</span><br><span class="line">GREEN</span><br><span class="line">LOTTO</span><br><span class="line">ORGANIC</span><br><span class="line">PET</span><br><span class="line">PINK</span><br><span class="line">POKER</span><br><span class="line">PROMO</span><br><span class="line">SKI</span><br><span class="line">VOTE</span><br><span class="line">VOTO</span><br><span class="line">ICU</span><br></pre></td></tr></table></figure><p>小写且排序版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">archi</span><br><span class="line">art</span><br><span class="line">asia</span><br><span class="line">auto</span><br><span class="line">baidu</span><br><span class="line">beer</span><br><span class="line">bio</span><br><span class="line">biz</span><br><span class="line">black</span><br><span class="line">blue</span><br><span class="line">center</span><br><span class="line">chat</span><br><span class="line">citic</span><br><span class="line">city</span><br><span class="line">cloud</span><br><span class="line">club</span><br><span class="line">co</span><br><span class="line">com</span><br><span class="line">company</span><br><span class="line">cool</span><br><span class="line">design</span><br><span class="line">email</span><br><span class="line">fashion</span><br><span class="line">fit</span><br><span class="line">fun</span><br><span class="line">fund</span><br><span class="line">green</span><br><span class="line">group</span><br><span class="line">guru</span><br><span class="line">host</span><br><span class="line">icu</span><br><span class="line">info</span><br><span class="line">ink</span><br><span class="line">kim</span><br><span class="line">law</span><br><span class="line">life</span><br><span class="line">link</span><br><span class="line">live</span><br><span class="line">lotto</span><br><span class="line">love</span><br><span class="line">ltd</span><br><span class="line">luxe</span><br><span class="line">mobi</span><br><span class="line">net</span><br><span class="line">online</span><br><span class="line">organic</span><br><span class="line">pet</span><br><span class="line">pink</span><br><span class="line">poker</span><br><span class="line">press</span><br><span class="line">pro</span><br><span class="line">promo</span><br><span class="line">pub</span><br><span class="line">red</span><br><span class="line">ren</span><br><span class="line">run</span><br><span class="line">shop</span><br><span class="line">show</span><br><span class="line">site</span><br><span class="line">ski</span><br><span class="line">social</span><br><span class="line">sohu</span><br><span class="line">space</span><br><span class="line">store</span><br><span class="line">team</span><br><span class="line">tech</span><br><span class="line">today</span><br><span class="line">top</span><br><span class="line">video</span><br><span class="line">vip</span><br><span class="line">vote</span><br><span class="line">voto</span><br><span class="line">wang</span><br><span class="line">website</span><br><span class="line">wiki</span><br><span class="line">work</span><br><span class="line">world</span><br><span class="line">xin</span><br><span class="line">xyz</span><br><span class="line">yoga</span><br><span class="line">zone</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 备案 </tag>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>侧滑返回：透明（Translucent） Activity弹出 PopWindow 后侧滑时背景变黑色</title>
      <link href="/2019/02/17/TranslucentActivityPopWindowBlackBackground/"/>
      <url>/2019/02/17/TranslucentActivityPopWindowBlackBackground/</url>
      
        <content type="html"><![CDATA[<p>Android 模仿 iOS 的侧滑返回一般分2大类：透明方案和非透明方案。</p><p>其中透明方案有很多隐藏的意料之外的情况需要处理。本文记录透明方案弹出 PopWindow 后导致透明背景失效变黑色的情况。</p><h2 id="0x00-问题"><a href="#0x00-问题" class="headerlink" title="0x00 问题"></a>0x00 问题</h2><p>todo</p><p>Translucent,PopWindow,SwipeBack</p><a id="more"></a><h2 id="0x01-解决方法"><a href="#0x01-解决方法" class="headerlink" title="0x01 解决方法"></a>0x01 解决方法</h2><p> todo</p><h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>todo</p><p>如果有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>Github： <a href="http://likfe.github.io/" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li><li>掘金：<a href="https://juejin.im/user/56042f4b60b2f3a91f58461d" target="_blank" rel="noopener">cafeting</a></li><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Translucent </tag>
            
            <tag> SwipeBack </tag>
            
            <tag> PopWindow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遍历 AccessibilityNodeInfo 报 StackOverflowError</title>
      <link href="/2019/02/17/StackOverflowErrorInAccessibilityNodeInfo/"/>
      <url>/2019/02/17/StackOverflowErrorInAccessibilityNodeInfo/</url>
      
        <content type="html"><![CDATA[<p>在使用 AccessibilityService 遍历包含 WebView 的 AccessibilityNodeInfo 时会在某些情况下必现 <code>StackOverflowError</code> 的错误，导致应用崩溃。</p><h2 id="0x00-异常"><a href="#0x00-异常" class="headerlink" title="0x00 异常"></a>0x00 异常</h2><p>最近使用 Android 的 AccessibilityService 做一些自动化操作时发现，在部分机器上遍历包含 WebView 页面的 AccessibilityNodeInfo 时，某些页面必定会引起 <code>StackOverflowError</code> 错误，经过一番查证，定位到主要与系统所使用的 Android System WebView 版本有关，属于 WebView 的 Bug。</p><p>相关说明可以参考 <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=805014" target="_blank" rel="noopener">Android: Infinite loop of FrameLayouts in accessibility tree</a> 的讨论。</p><p><strong>查看 Android System WebView 版本</strong>（以下2种方法任一均可）：</p><ol><li>应用程序<ol><li>菜单：显示系统应用程序</li><li>点击列表中的：Android System WebView</li><li>详情页内包含版本</li></ol></li><li>开发者选项<ol><li>开启「开发者选项」</li><li>开发者选项 -&gt; WebView 实现</li></ol></li></ol><a id="more"></a><h2 id="0x01-解决"><a href="#0x01-解决" class="headerlink" title="0x01 解决"></a>0x01 解决</h2><p>方法有2种：</p><ol><li>一个是尝试在 Google Play Store 中升级 Android System WebView 到最新版；</li><li>一个是使用递归遍历 AccessibilityNodeInfo 时限制遍历的最大深度，这个深度根据情况大致在 40~70之间即可，既要基本保证能遍历完正常的 NodeTree 内的 Node，又要不引起  <code>StackOverflowError</code> 导致应用崩溃。</li></ol><p>当然，方法2更具有可控性和兼容性，某些情况下我们并不能左右用户手机上 Android System WebView 的版本。</p><h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>此类情况发生在特定的 Android System WebView 和 Android 版本上，建议使用了相关功能的应用加上 Bug 上报的功能。</p><p>如果有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>Github： <a href="http://likfe.github.io/" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li><li>掘金：<a href="https://juejin.im/user/56042f4b60b2f3a91f58461d" target="_blank" rel="noopener">cafeting</a></li><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> AccessibilityNodeInfo </tag>
            
            <tag> StackOverflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio Error:String index out of range:-1</title>
      <link href="/2018/10/25/as-err-string-range-1/"/>
      <url>/2018/10/25/as-err-string-range-1/</url>
      
        <content type="html"><![CDATA[<p>博主遇到此问题的原因是 NDK 版本过高（&gt;=18），或者说 Android Studio 版本过低（&lt;3.x），导致不匹配造成的。解决方法是降低 NDK 版本到 17.x 及以下，或者升级 Android Studio 版本到 3.x。</p><h2 id="0x00-异常"><a href="#0x00-异常" class="headerlink" title="0x00 异常"></a>0x00 异常</h2><p>最近接手同事的一个项目，在我电脑上使用 Android Studio 死活是无法正常加载，同步项目的过程一直报 <code>String index out of range: -1</code> 的异常，且没有任何有用的 Log 打印出来。</p><a id="more"></a><p>基础环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">macOS 10.13.6</span><br><span class="line">Android Studio 2.3.3</span><br><span class="line">JDK 1.8</span><br></pre></td></tr></table></figure><p>使用多个搜索引擎搜索 <code>Android Studio String index out of range: -1</code> 发现无一例此种情况，大多是 <code>String index out of range: -xx</code> ，xx 都小于 <code>-1</code> 。</p><h2 id="0x01-解决"><a href="#0x01-解决" class="headerlink" title="0x01 解决"></a>0x01 解决</h2><p>既然没有已有的解决方案，就只能下笨方法来处理了。我对比了 Android SDK 里面所有的库版本，逐一排除，锁定到 NDK 版本上，没问题的版本都是17及以下的，我的最近升级到 18.x 了，索性直接移除 NDK 试了下，发现项目能正常打开了。</p><p>由于公司项目使用的环境版本比较低，且无法支持高版本的 gradle 环境，遂选择使用降级 NDK 的方案。使用官网下载 NDK 17.x 版本后，项目也是正常运行。</p><h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>此类情况发生的几率比较小，但日常开发中还是需要多关注下开发环境，避免不必要的麻烦。</p><p>如果有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>Github： <a href="http://likfe.github.io/" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li><li>掘金：<a href="https://juejin.im/user/56042f4b60b2f3a91f58461d" target="_blank" rel="noopener">cafeting</a></li><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> AndroidStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native 小记 - LessBorderTextInput 无边框的 TextInput</title>
      <link href="/2018/10/24/RN-LessBorderTextInput/"/>
      <url>/2018/10/24/RN-LessBorderTextInput/</url>
      
        <content type="html"><![CDATA[<p>由于 TextInput 在 Android 和 iOS 平台默认表现不一致，为了统一样式，这里参照官方文档（ <a href="http://facebook.github.io/react-native/docs/textinput.html" target="_blank" rel="noopener">英文文档</a> | <a href="https://reactnative.cn/docs/0.48/textinput.html" target="_blank" rel="noopener">中文文档</a> ）进行了封装，并添加了对 <code>ref</code> 的支持。<code>ref</code> 用于获取组件，实现自动切换输入框的焦点等场景。</p><a id="more"></a><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123;Platform, TextInput,&#125; from &apos;react-native&apos;;</span><br><span class="line"></span><br><span class="line">//没有底部下划线的输入框</span><br><span class="line">export default class LessBorderTextInput extends React.Component &#123;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        if (this.props.onRef != null) &#123;</span><br><span class="line">            this.props.onRef(this)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    focus() &#123;</span><br><span class="line">        this.textInput.focus()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        let mView;</span><br><span class="line">        if (Platform.OS === &apos;android&apos;) &#123;</span><br><span class="line">            mView =</span><br><span class="line">                &lt;TextInput</span><br><span class="line">                    &#123;...this.props&#125;</span><br><span class="line">                    ref=&#123;input =&gt; this.textInput = input&#125;</span><br><span class="line">                    underlineColorAndroid=&#123;&quot;transparent&quot;&#125;</span><br><span class="line">                /&gt;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            mView =</span><br><span class="line">                &lt;TextInput</span><br><span class="line">                    &#123;...this.props&#125;</span><br><span class="line">                    ref=&#123;input =&gt; this.textInput = input&#125;</span><br><span class="line">                /&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">        return mView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基本实现思路是根据平台的不同，调用平台特有的属性来统一显示效果，再在使用的时候，外层嵌套 View 来实现统一样式的底部边框，还能添加类似密码点击可见等效果。</p><p>今天10.24 程序员节了，祝各位节日快乐。</p><p>如果有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li><li>掘金：<a href="https://juejin.im/user/56042f4b60b2f3a91f58461d" target="_blank" rel="noopener">cafeting</a></li><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native 小记 - TouchableOpacity 单次点击无效</title>
      <link href="/2018/10/23/RN-keyboardShouldPersistTaps/"/>
      <url>/2018/10/23/RN-keyboardShouldPersistTaps/</url>
      
        <content type="html"><![CDATA[<p>一般是焦点问题，解决方法：即在 ScrollView 标签内，根据情况设置其 <code>keyboardShouldPersistTaps</code> 属性值为 <code>always</code> 或者 <code>handled</code> 。详细解决过程如下：</p><h2 id="0x00-描述"><a href="#0x00-描述" class="headerlink" title="0x00 描述"></a>0x00 描述</h2><p>收到测试人员提交的 Bug：帐号密码输入完毕按返回键关闭键盘后，点击登录没反应，再点一次才执行登录操作。网上类似的情况还有 “当点击 TouchableOpacity 时，要点击两下才会触发 onPress() ”、“在 ScrollView 中 TouchableOpacity 需要在 TextInput 失去焦点后才能点击”等。</p><a id="more"></a><h2 id="0x01-问题查找"><a href="#0x01-问题查找" class="headerlink" title="0x01 问题查找"></a>0x01 问题查找</h2><p>作为一个 Android 开发者，看到情况描述，联想到是焦点问题。类似于 Android 原生开发的『ListView 的 Item 中 包含 EditText Button 时：EditText 与 Button 如何获取焦点、无法点击、ListView 不能滑动等』。</p><p>由于我遇到的是 ScrollView 使用时出现的问题，查看下 <a href="https://facebook.github.io/react-native/docs/scrollview.html#keyboardshouldpersisttaps" target="_blank" rel="noopener">scrollview 的官方文档</a> 发现有个 <code>keyboardShouldPersistTaps</code> 的属性，用于处理此类情况。</p><p>此外，在 <a href="https://stackoverflow.com/questions/34290787/touchableopacity-as-item-in-listview-only-reacts-after-textinput-has-lost-focus" target="_blank" rel="noopener">stackoverflow</a> 上也搜索到相关的回答，说是 ListView 也有此属性，<strong>但我本地 react-native-0.57.2 ListView 源码中并没有此属性。</strong></p><h2 id="0x02-解决方案"><a href="#0x02-解决方案" class="headerlink" title="0x02 解决方案"></a>0x02 解决方案</h2><p>再次看文档：（ <a href="https://facebook.github.io/react-native/docs/scrollview.html#keyboardshouldpersisttaps" target="_blank" rel="noopener">官方文档</a> | <a href="https://reactnative.cn/docs/scrollview/#keyboardshouldpersisttaps" target="_blank" rel="noopener">中文文档</a> ）</p><p>scrollview @  <code>keyboardShouldPersistTaps</code></p><p>如果当前界面有软键盘，那么点击 ScrollView 后是否收起键盘，取决于本属性的设置。</p><ul><li><code>&#39;never&#39;</code> （默认值），点击 TextInput 以外的子组件会使当前的软键盘收起。此时子元素不会收到点击事件。</li><li><code>&#39;always&#39;</code>，键盘不会自动收起，ScrollView 也不会捕捉点击事件，但子组件可以捕获。</li><li><code>&#39;handled&#39;</code>，当点击事件被子组件捕获时，键盘不会自动收起。这样切换 TextInput 时键盘可以保持状态。多数带有TextInput 的情况下你应该选择此项。</li><li><code>false</code>，已过时，请使用 <code>&#39;never&#39;</code>代替。</li><li><code>true</code>，已过时，请使用 <code>&#39;always&#39;</code> 代替。</li></ul><p>经测试，使用 <code>always</code> 或者 <code>handled</code> 均可解决发生的问题，由于我这里是 ScrollView 内部存在多个 TextInput，故选择 <code>handled</code> 值。</p><p>示例代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ScrollView</span></span></span><br><span class="line"><span class="tag"><span class="attr">style</span>=<span class="string">&#123;styles.mScrollView&#125;</span></span></span><br><span class="line"><span class="tag"><span class="attr">keyboardShouldPersistTaps</span>=<span class="string">&#123;</span>'<span class="attr">handled</span>'&#125;</span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.root&#125;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.userRoot&#125;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.userRootV1&#125;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">flex:</span> <span class="attr">1</span>,</span></span><br><span class="line"><span class="tag">                            <span class="attr">borderBottomColor:</span> '#<span class="attr">f0f0f0</span>',</span></span><br><span class="line"><span class="tag">                            <span class="attr">borderBottomWidth:</span> <span class="attr">1</span></span></span><br><span class="line"><span class="tag">                        &#125;&#125;&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">LessBorderTextInput</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">style</span>=<span class="string">&#123;styles.userRootV2&#125;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">multiline</span>=<span class="string">&#123;false&#125;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">placeholder</span>=<span class="string">&#123;</span>'请输入用户名'&#125;</span></span><br><span class="line"><span class="tag">                                <span class="attr">placeholderTextColor</span>=<span class="string">&#123;</span>'#<span class="attr">ccc</span>'&#125;</span></span><br><span class="line"><span class="tag">                                <span class="attr">autoFocus</span>=<span class="string">&#123;false&#125;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">onChangeText</span>=<span class="string">&#123;(newText)</span> =&gt;</span> this.updateUser(newText)&#125;</span><br><span class="line">                                returnKeyType=&#123;'next'&#125;</span><br><span class="line">                                onSubmitEditing=&#123;() =&gt; &#123;</span><br><span class="line">                                    this._input.focus();</span><br><span class="line">                                &#125;&#125;</span><br><span class="line">                            /&gt;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.userPwdRoot&#125;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.userPwdRootV1&#125;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">flexDirection:</span> '<span class="attr">row</span>',</span></span><br><span class="line"><span class="tag">                            <span class="attr">flex:</span> <span class="attr">1</span>,</span></span><br><span class="line"><span class="tag">                            <span class="attr">borderBottomColor:</span> '#<span class="attr">f0f0f0</span>',</span></span><br><span class="line"><span class="tag">                            <span class="attr">borderBottomWidth:</span> <span class="attr">1</span>,</span></span><br><span class="line"><span class="tag">                            <span class="attr">alignItems:</span> '<span class="attr">center</span>',</span></span><br><span class="line"><span class="tag">                        &#125;&#125;&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">LessBorderTextInput</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">style</span>=<span class="string">&#123;styles.userPwdRootV2&#125;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">placeholder</span>=<span class="string">&#123;</span>'请输入密码'&#125;</span></span><br><span class="line"><span class="tag">                                <span class="attr">multiline</span>=<span class="string">&#123;false&#125;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">placeholderTextColor</span>=<span class="string">&#123;</span>'#<span class="attr">ccc</span>'&#125;</span></span><br><span class="line"><span class="tag">                                <span class="attr">secureTextEntry</span>=<span class="string">&#123;!this.state.showPwd&#125;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">onChangeText</span>=<span class="string">&#123;(newText)</span> =&gt;</span> this.updatePwd(newText)&#125;</span><br><span class="line">                                returnKeyType=&#123;'done'&#125;</span><br><span class="line">                                ref=&#123;(c) =&gt; this._input = c&#125;</span><br><span class="line">                            /&gt;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">TouchableOpacity</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> this._showPwd(!this.state.showPwd)&#125;&gt;</span><br><span class="line">                                <span class="tag">&lt;<span class="name">Image</span></span></span><br><span class="line"><span class="tag">                                    <span class="attr">source</span>=<span class="string">&#123;pwd_icon&#125;</span></span></span><br><span class="line"><span class="tag">                                    <span class="attr">style</span>=<span class="string">&#123;styles.userPwdRootV3&#125;</span></span></span><br><span class="line"><span class="tag">                                /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TouchableOpacity</span></span></span><br><span class="line"><span class="tag"><span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> _login()&#125;&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.userSignIn&#125;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中 <code>LessBorderTextInput</code> 是我参考官方文档封装后无边框（方便实现各种 UI 设计要求）的 <code>TextInput</code> ，并且<strong>增加了支持 <code>ref</code> 属性的功能</strong>，可用于多处需要填写内容时直接在键盘上点击下一项即自动进入下一项的输入。参见博客的相关文章。</p><h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>发现问题，借助搜索工具能很快得到解决方案，我这里也特地把解决方法直接写到了文章的开头，至于如何解决问题，是给想了解原因的人准备的一个思路和说明。如果你有更好的见解，欢迎和我一起讨论。</p><p>如果有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li><li>掘金：<a href="https://juejin.im/user/56042f4b60b2f3a91f58461d" target="_blank" rel="noopener">cafeting</a></li><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Pages 对自定义域名支持 HTTPS</title>
      <link href="/2018/05/03/github-pages-custom-domains-support-https/"/>
      <url>/2018/05/03/github-pages-custom-domains-support-https/</url>
      
        <content type="html"><![CDATA[<p>GitHub Pages Blog 原文：<a href="https://blog.github.com/2018-05-01-github-pages-custom-domains-https/" target="_blank" rel="noopener">Custom domains on GitHub Pages gain support for HTTPS</a></p><p>在 2018-05-01，GitHub Pages 官方发布了上面的一篇 Blog，告知我们 GitHub Pages 对自定义域名支持 了 HTTPS ，下面针对此新特性来做个简单的说明并提供详细的开启操作流程。</p><h2 id="0x00-好处"><a href="#0x00-好处" class="headerlink" title="0x00 好处"></a>0x00 好处</h2><p>简单来说，除了 HTTPS 自身带来的加密、防劫持等特性外，Github 官方基于 HTTPS 配合 CND，使得网站的加载速度更快，还能提供额外的防御 DDoS 攻击的保护。</p><h2 id="0x01-操作流程"><a href="#0x01-操作流程" class="headerlink" title="0x01 操作流程"></a>0x01 操作流程</h2><p>关于如何在 Github Pages 上搭建一个博客，这里不再赘述，网上的教程比较多，此次仅对开启自定义域名支持 HTTPS 这一特性来进行说明。</p><a id="more"></a><p>本文以项目 <code>https://github.com/likfe/likfe.github.io</code> 和域名 <code>likfe.com</code> 为例。</p><p>操作流程：</p><ol><li>域名解析</li><li>GitHub Pages 项目设置<ol><li>添加 CNAME 文件</li><li>配置自定义域名</li></ol></li></ol><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>开启 Github Pages 之后，会有一个默认的二级域名作为访问地址，一般是和项目同名，比如我的这个项目的默认二级域名访问地址是 <code>http://likfe.github.io</code> 。知道这个之后，我们对域名进行解析操作：</p><p>我们添加一条 CNAME 解析：</p><table><thead><tr><th>主机记录（Host）</th><th>记录类型（Type）</th><th>记录值（Values）</th></tr></thead><tbody><tr><td><code>@</code></td><td>CNAME</td><td><code>likfe.github.io</code></td></tr><tr><td>或者： xxx 等任意值</td><td>CNAME</td><td><code>likfe.github.io</code></td></tr></tbody></table><p>上面提供了2个例子，第一个是你想使用 <code>likfe.com</code> 来访问你的博客，第二个就是 <code>xxx.likfe.com</code> 来访问，这里要和 <strong>GitHub Pages 项目设置</strong> 里的 <strong>CNAME 文件</strong>的内容要对应，后面会说。</p><p>解析生效后，可以尝试访问来查看是否解析成功，直接访问 <code>http://likfe.com</code> ，如果是 Github Pages 的 404 界面，说明解析成功了。</p><h3 id="Github-Pages-项目配置"><a href="#Github-Pages-项目配置" class="headerlink" title="Github Pages 项目配置"></a>Github Pages 项目配置</h3><p>大家可以参考 <a href="https://github.com/likfe/likfe.github.io" target="_blank" rel="noopener">我的项目</a> ，它的根目录里有个 <code>CNAME</code> 文件，文件的内容是和上面的域名解析对应的。</p><p>即如果使用 <code>@</code> 值 CNAME 到 <code>likfe.github.io</code>，则文件的内容为 <code>likfe.com</code> ;</p><p>如果使用 <code>xxx</code> 任意值 CNAME 到  <code>likfe.github.io</code>，则文件的内容应为 <code>xxx.likfe.com</code> 。</p><p>添加完成后，项目根目录有了此文件，下面去项目的 settings 看一下。</p><p>在 GitHub Pages 选项卡下能看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Your site is published at http://likfe.com/</span><br><span class="line">Custom domain</span><br><span class="line">Custom domains allow you to serve your site from a domain other than likfe.github.io. Learn more.</span><br><span class="line">likfe.com</span><br></pre></td></tr></table></figure><p>正常情况下是这样了，你勾选 <code>enforce HTTPS</code> 开启强制跳转到 HTTPS 即可，相应的Github Pages 的内容会变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your site is published at https://likfe.com/</span><br></pre></td></tr></table></figure><p>那么如果如果之前已经开启了自定义域名， <code>enforce HTTPS</code>  无法勾选且怎么办？</p><p>按照官方提示，进行如下操作：</p><ol><li>把 Custom domain 中的值清空，并点击 <code>Save</code>  进行保存；</li><li>在 Custom domain 中的填入之前清空的值，我这里是 <code>likfe.com</code> ，填入后点击保存；</li><li>尝试在浏览器里主动访问 <a href="https://likfe.com">https://likfe.com</a> ，地址要根据自己的情况，注意协议类型是 https，正确情况下是能正常访问的；</li><li>刷新项目设置页，如果  <code>enforce HTTPS</code>  可勾选，勾选即可；</li><li>如果  <code>enforce HTTPS</code>  不可勾选，并且提示  <code>Not yet available for your site because the certificate has not finished being issued”</code> ，说明证书尚未申请完成，等待一天即可。</li></ol><p>注意，如果使用 Chrome 访问 <a href="https://likfe.com">https://likfe.com</a> 地址栏左侧仍未出现小绿锁，请检查自己的网站引用的资源文件有没有使用了 http 协议，请替换成相应的 https 资源。</p><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 项目开发填坑记 - NoSuchMethodError:(java.lang.System.arraycopy)</title>
      <link href="/2018/02/09/android-arraycopy-error/"/>
      <url>/2018/02/09/android-arraycopy-error/</url>
      
        <content type="html"><![CDATA[<p>关键字：<code>NoSuchMethodError</code>、<code>System.arraycopy</code>、<code>Native Method</code></p><h3 id="0x00：奇怪的异常"><a href="#0x00：奇怪的异常" class="headerlink" title="0x00：奇怪的异常"></a>0x00：奇怪的异常</h3><p>应用新版本上线后观察错误日志，发现一个奇怪的 Crash 异常信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lang.java.NoSuchMethodError: (java.lang.System.arraycopy)</span><br></pre></td></tr></table></figure><p>异常集中发生在 Android 4.4.2 和 Android 5.1 上面，<code>System.arraycopy()</code> 是一个系统函数，要说没这个方法倒是不会，但异常发生了，说明应用在找这个方法时发生了错误。</p><a id="more"></a><h3 id="0x01：探究原因"><a href="#0x01：探究原因" class="headerlink" title="0x01：探究原因"></a>0x01：探究原因</h3><p>根据异常日志，追踪到 <code>System.arraycopy()</code> 是 <a href="http://iharder.sourceforge.net/current/java/base64/" target="_blank" rel="noopener">Base64.java</a> 的 <code>public static byte[] decode(byte[] source, int off, int len, int options)</code>  方法里调用的。</p><p>经过查找 Android API 19~21 的系统源码，发现发生此问题的原因是 Android&gt;=21 时，<code>java.lang.System.arraycopy()</code> 多了几个重载。</p><p>在 Android &lt;=20 上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.lang.System 只有一个 arraycopy 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src, <span class="keyword">int</span> srcPos,Object dst, <span class="keyword">int</span> dstPos, <span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure><p>在 Android &gt;=21 上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.lang.System</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src, <span class="keyword">int</span> srcPos,Object dst, <span class="keyword">int</span> dstPos, <span class="keyword">int</span> length)</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The byte[] specialized version of arraycopy().</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span> internal use only</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(<span class="keyword">byte</span>[] src, <span class="keyword">int</span> srcPos, <span class="keyword">byte</span>[] dst, <span class="keyword">int</span> dstPos, <span class="keyword">int</span> length)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>Base64.java</strong> 应该使用的是 <code>native void arraycopy(Object src...</code> ，但是会在  <code>compileSdkVersion&gt;=21</code> 时使用重载的 <code>arraycopy(byte[] src …</code> ，那么运行在  Android &lt;=20 的手机上时就会报  <code>java.lang.NoSuchMethodError</code>  的异常了。</p><p>总结下来就是：如果你在 Android 上使用了此 <a href="http://iharder.sourceforge.net/current/java/base64/" target="_blank" rel="noopener">Base64</a> 工具类，并且编译时使用的 Android 版本&gt;=21，那么在低版本上你<strong>可能</strong>会遇到 <code>java.lang.NoSuchMethodError: java.lang.System.arraycopy</code> 的异常。之所以说是可能，是因为出现此异常时在开发平常的应用时不会发生，一般是使用修改后的系统 Jar 包调用系统隐藏方法时才容易出现。</p><h3 id="0x02：解决方案"><a href="#0x02：解决方案" class="headerlink" title="0x02：解决方案"></a>0x02：解决方案</h3><p>如何解决呢？有两个方法：</p><p>1.指定使用 arraycopy 使用的重载方法，避免编译器用错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.arraycopy(outBuff, <span class="number">0</span>, out, <span class="number">0</span>, outBuffPosn);</span><br><span class="line"><span class="comment">//替换成</span></span><br><span class="line">System.arraycopy((Object) outBuff, <span class="number">0</span>, (Object) out, <span class="number">0</span>, outBuffPosn);</span><br></pre></td></tr></table></figure><p>2.使用 <code>Arrays.copyOf ()</code> 来替代 <code>System.arraycopy()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.arraycopy(outBuff, <span class="number">0</span>, out, <span class="number">0</span>, outBuffPosn);</span><br><span class="line"><span class="comment">//替换成</span></span><br><span class="line">out = Arrays.copyOf(outBuff, outBuffPosn);</span><br></pre></td></tr></table></figure><p>虽然 <code>Arrays.copyOf()</code> 的方法实现最后还是调用的 <code>System.arraycopy()</code> ，但是不会调用到错误的重载方法。</p><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 必知必会 - 使用 ADB 操作 Clipboard</title>
      <link href="/2018/01/17/android-adb-set-clipboard/"/>
      <url>/2018/01/17/android-adb-set-clipboard/</url>
      
        <content type="html"><![CDATA[<p>关键词：<code>service call</code> 、<code>clipboard</code> 、<code>Unknown package</code></p><p>手里一个项目需要执行个骚操作，其中有一个步骤是使用 ADB 来操作 Clipboard（粘贴板），搜索许久发现<strong>直接操作并不可行</strong>，确切的说是在 Android API &gt;=11 时是不可行的。</p><a id="more"></a><blockquote><p>操作环境：macOS Sierra 10.12.6 + iTerm2，一些命令可能会因系统等不同而略有不同，请自行测试。</p></blockquote><h2 id="前置知识点"><a href="#前置知识点" class="headerlink" title="前置知识点"></a>前置知识点</h2><p>首先了解下 ADB Shell 中的 <code>service</code> ，在命令行里执行能看到如下信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell</span><br><span class="line">$ service</span><br><span class="line">Usage: service [-h|-?]</span><br><span class="line">       service list</span><br><span class="line">       service check SERVICE</span><br><span class="line">       service call SERVICE CODE [i32 N | i64 N | f N | d N | s16 STR ] ...</span><br><span class="line">Options:</span><br><span class="line">   i32: Write the 32-bit <span class="built_in">integer</span> N into the send parcel.</span><br><span class="line">   i64: Write the 64-bit <span class="built_in">integer</span> N into the send parcel.</span><br><span class="line">   f:   Write the 32-bit single-precision number N into the send parcel.</span><br><span class="line">   d:   Write the 64-bit double-precision number N into the send parcel.</span><br><span class="line">   s16: Write the UTF-16 string STR into the send parcel.</span><br><span class="line">$ service list | grep clipboard</span><br><span class="line"><span class="comment"># If use windows system, use findstr: </span></span><br><span class="line"><span class="comment"># service list | findstr "clipboard"</span></span><br><span class="line">63clipboard: [android.content.IClipboard]</span><br></pre></td></tr></table></figure><p>下面找 CODE ，查看 Clipboard 的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// API &lt; 11</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_getClipboardText <span class="number">1</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_hasClipboardText <span class="number">3</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_setClipboardText <span class="number">2</span></span><br><span class="line"><span class="comment">// API &gt;= 11</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_setPrimaryClip = <span class="number">1</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_getPrimaryClip = <span class="number">2</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_getPrimaryClipDescription = <span class="number">3</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_hasPrimaryClip = <span class="number">4</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_addPrimaryClipChangedListener = <span class="number">5</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_removePrimaryClipChangedListener = <span class="number">6</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_hasClipboardText = <span class="number">7</span></span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>Clipboard 源码指出这些事务需要什么参数。TRANSACTION_setPrimaryClip 需要一个 ClipData，它不是一个 i32 或 s16，因此与服务调用不兼容。 更重要的是，这些事务需要调用包名称作为参数，剪贴板服务验证指定的包名称与调用的 uid 相匹配。 当使用adb shell 时，调用的 uid 是 UID_ROOT 或者 UID_SHELL，它们都不拥有任何包，所以没有办法通过这个检查。 简而言之，新的剪贴板服务不能以这种方式使用。</p><p>所以在 API &gt;= 11 的系统上使用 <code>service call clipboard [1 | 2 | 3] [i32 N | i64 N | f N | d N | s16 STR ]</code> 已经不可行了。</p><p>所以无论命令正确与否，都会提示 <code>Unknown package</code> ：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ service call clipboard 2 s16 <span class="string">"abc"</span></span><br><span class="line">Result: Parcel(</span><br><span class="line">  0x00000000: fffffffd 00000013 006e0055 006e006b <span class="string">'........U.n.k.n.'</span></span><br><span class="line">  0x00000010: 0077006f 0020006e 00610070 006b0063 <span class="string">'o.w.n. .p.a.c.k.'</span></span><br><span class="line">  0x00000020: 00670061 00200065 00620061 00000063 <span class="string">'a.g.e. .a.b.c...'</span>)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>就 Android 目前的各版本系统市场占有率而言，<strong>使用 ADB 操作 Clipboard 是一个不可行的方案了</strong>。</p><p>参考：</p><blockquote><ul><li><a href="https://stackoverflow.com/questions/7283446/pasting-text-into-android-emulator-clipboard-using-adb-shell" target="_blank" rel="noopener">Pasting text into Android emulator clipboard using adb shell</a></li><li><a href="https://stackoverflow.com/questions/14243427/set-clipboard-text-via-adb-shell-as-of-api-level-11" target="_blank" rel="noopener">Set clipboard text via adb shell as of API level 11</a></li></ul></blockquote><p>有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ADB </tag>
            
            <tag> Clipboard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单修复MacOS High Sierra 允许 Root 用户无密码登录的安全 Bug</title>
      <link href="/2017/11/29/mac10-13-root-bug/"/>
      <url>/2017/11/29/mac10-13-root-bug/</url>
      
        <content type="html"><![CDATA[<p>macOS High Sierra 最近爆出一个严重的安全漏洞，允许任何人在没有密码的情况下以完全管理功能的 root 用户登录到 Mac。据说已经有安全补丁，但是很多人未收到推送。</p><p>受影响的系统版本：</p><ul><li>macOS High Sierra 10.13</li><li>macOS High Sierra 10.13.1</li><li>macOS High Sierra 10.13.2 beta</li></ul><p>同时，这些系统下还需符合以下<strong>条件之一</strong>时才会受到安全漏洞的影响：</p><ul><li>以前<strong>没有</strong>启用 root 账户</li><li><strong>没有</strong>在 Mac 上更改过 root 用户账户密码</li></ul><p>这里有个比较简单的解决方法，可以防止这个安全 Bug 成为一个大问题。简单来说就是：<strong>在受影响的 Mac 上设置 root 用户的密码。</strong></p><a id="more"></a><h2 id="为-root-账户设置密码"><a href="#为-root-账户设置密码" class="headerlink" title="为 root 账户设置密码"></a>为 root 账户设置密码</h2><p>有两个方法来为 root 账户设置密码：</p><ol><li>使用「目录实用工具」（Directory Utility）</li><li>使用「命令行工具」（Terminal）</li></ol><h3 id="方法一：目录实用工具"><a href="#方法一：目录实用工具" class="headerlink" title="方法一：目录实用工具"></a>方法一：目录实用工具</h3><ol><li>打开 Spotlight （Command+Spacebar）输入 <code>Directory Utility</code> 打开「目录实用工具」；</li><li>点击「服务」页左下方的小锁，输入当前账户的密码后点击「修改配置」确认进行解锁；</li><li>点击菜单栏中的「编辑」-「更改 Root 密码」，输入两次密码（一定要记好了）并点「确定」即可。</li></ol><p>注意：如果「3」中更改 Root 密码不能点选，先点击「启用 Root 用户」。</p><h3 id="方法二：终端命令行"><a href="#方法二：终端命令行" class="headerlink" title="方法二：终端命令行"></a>方法二：终端命令行</h3><ol><li>在 LaunchPad 里打开 「终端」；</li><li>在「终端」里输入：<code>sudo passwd root</code> ；</li><li>键入当前账户的密码</li><li>看到：Changing password for root.New password 时即开始输入你要设置的 root 用户的密码</li></ol><h2 id="自检是否受免密码登录-root-漏洞的影响"><a href="#自检是否受免密码登录-root-漏洞的影响" class="headerlink" title="自检是否受免密码登录 root 漏洞的影响"></a>自检是否受免密码登录 root 漏洞的影响</h2><p>你可以从通用启动登录界面或通过系统首选项（如安全性与隐私或用户和组）中的任何管理员身份验证面板（单击锁定图标）执行此操作。把用户名输入为：root，不要输密码，然后点两次「解锁」，能解锁的话即受此漏洞影响。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 必知必会 - 获取手机系统的构建模式</title>
      <link href="/2017/10/09/android-usermode/"/>
      <url>/2017/10/09/android-usermode/</url>
      
        <content type="html"><![CDATA[<p>关键词：<code>Android</code> 、<code>Make</code> 、<code>user mode</code> 、<code>user</code> 、<code>userdebug</code> 、<code>eng</code></p><hr><p>判定手机系统的构建模式、用户模式</p><p>编译 Rom 时，需要指定目标构建模式，构建模式有三种：用户模式 user、用户调试模式 userdebug 和工程模式 eng</p><a id="more"></a><blockquote><ul><li>用户模式 user<ul><li>仅安装标签为 user 的模块</li><li>设定属性 ro.secure=1，打开安全检查功能</li><li>设定属性 ro.debuggable=0，关闭应用调试功能</li><li>默认关闭 adb 功能</li><li>打开 Proguard 混淆器</li><li>打开 DEXPREOPT 预先编译优化</li></ul></li><li>用户调试模式 userdebug<ul><li>安装标签为 user、debug 的模块</li><li>设定属性 ro.secure=1，打开安全检查功能</li><li>设定属性 ro.debuggable=1，启用应用调试功能</li><li>默认打开 adb 功能</li><li>打开 Proguard 混淆器</li><li>打开 DEXPREOPT 预先编译优化</li></ul></li><li>工程模式 eng<ul><li>安装标签为 user、debug、eng 的模块</li><li>设定属性 ro.secure=0，关闭安全检查功能</li><li>设定属性 ro.debuggable=1，启用应用调试功能</li><li>设定属性 ro.kernel.android.checkjni=1，启用 JNI 调用检查</li><li>默认打开 adb 功能</li><li>关闭 Proguard 混淆器</li><li>关闭 DEXPREOPT 预先编译优化</li></ul></li></ul><p>指定目标构建模式：在 <code>make</code> 命令中加入参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ sudo make -j8 PRODUCT-rk312x-user</span><br><span class="line">&gt; $ sudo make -j8 PRODUCT-rk312x-userdebug</span><br><span class="line">&gt; $ sudo make -j8 PRODUCT-rk312x-eng</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>来源：<a href="https://www.kancloud.cn/amoy0226/fireprime_android_compile/105885" target="_blank" rel="noopener">https://www.kancloud.cn/amoy0226/fireprime_android_compile/105885</a></p></blockquote><h2 id="判断构建模式"><a href="#判断构建模式" class="headerlink" title="判断构建模式"></a>判断构建模式</h2><p><strong>思路</strong>：通过观察以上三个模式的属性，这里使用安全检查功能（ro.securero）和应用调试功能（ro.debuggable）两个属性来区分这三个模式：</p><ul><li>user：<ul><li>ro.securero = 1</li><li>ro.debuggable = 0</li></ul></li><li>userdebug<ul><li>ro.securero = 1</li><li>ro.debuggable = 1</li></ul></li><li>eng<ul><li>ro.securero = 0</li><li>ro.debuggable = 1</li></ul></li></ul><p>其中，如果只需判断是否为 user 模式，使用 ro.debuggable 一个属性即可。</p><h3 id="寻找源码"><a href="#寻找源码" class="headerlink" title="寻找源码"></a>寻找源码</h3><p>在 <code>android.os.Build</code> 的源码中我发现一个静态变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns true if we are running a debug build such as "user-debug" or "eng".</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> IS_DEBUGGABLE =</span><br><span class="line">SystemProperties.getInt(<span class="string">"ro.debuggable"</span>, <span class="number">0</span>) == <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>但是没有 <code>ro.securero</code> 这个属性，进一步发现其调用的是 <code>android.os.SystemProperties</code> 的 <code>getInt()</code>  函数，那可以直接使用它来获取  <code>ro.securero</code> 的值。</p><p>由于是 <code>android.os.SystemProperties</code> 是隐藏类，我们可以使用两种方式来调用其方法：</p><p>方法一：使用修改过增加了这些隐藏类的 android.jar 来编译 APK，此方式问题较多，配置繁琐，不推荐；</p><p>方法二：使用反射调用，普通 App 即可使用，无限制，推荐使用此方法。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>先说下方法一下的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取系统构建模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int（0:未知, 1 user, 2 userdebug, 3 eng）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getOSMode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> debug = SystemProperties.getInt(<span class="string">"ro.debuggable"</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> secure = SystemProperties.getInt(<span class="string">"ro.secure"</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (debug == <span class="number">0</span> &amp;&amp; secure == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (debug == <span class="number">1</span> &amp;&amp; secure == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (debug == <span class="number">1</span> &amp;&amp; secure == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么方法二只是和方法一的属性获取方式不一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取系统构建模式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int（0:未知, 1 user, 2 userdebug, 3 eng）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getOSMode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class clazz = Class.forName(<span class="string">"android.os.SystemProperties"</span>);</span><br><span class="line"><span class="keyword">int</span> debug = (<span class="keyword">int</span>) clazz.getMethod(<span class="string">"getInt"</span>, String.class, <span class="keyword">int</span>.class).invoke(clazz, <span class="string">"ro.debuggable"</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> secure = (<span class="keyword">int</span>) clazz.getMethod(<span class="string">"getInt"</span>, String.class, <span class="keyword">int</span>.class).invoke(clazz, <span class="string">"ro.secure"</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (debug == <span class="number">0</span> &amp;&amp; secure == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (debug == <span class="number">1</span> &amp;&amp; secure == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (debug == <span class="number">1</span> &amp;&amp; secure == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException ignore) &#123;</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException ignore) &#123;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException ignore) &#123;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException ignore) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里未对反射时可能产生的异常做处理，只是简单的返回 0，有需要请自行处理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>android.os.Build</code> 和  <code>android.os.SystemProperties</code> 的源码在 Android SDK 中，很方便寻找，比较困难的一步就是了解到所需的属性和这两个类有关，这就需要对 Android Rom 的编译有一点了解。</p><p><strong>PS</strong>：如果有什么建议或者问题，可以通过下面的方式和我联系</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Make </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 必知必会 - 使用 Intent 打开第三方应用及验证可用性</title>
      <link href="/2017/08/30/android-is-intent-available/"/>
      <url>/2017/08/30/android-is-intent-available/</url>
      
        <content type="html"><![CDATA[<p>本文主要记录：</p><ul><li>使用 Intent 打开第三方应用或指定 Activity 的三种方式</li><li>使用上面三种方式时分别如何判断该 Intent 能否被解析</li><li>判断该 Intent 能否被解析中可能出现的遗漏</li></ul><a id="more"></a><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="1-App-的入口-Activity-与其-icon"><a href="#1-App-的入口-Activity-与其-icon" class="headerlink" title="1. App 的入口 Activity 与其 icon"></a>1. App 的入口 Activity 与其 icon</h3><p>一个普通的应用默认会有一个入口 Activity，它在 AndroidManifest.xml 中一般这样写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只有配置了一个这样的 Activity，这个应用才会点击的时候知道启动哪个 Activity，如果把 <code>category</code> 的值修改为 <code>android.intent.category.DEFAULT</code> 那么，这个应用将在桌面看不到 icon，无法直接打开了。</p><h2 id="使用-Intent-打开第三方应用或指定-Activity-的方式"><a href="#使用-Intent-打开第三方应用或指定-Activity-的方式" class="headerlink" title="使用 Intent 打开第三方应用或指定 Activity 的方式"></a>使用 Intent 打开第三方应用或指定 Activity 的方式</h2><ol><li>只知道包名 - 需要有默认的入口 Activity</li><li>启动指定第三方应用的 Activity - 需要包名和 Activity 名，且该 Activity 的 <code>Export=“true”</code></li><li>隐式启动第三方应用</li></ol><h3 id="1-使用-PackageManager-getLaunchIntentForPackage"><a href="#1-使用-PackageManager-getLaunchIntentForPackage" class="headerlink" title="1. 使用 PackageManager.getLaunchIntentForPackage()"></a>1. 使用 <code>PackageManager.getLaunchIntentForPackage()</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String package_name=<span class="string">"xx.xx.xx"</span>;</span><br><span class="line">PackageManager packageManager = context.getPackageManager();</span><br><span class="line">Intent it = packageManager.getLaunchIntentForPackage(package_name);</span><br><span class="line">startActivity(it);</span><br></pre></td></tr></table></figure><p>该方法针对只知道包名，想要启动该应用时使用，对该应用的唯一限制是<strong>有默认的入口 Activity</strong>。</p><p>当没有默认的入口 Activity 时，会报 <code>NullPointerException</code> 异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NullPointerException: Attempt to invoke virtual method &apos;java.lang.String android.content.Intent.toString()&apos; on a null object reference</span><br></pre></td></tr></table></figure><p>再看看 <code>getLaunchIntentForPackage()</code> 方法的说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a "good" intent to launch a front-door activity in a package.</span></span><br><span class="line"><span class="comment">     * This is used, for example, to implement an "open" button when browsing</span></span><br><span class="line"><span class="comment">     * through packages.  The current implementation looks first for a main</span></span><br><span class="line"><span class="comment">     * activity in the category &#123;<span class="doctag">@link</span> Intent#CATEGORY_INFO&#125;, and next for a</span></span><br><span class="line"><span class="comment">     * main activity in the category &#123;<span class="doctag">@link</span> Intent#CATEGORY_LAUNCHER&#125;. Returns</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;null&lt;/code&gt; if neither are found.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> packageName The name of the package to inspect.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> A fully-qualified &#123;<span class="doctag">@link</span> Intent&#125; that can be used to launch the</span></span><br><span class="line"><span class="comment">     * main activity in the package. Returns &lt;code&gt;null&lt;/code&gt; if the package</span></span><br><span class="line"><span class="comment">     * does not contain such an activity, or if &lt;em&gt;packageName&lt;/em&gt; is not</span></span><br><span class="line"><span class="comment">     * recognized.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Intent <span class="title">getLaunchIntentForPackage</span><span class="params">(String packageName)</span></span>;</span><br></pre></td></tr></table></figure><p>所以使用此方式判定 Intent 是否为空即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String package_name = <span class="string">"xx.xx.xx"</span>;</span><br><span class="line">PackageManager packageManager = getPackageManager();</span><br><span class="line">Intent it = packageManager.getLaunchIntentForPackage(package_name);</span><br><span class="line"><span class="keyword">if</span> (it != <span class="keyword">null</span>)&#123;</span><br><span class="line">startActivity(it);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//没有默认的入口 Activity</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用-Intent-setComponent"><a href="#2-使用-Intent-setComponent" class="headerlink" title="2. 使用 Intent.setComponent()"></a>2. 使用 <code>Intent.setComponent()</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String package_name = <span class="string">"xx.xx.xx"</span>;</span><br><span class="line">String activity_path = <span class="string">"xx.xx.xx.ab.xxActivity"</span>;</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<span class="comment">//可选</span></span><br><span class="line">ComponentName comp = <span class="keyword">new</span> ComponentName(package_name,activity_path);</span><br><span class="line">intent.setComponent(comp);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>此方式可以启动一个应用指定的 Activity，不限于默认入口 Activity。但此方式要求的条件多，如下：</p><ol><li>知道 App 的包名和 Activity 的全路径及其名称</li><li>需要启动的目标 Activity 在 AndroidManifest.xml 中的属性 <code>Export=“true”</code></li></ol><p>那这种方式下，如何判断目标 Activity 是否存在呢？</p><p>下面是网上流传的非常普遍的用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String package_name = <span class="string">"xx.xx.xx"</span>;</span><br><span class="line">String activity_path = <span class="string">"xx.xx.xx.ab.xxActivity"</span>;</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<span class="comment">//可选</span></span><br><span class="line">ComponentName cn = <span class="keyword">new</span> ComponentName(package_name,activity_path);</span><br><span class="line">intent.setComponent(cn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">startActivity(intent);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//找不到指定的 Activity</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遗憾的是，<code>Intent.resolveActivity()</code> 方法并不能判定此方式所要启动的 Activity 是否存在，如果此 Activity 不存在，会报 <code>java.lang.IllegalArgumentException: Unknown component</code> 异常，并导致程序崩溃。</p><p>下面看下 <code>resolveActivity()</code> 的代码，以及它的 相似方法 <code>resolveActivityInfo()</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ComponentName <span class="title">resolveActivity</span><span class="params">(PackageManager pm)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mComponent != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> mComponent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ResolveInfo info = pm.resolveActivity(<span class="keyword">this</span>,</span><br><span class="line">PackageManager.MATCH_DEFAULT_ONLY);</span><br><span class="line"><span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ComponentName(</span><br><span class="line">info.activityInfo.applicationInfo.packageName,</span><br><span class="line">info.activityInfo.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ActivityInfo <span class="title">resolveActivityInfo</span><span class="params">(PackageManager pm, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">ActivityInfo ai = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (mComponent != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ai = pm.getActivityInfo(mComponent, flags);</span><br><span class="line">&#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// ignore</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ResolveInfo info = pm.resolveActivity(<span class="keyword">this</span>,</span><br><span class="line">PackageManager.MATCH_DEFAULT_ONLY | flags);</span><br><span class="line"><span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">ai = info.activityInfo;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ai;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显而易见，我们此方式就是先设置的 ComponentName，所以会直接 <code>return mComponent</code> 给我们，并没有任何判定的逻辑。相对的，<code>resolveActivityInfo()</code> 则可以进行有效判定并返回 null。故，我们选择使用 <code>Intent.resolveActivityInfo()</code> 进行此方式下的判定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String package_name = <span class="string">"xx.xx.xx"</span>;</span><br><span class="line">String activity_path = <span class="string">"xx.xx.xx.ab.xxActivity"</span>;</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<span class="comment">//可选</span></span><br><span class="line">ComponentName cn = <span class="keyword">new</span> ComponentName(package_name,activity_path);</span><br><span class="line">intent.setComponent(cn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (intent.resolveActivityInfo(getPackageManager(), PackageManager.MATCH_DEFAULT_ONLY) != <span class="keyword">null</span>) &#123;</span><br><span class="line">startActivity(intent);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//找不到指定的 Activity</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-隐式启动第三方应用"><a href="#3-隐式启动第三方应用" class="headerlink" title="3.隐式启动第三方应用"></a>3.隐式启动第三方应用</h3><p>此方式多用于启动系统中的功能性应用，比如打电话、发邮件、预览图片、使用默认浏览器打开一个网页等。</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">&gt; intent.setAction(action);</span><br><span class="line">&gt; intent.addCategory(category);</span><br><span class="line">&gt; intent.setDataAndType(<span class="string">"abc://www.dfg.com"</span>,<span class="string">"image/gif"</span>);</span><br><span class="line">&gt; startActivity(intent);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li>条件1：IntentFilter 至少有一个 action 至少有一个Category，可以没有 Data 和 Type</li></ul><ul><li>条件2：如果有 Data，参数中 Data 必须符合 Data 规则</li></ul><ul><li>条件3：Action 和 Category 必须同时匹配 Activity 中的一个 Action 和一个 Category (Category 默认：android.intent.category.DEFAULT)</li></ul><p>来源： <a href="http://blog.csdn.net/tonyyxm/article/details/50260185" target="_blank" rel="noopener">Android 启动第三方应用的几种方法（整理）</a></p></blockquote><p>隐式启动功能繁多，就不一一列举了，需要时直接搜索相关代码即可，我们用打开一个网页为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Uri uri = Uri.parse(<span class="string">"http://www.abc.xyz"</span>);</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>这时，直接使用 <code>Intent.resolveActivity()</code> 方法没什么问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Uri uri = Uri.parse(<span class="string">"http://www.abc.xyz"</span>);</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (intent.resolveActivity(getPackageManager()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">startActivity(intent);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 没有安装所需应用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过阅读 PackageManager 的代码，发现还可以使用 <code>packageManager.queryIntentActivities()</code> 方法判断系统里是否有能解析指定 Intent 的应用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAvailable</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">PackageManager packageManager = context.getPackageManager();</span><br><span class="line">List list = packageManager.queryIntentActivities(intent,</span><br><span class="line">PackageManager.MATCH_DEFAULT_ONLY);</span><br><span class="line"><span class="keyword">return</span> list.size() &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，总结下来就是：</p><ul><li>方式一 <code>PackageManager.getLaunchIntentForPackage()</code>，直接判断返回的 Intent 是否为空即可；</li><li>方式二 <code>Intent.setComponent()</code>，使用 <code>Intent.resolveActivityInfo()</code> 或者 <code>packageManager.queryIntentActivities()</code> 两种方式；</li><li>方式三 隐式启动，使用  <code>Intent.resolveActivity()</code>、<code>Intent.resolveActivityInfo()</code> 、<code>packageManager.queryIntentActivities()</code> 三种方式均可。</li></ul><p>如果有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Intent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 必知必会 - EmptyView</title>
      <link href="/2017/07/07/android-empty-view/"/>
      <url>/2017/07/07/android-empty-view/</url>
      
        <content type="html"><![CDATA[<p>关键词：GridView ListView EmptyView SwipeRefreshLayout</p><p>在使用 GridView、ListView 时经常需要处理无数据的情况，给用户一些必要的提示。而 GridView 和 ListView 可以使用 <code>setEmptyView()</code> 方法来设置无数据时展示的  View 。</p><p>本文讲一下 EmptyView 的基本用法以及如何配合 SwipeRefreshLayout 使用。</p><a id="more"></a><h2 id="背景知识点"><a href="#背景知识点" class="headerlink" title="背景知识点"></a>背景知识点</h2><h3 id="FrameLayout-布局方式的特点"><a href="#FrameLayout-布局方式的特点" class="headerlink" title="FrameLayout 布局方式的特点"></a>FrameLayout 布局方式的特点</h3><p>FrameLayout 是对其子 View 约束最少最简单的布局，所有放在 FrameLayout 里的控件，都按照层次堆叠在屏幕的左上角。后加进来的控件覆盖前面的控件。</p><p>嗯，就像喷漆，后面喷的总是覆盖在之前喷的上面。</p><h3 id="setEmptyView-都做了什么？"><a href="#setEmptyView-都做了什么？" class="headerlink" title="setEmptyView() 都做了什么？"></a><code>setEmptyView()</code> 都做了什么？</h3><p><code>setEmptyView(View emptyView)</code> 是 <code>AdapterView</code> 的一个方法，ListView、GridView、Spinner 和 Gallery 都是 <code>AdapterView</code> 的子类，那么理论上来说，本文讲解的针对 ListView、GridView 设置 EmptyView 的方法对于 Spinner、Gallery 应该同样适用。</p><p>下面简单看下这个方法的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmptyView</span><span class="params">(View emptyView)</span> </span>&#123;</span><br><span class="line">        mEmptyView = emptyView;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If not explicitly specified this view is important for accessibility.</span></span><br><span class="line">        <span class="keyword">if</span> (emptyView != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; emptyView.getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO) &#123;</span><br><span class="line">            emptyView.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_YES);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> T adapter = getAdapter();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> empty = ((adapter == <span class="keyword">null</span>) || adapter.isEmpty());</span><br><span class="line">        updateEmptyStatus(empty);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Update the status of the list based on the empty parameter.  If empty is true and</span></span><br><span class="line"><span class="comment">     * we have an empty view, display it.  In all the other cases, make sure that the listview</span></span><br><span class="line"><span class="comment">     * is VISIBLE and that the empty view is GONE (if it's not null).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateEmptyStatus</span><span class="params">(<span class="keyword">boolean</span> empty)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isInFilterMode()) &#123;</span><br><span class="line">            empty = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (empty) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mEmptyView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mEmptyView.setVisibility(View.VISIBLE);</span><br><span class="line">                setVisibility(View.GONE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// If the caller just removed our empty view, make sure the list view is visible</span></span><br><span class="line">                setVisibility(View.VISIBLE);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We are now GONE, so pending layouts will not be dispatched.</span></span><br><span class="line">            <span class="comment">// Force one here to make sure that the state of the list matches</span></span><br><span class="line">            <span class="comment">// the state of the adapter.</span></span><br><span class="line">            <span class="keyword">if</span> (mDataChanged) &#123;           </span><br><span class="line">                <span class="keyword">this</span>.onLayout(<span class="keyword">false</span>, mLeft, mTop, mRight, mBottom); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mEmptyView != <span class="keyword">null</span>) mEmptyView.setVisibility(View.GONE);</span><br><span class="line">            setVisibility(View.VISIBLE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>基本就是：</p><ul><li>数据为空<ul><li><code>setVisibility(View.GONE);</code> 隐藏自身</li><li><code>mEmptyView.setVisibility(View.VISIBLE);</code> 显示 EmptyView</li></ul></li><li>数据不为空<ul><li><code>mEmptyView.setVisibility(View.GONE);</code> 隐藏 EmptyView</li><li><code>setVisibility(View.VISIBLE);</code> 显示自身</li></ul></li></ul><p>当然，中间还有一些非空判断等。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>这里需要说明一点，EmptyView 只要是一个 View 即可，所以除了基本控件（TextView|Button 等）外，也可以是嵌套的布局（LinearLayout|RelativeLayout 等）。</p><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p><strong>布局：</strong></p><ul><li>LinearLayout|FrameLayout|RelativeLayout<ul><li>GridView|ListView (id = dataView)</li><li>View( id = mEmptyView ,任意 View，可嵌套)</li></ul></li></ul><p><strong>关键代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.xxx);</span><br><span class="line">mDataView = (GridView|ListView) findViewById(R.id.dataView);</span><br><span class="line">adapter = xxxx;</span><br><span class="line">mDataView.setAdapter(adapter);</span><br><span class="line">mDataView.setEmptyView(findViewById(R.id.mEmptyView));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：务必在 <code>setAdapter()</code> 之后调用 <code>setEmptyView()</code> 。</p><h3 id="配合-SwipeRefreshLayout-使用"><a href="#配合-SwipeRefreshLayout-使用" class="headerlink" title="配合 SwipeRefreshLayout 使用"></a>配合 SwipeRefreshLayout 使用</h3><p>配合 SwipeRefreshLayout 使用和基础用法类似，唯一需要注意的是布局的嵌套关系。</p><p><strong>布局：</strong></p><ul><li>FrameLayout<ul><li>SwipeRefreshLayout<ul><li>GridView|ListView (id = dataView)</li></ul></li><li>View( id = mEmptyView ,任意 View，可嵌套)</li></ul></li></ul><p><strong>关键代码没有变化</strong>。这里 <code>GridView|ListView</code>在 <code>SwipeRefreshLayout</code> 内部，<code>SwipeRefreshLayout</code> 和 <code>EmptyView</code> 需要同级，且最好在 <code>FrameLayout</code> 内部。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文简单总结了两种最基本的用法，其他更高级更复杂嵌套的情况都可以参考这两种基本用法。</p><p>有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 必知必会 - DialogFragment 实现类似 PopupWindow 效果</title>
      <link href="/2017/06/01/android-dialogfragment-as-pop/"/>
      <url>/2017/06/01/android-dialogfragment-as-pop/</url>
      
        <content type="html"><![CDATA[<p>近期有网友根据 <a href="http://blog.csdn.net/ys743276112/article/details/52962046" target="_blank" rel="noopener">Android 必知必会 - DialogFragment 使用总结</a> 做一些业务，但是目标却是用 DialogFragment 实现类似 PopupWindow 效果：</p><ul><li>只拦截自身所占空间部分的事件，其余空间的点击事件不处理</li><li>可以根据某个 View 定位自身位置</li></ul><p>虽然在功能上 PopupWindow 更符合需要，但是使用 DialogFragment 代码更简洁、更方便封装功能模块。</p><a id="more"></a><h2 id="基础知识点"><a href="#基础知识点" class="headerlink" title="基础知识点"></a>基础知识点</h2><h3 id="WindowManager-LayoutParams-flags"><a href="#WindowManager-LayoutParams-flags" class="headerlink" title="WindowManager.LayoutParams.flags"></a>WindowManager.LayoutParams.flags</h3><p><code>WindowManager.LayoutParams.flags</code> 修改 Window 的表现行为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line">* Various behavioral options/flags.  Default is none.</span><br><span class="line">*</span><br><span class="line">* @see #FLAG_ALLOW_LOCK_WHILE_SCREEN_ON</span><br><span class="line">* @see #FLAG_DIM_BEHIND</span><br><span class="line">* @see #FLAG_NOT_FOCUSABLE</span><br><span class="line">* @see #FLAG_NOT_TOUCHABLE</span><br><span class="line">* @see #FLAG_NOT_TOUCH_MODAL</span><br><span class="line">* @see #FLAG_TOUCHABLE_WHEN_WAKING</span><br><span class="line">* @see #FLAG_KEEP_SCREEN_ON</span><br><span class="line">* @see #FLAG_LAYOUT_IN_SCREEN</span><br><span class="line">* @see #FLAG_LAYOUT_NO_LIMITS</span><br><span class="line">* @see #FLAG_FULLSCREEN</span><br><span class="line">* @see #FLAG_FORCE_NOT_FULLSCREEN</span><br><span class="line">* @see #FLAG_SECURE</span><br><span class="line">* @see #FLAG_SCALED</span><br><span class="line">* @see #FLAG_IGNORE_CHEEK_PRESSES</span><br><span class="line">* @see #FLAG_LAYOUT_INSET_DECOR</span><br><span class="line">* @see #FLAG_ALT_FOCUSABLE_IM</span><br><span class="line">* @see #FLAG_WATCH_OUTSIDE_TOUCH</span><br><span class="line">* @see #FLAG_SHOW_WHEN_LOCKED</span><br><span class="line">* @see #FLAG_SHOW_WALLPAPER</span><br><span class="line">* @see #FLAG_TURN_SCREEN_ON</span><br><span class="line">* @see #FLAG_DISMISS_KEYGUARD</span><br><span class="line">* @see #FLAG_SPLIT_TOUCH</span><br><span class="line">* @see #FLAG_HARDWARE_ACCELERATED</span><br><span class="line">* @see #FLAG_LOCAL_FOCUS_MODE</span><br><span class="line">* @see #FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>以上可以看到它有很多可选项，加上可以多个相互组合，能满足很多需求，这里重点关注三个属性值：</p><ul><li><p>FLAG_NOT_TOUCH_MODAL</p><blockquote><p>Window flag: even when this window is focusable (its <code>FLAG_NOT_FOCUSABLE</code> is not set), allow any pointer events outside of the window to be sent to the windows behind it.</p><p> (API level 1)</p></blockquote></li><li><p>FLAG_TRANSLUCENT_NAVIGATION</p><blockquote><p>Window flag: request a translucent navigation bar with minimal system-provided background protection.</p><p> (API level 19)</p></blockquote></li><li><p>FLAG_TRANSLUCENT_STATUS</p><blockquote><p>Window flag: request a translucent status bar with minimal system-provided background protection.</p><p> (API level 19)</p></blockquote></li></ul><p>更详细的介绍请点击 <a href="https://developer.android.google.cn/reference/android/view/WindowManager.LayoutParams.html" target="_blank" rel="noopener">文档</a></p><p>其中 <code>FLAG_NOT_TOUCH_MODAL</code> 可达到『只拦截自身所占空间部分的事件，其余空间的点击事件不处理』的需求，而 <code>FLAG_TRANSLUCENT_NAVIGATION</code> 和 <code>FLAG_TRANSLUCENT_STATUS</code> 主要是用来调整使用<strong>沉浸式状态栏</strong>时显示自身位置不正确的问题。</p><h3 id="获取-View-位置的时机"><a href="#获取-View-位置的时机" class="headerlink" title="获取 View 位置的时机"></a>获取 View 位置的时机</h3><p>如果需要让 DialogFragment 在 <code>onCreate()</code> 等生命周期函数内直接调用显示到某个 View 的位置处，可能无法正确获取到该 View 的坐标，具体参考 <a href="http://blog.csdn.net/ys743276112/article/details/51396838" target="_blank" rel="noopener">Android必知必会-获取View坐标和长宽的时机</a> 一文。</p><p>但是，如果在界面显示给用户后，DialogFragment 的显示交给用户触发的话，就不需要在意这个问题了。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote><p>TopFragment.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXT_Y = <span class="string">"y value"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXT_BAR = <span class="string">"isTranslucentDecor"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isTranslucentDecor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopFragment <span class="title">getInstant</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstant(y, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TopFragment <span class="title">getInstant</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">boolean</span> isTranslucentDecor)</span> </span>&#123;</span><br><span class="line">        TopFragment fragment = <span class="keyword">new</span> TopFragment();</span><br><span class="line">        Bundle ext = <span class="keyword">new</span> Bundle();</span><br><span class="line">        ext.putInt(EXT_Y, y);</span><br><span class="line">        ext.putBoolean(EXT_BAR, isTranslucentDecor);</span><br><span class="line">        fragment.setArguments(ext);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setStyle(DialogFragment.STYLE_NO_TITLE, R.style.dialogFrag);</span><br><span class="line">        Bundle args = getArguments();</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            y = args.getInt(EXT_Y, <span class="number">0</span>);</span><br><span class="line">            isTranslucentDecor = args.getBoolean(EXT_BAR, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            y = <span class="number">0</span>;</span><br><span class="line">            isTranslucentDecor = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        getDialog().setCanceledOnTouchOutside(<span class="keyword">false</span>);</span><br><span class="line">        View rootView = inflater.inflate(R.layout.fragment_top, container, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//Do something</span></span><br><span class="line">        <span class="keyword">final</span> Window window = getDialog().getWindow();</span><br><span class="line">        window.setBackgroundDrawableResource(android.R.color.transparent);</span><br><span class="line">        window.getDecorView().setPadding(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        WindowManager.LayoutParams wlp = window.getAttributes();</span><br><span class="line">        wlp.width = WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">        wlp.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">        wlp.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;</span><br><span class="line">        <span class="keyword">if</span> (isTranslucentDecor) &#123;</span><br><span class="line">            wlp.flags |= WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION;</span><br><span class="line">        &#125;</span><br><span class="line">        wlp.gravity = Gravity.TOP;<span class="comment">//必须为 TOP，否则定位不准确</span></span><br><span class="line">        wlp.y = y;<span class="comment">//配合 Gravity.TOP 才能准确定位</span></span><br><span class="line">        window.setAttributes(wlp);</span><br><span class="line">      <span class="comment">//Debug info</span></span><br><span class="line">        rootView.findViewById(R.id.vvv).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(getActivity(), <span class="string">"dialogFragment 响应了点击事件"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> rootView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>MainActivity.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line">  findViewById(R.id.bt_menu).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">TextView title = (TextView) findViewById(R.id.tv_title);</span><br><span class="line">TopFragment.getInstant(title.getBottom()).show(getSupportFragmentManager(), <span class="string">"tags"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：如果当前 Activity 使用了<strong>沉浸式状态栏</strong>，需要使用 <code>TopFragment.getInstant(int y, boolean isTranslucentDecor)</code> 方法，并且 <code>isTranslucentDecor</code> 传值为 <code>true</code> 。</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><table><thead><tr><th style="text-align:left">未使用沉浸式状态栏、 <code>isTranslucentDecor</code> 传值为 <code>false</code> ，位置正确</th><th style="text-align:left">使用沉浸式状态栏、 <code>isTranslucentDecor</code> 传值为 <code>false</code> ，位置定位差个状态栏高度</th><th style="text-align:left">使用沉浸式状态栏、 <code>isTranslucentDecor</code> 传值为 <code>true</code> ，位置正确</th></tr></thead><tbody><tr><td style="text-align:left"><img src="http://img.blog.csdn.net/20170601183835306?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveXM3NDMyNzYxMTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="s1"></td><td style="text-align:left"><img src="http://img.blog.csdn.net/20170601183850744?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveXM3NDMyNzYxMTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="s2"></td><td style="text-align:left"><img src="http://img.blog.csdn.net/20170601183904651?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveXM3NDMyNzYxMTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="s3"></td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，这里基本完成了要求的效果，但是定位只能指定其顶部开始的位置，不方便底部定位到某个 View 的上面，因为高度自适应的话，在页面渲染完成前是不能知道它的高度的。当然，你可以使用固定高度布局的方式来实现随意定位。</p><p>有什么建议或者问题可以随时联系我，共同探讨学习：</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> DialogFragment </tag>
            
            <tag> PopupWindow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 项目开发填坑记 - 获取系统语言(兼容7.0)</title>
      <link href="/2017/05/10/android-sys-language/"/>
      <url>/2017/05/10/android-sys-language/</url>
      
        <content type="html"><![CDATA[<p>关键词：<code>Android7.0</code> 、<code>系统语言</code> 、<code>顺序不一致</code></p><p>获取系统当前语言是一个比较常用的功能，在 Android 7.0 系统上旧函数获取到的当前系统语言并不正确，或者说从 Android 7.0 起，Android 系统语言的规则变了。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>下面是未适配 Android 7.0 的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 Locale 的方式有二</span></span><br><span class="line">Locale locale = getResources().getConfiguration().locale;</span><br><span class="line">Locale locale = Locale.getDefault();</span><br><span class="line"><span class="comment">// 获取当前系统语言</span></span><br><span class="line">locale.getLanguage();</span><br></pre></td></tr></table></figure><p>由于仅仅根据 <code>getLanguage()</code> 无法全面的了解当前的系统语言信息，比如简体中文和繁体中文的 Language 都是 <code>zh</code>，所以还需要 <code>getCountry()</code>  方法获取地区信息，我们就能得到 <code>zh-CN</code> 和 <code>zh-HK/zh-TW</code> 。</p><p>总结一下就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 Locale 的方式有二</span></span><br><span class="line">Locale locale = getResources().getConfiguration().locale;</span><br><span class="line">Locale locale = Locale.getDefault();</span><br><span class="line"><span class="comment">// 获取当前系统语言</span></span><br><span class="line">String lang = locale.getLanguage() + <span class="string">"-"</span> + locale.getCountry();</span><br></pre></td></tr></table></figure><p>但是，在 Android 7.0 上：<code>getResources().getConfiguration().locale</code> 被标记为 <strong>deprecated</strong> 了，所以<strong>初步适配</strong>后是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Locale locale；</span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</span><br><span class="line">    locale = getResources().getConfiguration().getLocales().get(<span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    locale = getResources().getConfiguration().locale;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者仅仅使用 locale = Locale.getDefault(); 不需要考虑接口 deprecated(弃用)问题</span></span><br><span class="line">String lang = locale.getLanguage() + <span class="string">"-"</span> + locale.getCountry();</span><br></pre></td></tr></table></figure><p>从 Android 7.0 起使用的<code>getResources().getConfiguration().getLocales()</code> 返回的是一个 <code>LocaleList</code> 对象，它包含 <code>&gt;=1</code> 个 Locale，内容项可由用户增删，顺序可由用户调整。但是，此接口返回的语言顺序和用户定义的顺序<strong>不一定一致</strong>！</p><h2 id="测试语言顺序"><a href="#测试语言顺序" class="headerlink" title="测试语言顺序"></a>测试语言顺序</h2><p>测试核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Locale locale = Locale.getDefault();</span><br><span class="line">MLog.e(locale.getLanguage() + <span class="string">"-"</span> + locale.getCountry());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</span><br><span class="line">LocaleList localeList = getResources().getConfiguration().getLocales();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; localeList.size(); i++) &#123;</span><br><span class="line">MLog.e(i + <span class="string">" &gt;1&gt; "</span> + localeList.get(i).getLanguage() + <span class="string">"-"</span> + localeList.get(i).getCountry());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LocaleList localeList2 = LocaleList.getAdjustedDefault();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; localeList2.size(); i++) &#123;</span><br><span class="line">MLog.e(i + <span class="string">" &gt;2&gt; "</span> + localeList2.get(i).getLanguage() + <span class="string">"-"</span> + localeList2.get(i).getCountry());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LocaleList localeList3 = LocaleList.getDefault();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; localeList3.size(); i++) &#123;</span><br><span class="line">MLog.e(i + <span class="string">" &gt;3&gt; "</span> + localeList3.get(i).getLanguage() + <span class="string">"-"</span> + localeList3.get(i).getCountry());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LocaleList localeList4 = LocaleList.getEmptyLocaleList();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; localeList4.size(); i++) &#123;</span><br><span class="line">MLog.e(i + <span class="string">" &gt;4&gt; "</span> + localeList4.get(i).getLanguage() + <span class="string">"-"</span> + localeList4.get(i).getCountry());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第一次测试"><a href="#第一次测试" class="headerlink" title="第一次测试"></a>第一次测试</h3><p>测试手机：Nubia Z9 mini，Android 7.1，Mokee Rom</p><p>手机系统语言顺序：<code>hi-IN,zh-CN,en-US,zh-HK</code></p><p>App 国际化：<code>values,values-zh</code> （values 里的 string 为英文，values-zh 里的 string 为中文）</p><p>结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">zh-CN</span><br><span class="line"></span><br><span class="line">0 &gt;1&gt; zh-CN</span><br><span class="line">1 &gt;1&gt; hi-IN</span><br><span class="line">2 &gt;1&gt; en-US</span><br><span class="line">3 &gt;1&gt; zh-HK</span><br><span class="line"></span><br><span class="line">0 &gt;2&gt; zh-CN</span><br><span class="line">1 &gt;2&gt; hi-IN</span><br><span class="line">2 &gt;2&gt; en-US</span><br><span class="line">3 &gt;2&gt; zh-HK</span><br><span class="line"></span><br><span class="line">0 &gt;3&gt; hi-IN</span><br><span class="line">1 &gt;3&gt; zh-CN</span><br><span class="line">2 &gt;3&gt; en-US</span><br><span class="line">3 &gt;3&gt; zh-HK</span><br></pre></td></tr></table></figure><p>并且 App 当前显示的文字是<strong>中文</strong>。</p><h3 id="第二次测试"><a href="#第二次测试" class="headerlink" title="第二次测试"></a>第二次测试</h3><p>测试手机：Nubia Z9 mini，Android 7.1，Mokee Rom</p><p>手机系统语言顺序：<code>hi-IN,en-US,zh-CN,zh-HK</code></p><p>App 国际化：<code>values,values-zh</code></p><p>结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">en-US</span><br><span class="line"></span><br><span class="line">0 &gt;1&gt; en-US</span><br><span class="line">1 &gt;1&gt; hi-IN</span><br><span class="line">2 &gt;1&gt; zh-CN</span><br><span class="line">3 &gt;1&gt; zh-HK</span><br><span class="line"></span><br><span class="line">0 &gt;2&gt; en-US</span><br><span class="line">1 &gt;2&gt; hi-IN</span><br><span class="line">2 &gt;2&gt; zh-CN</span><br><span class="line">3 &gt;2&gt; zh-HK</span><br><span class="line"></span><br><span class="line">0 &gt;3&gt; hi-IN</span><br><span class="line">1 &gt;3&gt; en-US</span><br><span class="line">2 &gt;3&gt; zh-CN</span><br><span class="line">3 &gt;3&gt; zh-HK</span><br></pre></td></tr></table></figure><p>并且 App 当前显示的文字是<strong>英文</strong>。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>从 Android 7.0 开始，系统语言支持多个，可手动排序，系统根据 App 本身支持的语言和手机出厂设置的语言等因素来调整 App 本身的默认语言。</p><p>要获取系统为 App <strong>调整后的默认语言</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Locale locale = Locale.getDefault();</span><br><span class="line"><span class="comment">//Locale.getDefault() 和 LocaleList.getAdjustedDefault().get(0) 同等效果，还不需要考虑版本问题，推荐直接使用</span></span><br><span class="line">String language = locale.getLanguage() + <span class="string">"-"</span> + locale.getCountry();</span><br></pre></td></tr></table></figure><p>要获取系统<strong>真实首选语言</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Locale locale;</span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</span><br><span class="line">locale = LocaleList.getDefault().get(<span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> locale = Locale.getDefault();</span><br><span class="line"></span><br><span class="line">String language = locale.getLanguage() + <span class="string">"-"</span> + locale.getCountry();</span><br></pre></td></tr></table></figure><blockquote><p>参考资料：<a href="https://developer.android.com/reference/java/util/Locale.html" target="_blank" rel="noopener">https://developer.android.com/reference/java/util/Locale.html</a></p></blockquote><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP 转换数据库查询出的数据到对应类型</title>
      <link href="/2017/03/25/tp3-x-all-string/"/>
      <url>/2017/03/25/tp3-x-all-string/</url>
      
        <content type="html"><![CDATA[<p>最近使用 ThinkPHP3.2.3 进行 API 开发，发现 ThinkPHP3.x 查询数据库返回所有字段值类型都是 String。以前开发 web 的时候没怎么注意这个，现在发现用到 API 开发很难办，数据类型不对，不能每个字段都让客户端自己强制转换一下。</p><p>查资料后发现 ThinkPHP3.x 的 Model.class.php，提供了 <code>_parseType</code> 方法，在查询完以后进行类型转换，但需要我们手工调一下。</p><a id="more"></a><p>需要自己写一个 Model 基类:</p><p><code>MBaseModel.class.php</code> 继承自 <code>Model</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_after_select</span><span class="params">(&amp;$resultSet, $options)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::_after_select($resultSet,$options);</span><br><span class="line">        <span class="keyword">foreach</span> ($resultSet <span class="keyword">as</span> &amp;$result) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_after_find($result, $options);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_after_find</span><span class="params">(&amp;$result, $options)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::_after_find($result,$options);</span><br><span class="line">        <span class="keyword">foreach</span> ($result <span class="keyword">as</span> $field =&gt; $value) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_parseType($result, $field);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后所有自己写的 Model 类都继承自 MBaseModel.</p><p><strong>注意：</strong>必须把上面两个方法写到 <code>Model</code> 的子类中。</p><p>本来，这样已经搞定了，但发现 Model.class.php 的 <code>_parseType</code> 方法里有个低级 bug：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据类型检测</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> protected</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $data 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key 字段名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_parseType</span><span class="params">(&amp;$data,$key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;options[<span class="string">'bind'</span>][<span class="string">':'</span>.$key]) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;fields[<span class="string">'_type'</span>][$key]))&#123;</span><br><span class="line">            $fieldType = strtolower(<span class="keyword">$this</span>-&gt;fields[<span class="string">'_type'</span>][$key]);</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">false</span> !== strpos($fieldType,<span class="string">'enum'</span>))&#123;</span><br><span class="line">                <span class="comment">// 支持ENUM类型优先检测</span></span><br><span class="line">            &#125;<span class="keyword">elseif</span>(<span class="keyword">false</span> === strpos($fieldType,<span class="string">'bigint'</span>) &amp;&amp; <span class="keyword">false</span> !== strpos($fieldType,<span class="string">'int'</span>)) &#123;</span><br><span class="line">                $data[$key]   =  intval($data[$key]);</span><br><span class="line">            &#125;<span class="keyword">elseif</span>(<span class="keyword">false</span> !== strpos($fieldType,<span class="string">'float'</span>) || <span class="keyword">false</span> !== strpos($fieldType,<span class="string">'double'</span>))&#123;</span><br><span class="line">                $data[$key]   =  floatval($data[$key]);</span><br><span class="line">            &#125;<span class="keyword">elseif</span>(<span class="keyword">false</span> !== strpos($fieldType,<span class="string">'bool'</span>))&#123;</span><br><span class="line">                $data[$key]   =  (bool)$data[$key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面第13行修改为</span></span><br><span class="line">            &#125;<span class="keyword">elseif</span>(<span class="keyword">false</span> !== strpos($fieldType,<span class="string">'bigint'</span>) || <span class="keyword">false</span> !== strpos($fieldType,<span class="string">'int'</span>) || <span class="keyword">false</span> !== strpos($fieldType,<span class="string">'tinyint'</span>)) &#123;</span><br></pre></td></tr></table></figure><blockquote><p>原文链接：<a href="https://www.pocketdigi.com/20160411/1469.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">https://www.pocketdigi.com/20160411/1469.html?utm_source=tuicool&amp;utm_medium=referral</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 必知必会 - Android Studio 2.3 找回 exploded-aar 目录【官方已更新】</title>
      <link href="/2017/03/15/android-studio-exploded-aar/"/>
      <url>/2017/03/15/android-studio-exploded-aar/</url>
      
        <content type="html"><![CDATA[<p>今天收到邮件提示 <code>exploded-aar</code> 目录问题在 <code>gradle plugin 2.5</code> 版本修复好了。</p><blockquote><p>Marked as Fixed</p><p>in 2.3/2.4 you can look in the build cache entries and look in the input file that indicate the source of the cache entry (maven coordinate).<br>in 2.5+ we switched to Gradle’s own cache so you’ll have to look in the gradle folder.<br>If all you need is manually get the aar content you could also manually download the aar and unzip it yourself.</p></blockquote><p>查看 Issue 详情（需要梯子）：<a href="https://issuetracker.google.com/issues/37127616" target="_blank" rel="noopener">Issue 页</a></p><p>— 更新于 2017-05-11</p><hr><p>升级到 Android Studio 2.3 后，Gradle Plugin 也升级到 2.3.0，对应推荐使用的 Gradle 版本是 3.3。</p><p>这时候会发现项目目录下 <code>{module name}/build/intermediates/exploded-aar/</code> 目录没了，经过一番查找，发现这并不是一个 Bug，是官方刻意为之，它会在 <code>{user name}/.android/build-cache</code> 下生成一部分缓存文件，来代替 <code>exploded-aar</code> ，如果需要生成它，可以配置项目目录下的 <code>gradle.properties</code> ，添加一行内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.enableBuildCache=false</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后重建项目即可在 <code>{module name}/build/intermediates/</code> 看到 <strong>exploded-aar</strong> 目录了。</p><p>想重新开启 <code>BuildCache</code>  功能，可以修改为 <code>android.enableBuildCache=true</code> 或者直接删除本行内容即可。</p><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> AndroidStudio </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio 升级 gradle 报错</title>
      <link href="/2017/03/13/android-update-gradle/"/>
      <url>/2017/03/13/android-update-gradle/</url>
      
        <content type="html"><![CDATA[<p>错误提示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Gradle sync failed: Cause: error in opening zip file</span><br><span class="line">Consult IDE log for more details (Help | Show Log)</span><br></pre></td></tr></table></figure><p>今天升级 2.2 到 2.3 后打开一个项目提示升级 gradle，就同意了，结果报了上面的错误。</p><p>大概原因应该是下载的最新的 gradle 包有问题，新升级后配置的代理失效了。</p><p>操作如下：</p><ol><li>删除项目目录下的 <code>.gradle/</code> 整个项目</li><li>查看 <code>gradle/wrapper/gradle-warpper.properties</code> 的 <code>distributionUrl</code> 的 gradle 版本，比如是 3.3 ，然后去 <code>~/.gradle/warpper/dists/</code> 下删除对应版本的 gradle ,这里是 <code>gradle-3.3-all</code></li><li>然后重启 Android Studio 让它重新同步即可</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> AndroidStudio </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Mac 下 Android Studio 不打印日志</title>
      <link href="/2017/03/02/mac-android-no-log/"/>
      <url>/2017/03/02/mac-android-no-log/</url>
      
        <content type="html"><![CDATA[<p>在 Mac 下使用 Android Studio 时常会遇到 Android Monitor 突然不打印日志的情况，目前知道的有三个方法：</p><ol><li><p>重启 Android Studio</p><p>这个不需要多说，点击 Android Studio 的 File =&gt; Invalidate caches / Restart ，选择 Just Restart</p></li><li><p>重启 adb</p><p>命令行下输入：<code>adb kill-server</code> 关闭 adb，<code>adb start-server</code> 开启 adb 即可。</p></li><li><p>切换 adb 的 root/unroot 模式</p><p>这个实际上还是重启了 adb 。 <code>adb root</code> 使 adb 默认进入 root 模式，<code>adb unroot</code> 使 adb 进入非 root 模式，切换模式会导致 adb 重启。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 必知必会 - 根据包名判断 App 运行状态</title>
      <link href="/2017/02/07/android-is-app-running/"/>
      <url>/2017/02/07/android-is-app-running/</url>
      
        <content type="html"><![CDATA[<p>获取指定包名的 APP 是否还在后台运行，判断 APP 是否存活。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>可以根据 App 是否有 <code>Service</code> 分两类情况处理：</p><ul><li>没有 <code>Service</code></li><li>有 <code>Service</code></li></ul><p>对于没有 <code>Service</code> 的 App，程序一旦切换到后台，可能很快就被回收了，这里使用 <code>ActivityManager.getRunningTasks(int maxNum)</code> 方法来获取当前正在运行的任务，注意：此方法并不被系统推荐，且是一个 <code>Deprecated</code> 的方法。</p><p>对于有 <code>Service</code> 的 App，大多会有多个 <code>Service</code> ，且有可能都是 <code>:remote</code> 类型的，这样在判断上需要进行一定的处理，这里根据 App 的 <code>uid</code> 来判断，避免在一些特殊的情况下判断存活不准确的问题。我们使用 <code>ActivityManager.getRunningServices(int maxNum)</code> 方法获取当前运行中的 <code>Service</code> 列表。</p><p><strong>注意：</strong>App 的 <code>uid</code>  对于系统内置 App 而言不是唯一的，Android 内置的应用会有共用 <code>uid</code> 的情况。如果你是开发系统内置应用或者类似的东西，务必要自行进行特殊方式检查。</p><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>下面是几个工具类，在正式使用的时候需要配合使用，才能覆盖全部情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 方法描述：判断某一应用是否正在运行</span></span><br><span class="line"><span class="comment">    * Created by cafeting on 2017/2/4.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> context     上下文</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> packageName 应用的包名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> true 表示正在运行，false 表示没有运行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAppRunning</span><span class="params">(Context context, String packageName)</span> </span>&#123;</span><br><span class="line">       ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">       List&lt;ActivityManager.RunningTaskInfo&gt; list = am.getRunningTasks(<span class="number">100</span>);</span><br><span class="line">       <span class="keyword">if</span> (list.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (ActivityManager.RunningTaskInfo info : list) &#123;</span><br><span class="line">           <span class="keyword">if</span> (info.baseActivity.getPackageName().equals(packageName)) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取已安装应用的 uid，-1 表示未安装此应用或程序异常</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getPackageUid</span><span class="params">(Context context, String packageName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           ApplicationInfo applicationInfo = context.getPackageManager().getApplicationInfo(packageName, <span class="number">0</span>);</span><br><span class="line">           <span class="keyword">if</span> (applicationInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">               Logger.d(applicationInfo.uid);</span><br><span class="line">               <span class="keyword">return</span> applicationInfo.uid;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 判断某一 uid 的程序是否有正在运行的进程，即是否存活</span></span><br><span class="line"><span class="comment">    * Created by cafeting on 2017/2/4.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> context     上下文</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> uid 已安装应用的 uid</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> true 表示正在运行，false 表示没有运行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isProcessRunning</span><span class="params">(Context context, <span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">       ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">       List&lt;ActivityManager.RunningServiceInfo&gt; runningServiceInfos = am.getRunningServices(<span class="number">200</span>);</span><br><span class="line">       <span class="keyword">if</span> (runningServiceInfos.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (ActivityManager.RunningServiceInfo appProcess : runningServiceInfos)&#123;</span><br><span class="line">               <span class="keyword">if</span> (uid == appProcess.uid) &#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在正式使用的时候结合两者即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String pName = <span class="string">"xxx"</span>;</span><br><span class="line"><span class="keyword">int</span> uid = getPackageUid(context, pName);</span><br><span class="line"><span class="keyword">if</span>(uid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">  <span class="keyword">boolean</span> rstA = isAppRunning(context, pName);</span><br><span class="line">  <span class="keyword">boolean</span> rstB = isProcessRunning(context, uid);</span><br><span class="line">  <span class="keyword">if</span>(rstA||rstB)&#123;</span><br><span class="line">      <span class="comment">//指定包名的程序正在运行中</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//指定包名的程序未在运行中</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="comment">//应用未安装</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在探索验证程序存活的过程中，发现 <code>ActivityManager.RunningServiceInfo</code> 包含很多信息，一开始我是使用其 <code>process</code> 和 <code>started</code> 属性来判断，其中 <code>process</code> 对应包名，但是对于只有 <code>:remote</code> 类型 <code>service</code> 时，则判定不了。</p><p>以上是最近开发中处理的一个需求，希望能对你有所帮助。如果你有更好的方法或者发现了文中的错误，可以通过下面的方式和我联系：</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【译】在 Jelly Bean 中使用应用加密</title>
      <link href="/2017/01/05/android-app-encrypt/"/>
      <url>/2017/01/05/android-app-encrypt/</url>
      
        <content type="html"><![CDATA[<p>翻译自：<a href="http://nelenkov.blogspot.jp/2012/07/using-app-encryption-in-jelly-bean.html" target="_blank" rel="noopener">Using app encryption in Jelly Bean</a></p><p>关键词 : <code>adb install -l</code></p><hr><p>最新的 Android 4.1（Jelly Bean）版本在上周的 Google I / O 大会上发布了，它有一大堆新功能和改进。 其中一个有趣的功能是<strong>应用程序加密</strong>，除了简短的说明还没有任何细节：“从 Jelly Bean 版本起，Google Play 中的付费应用程序在分发和存储之前，会使用设备特定的密钥加密”。缺乏细节当然会引起猜测，有些人甚至担心，当他们使用一个新的设备时必须回购他们的付费应用程序。 在本文中，我们将介绍如何在操作系统中实施应用加密，展示如何在不通过 Google Play 的情况下安装加密的应用，并了解 Google Play 如何提供加密的应用。</p><h2 id="操作系统对加密应用程序的支持"><a href="#操作系统对加密应用程序的支持" class="headerlink" title="操作系统对加密应用程序的支持"></a>操作系统对加密应用程序的支持</h2><p>本文之前的版本是基于 Eclipse 框架和二进制的系统镜像，并且缺少一部分。由于 Jelly Bean 已经开源，下面的讨论已经修改，现在是基于 AOSP 代码（4.1.1_r1）。如果你回来重读本文，重点放在第二部分。</p><a id="more"></a><p>Android 上的应用可以通过几种不同的方式安装：</p><ul><li>通过应用商店（例如 <a href="https://play.google.com/store" target="_blank" rel="noopener">Google Play Store</a>，也称为 Android Market）</li><li>直接在手机上打开应用文件或电子邮件附件（如果启用“位置来源”选项）</li><li>使用通过 USB 连接的计算机的 <code>adb install</code> SDK 命令</li></ul><p>前两个不提供任何选项或者特定视角的底层实现，让我们探索第三个。看看使用 adb 命令的输出，可以看到 install 命令在最新的 SDK 版本中获得了几个新选项：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ adb install [-l] [-r] [-s] [--algo &lt;algorithm name&gt; --key &lt;hex-encoded key&gt; </span><br><span class="line">--iv &lt;hex-encoded iv&gt;] &lt;file&gt;</span><br></pre></td></tr></table></figure><p>显然 <code>—algo</code> 、 <code>—key</code> 和 <code>—iv</code> 参数与加密应用程序有关，所以在进入详细信息之前，首先尝试安装一个加密的 APK。使用 <strong><a href="http://openssl.org/" target="_blank" rel="noopener">OpenSSL</a> enc </strong> 命令加密文件相当容易，通常它已经在大多数 Linux 系统上安装。我们使用 CBC 模式下的 AES 算法，配合一个128 bit 的 Key（下文可以看到，这一个不是很安全的密钥），为使事情更简单，这里使用与密钥相同的初始化向量（initialization vector, IV）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl enc -aes-128-cbc -K 000102030405060708090A0B0C0D0E0F </span></span><br><span class="line">-iv 000102030405060708090A0B0C0D0E0F -in my-app.apk -out my-app-enc.apk</span><br></pre></td></tr></table></figure><p>让我们尝试安装它来检查 Android 是否喜欢我们新加密的应用程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb install --algo <span class="string">'AES/CBC/PKCS5Padding'</span> --key 000102030405060708090A0B0C0D0E0F </span></span><br><span class="line">--iv 000102030405060708090A0B0C0D0E0F my-app-enc.apk</span><br><span class="line">        pkg: /data/local/tmp/my-app-enc.apk</span><br><span class="line">Success</span><br></pre></td></tr></table></figure><p>“Success” 的输出结果看起来似乎很有前途，然后确认应用的图标显示在系统面板中并且启动时无错误。实际的 APK 文件像往常一样被复制在 <code>/data/app</code> 中，将其哈希值与我们加密的 APK 进行比较，发现它实际上是一个不同的文件。安装后的文件的哈希值和原始（未加密） APK 的完全相同，因此我们可以得出结论，APK 在安装是使用我们提供的加密参数（算法、密钥和 IV）进行解密。让我们看看这是如何实现的。</p><p><code>adb install</code> 命令根本上是调用 <code>pm</code> Android 命令行实用程序，它允许我们列出、安装和删除包（应用程序）。 通常 PackageManagerService 是负责在 Android 上安装应用程序的组件，pm 只是一个方便的前端。 应用程序通常通过 <a href="https://developer.android.com/reference/android/content/pm/PackageManager.html" target="_blank" rel="noopener">PackageManager</a> 类来访问包服务。 浏览其代码并检查加密相关方法，我们发现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">installPackageWithVerification</span><span class="params">(Uri packageURI,</span></span></span><br><span class="line"><span class="function"><span class="params">        IPackageInstallObserver observer, <span class="keyword">int</span> flags, String installerPackageName,</span></span></span><br><span class="line"><span class="function"><span class="params">        Uri verificationURI, ManifestDigest manifestDigest,</span></span></span><br><span class="line"><span class="function"><span class="params">        ContainerEncryptionParams encryptionParams)</span></span>;</span><br></pre></td></tr></table></figure><p>ContainerEncryptionParams 类看起来特别有可能，所以让我们看看里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerEncryptionParams</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mEncryptionAlgorithm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IvParameterSpec mEncryptionSpec;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SecretKey mEncryptionKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mMacAlgorithm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AlgorithmParameterSpec mMacSpec;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SecretKey mMacKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] mMacTag;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> mAuthenticatedDataStart;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> mEncryptedDataStart;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用的 <code>adb install</code> 参数完全对应于类的前三个字段。 除此之外，该类还存储 MAC 相关参数，因此可以安全地假设 Android 现在可以检查应用程序二进制文件的完整性。 不幸的是，pm 命令没有任何 MAC 相关的参数（它实际上有，但由于某些原因，在当前生成中禁用），所以为了尝试 MAC 支持，我们需要直接调用 <code>installPackageWithVerification</code> 方法。</p><p>该方法对于 SDK 应用程序是隐藏的，因此从应用程序里调用它的唯一方法是使用反射。事实证明，它的大多数参数类（ IPackageInstallObserver，ManifestDigest 和 ContainerEncryptionParams ）也被隐藏，但这只是一个小陷阱。 对于 Android 预加载框架类，即使你的应用程序捆绑了一个框架类，系统副本仍旧会在运行时使用它。这意味着我们必须做的是为 <code>installPackageWithVerification</code> 方法获取一个句柄，将所需的类添加到我们的应用程序中的 <code>andorid.content.pm</code> 包中。一旦我们有一个方法句柄，我们只需要实例化 <code>ContainerEncryptionParams</code> 类，然后提供所有的加密和 MAC 相关的参数。需要注意的是，由于我们的整个文件是加密的，并且 MAC 是在其所有内容上计算的（见下文），我们为加密和认证数据的开头指定为 0，将文件大小指定为数据的结尾（查看<a href="https://github.com/nelenkov/jb-app-encryption" target="_blank" rel="noopener">示例代码</a>）。为了计算 MAC 值（标签），我们再次使用 OpenSSL：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl dgst -hmac <span class="string">'hmac_key_1'</span> -sha1 -hex my-app-enc.apk</span></span><br><span class="line">HMAC-SHA1(my-app-enc.apk)= 0dc53c04d33658ce554ade37de8013b2cff0a6a5</span><br></pre></td></tr></table></figure><p>请注意，<code>dgst</code> 命令不支持使用十六进制或 Base64 的 HMAC 密钥，因此您只能使用 ASCII 字符。 这对于生产使用可能不是一个好主意，因此请考虑使用真正的密钥并以某种其他方式（使用 JCE 等）来计算 MAC。</p><p>我们的应用程序现在大部分已准备就绪，但安装应用程序需要 <code>INSTALL_PACKAGES</code> 权限，该权限与保护级别 <code>signatureOrSystem</code> 一起定义。 因此，它只被授予使用系统（ROM）密钥签名的应用程序或安装在 <code>/system</code> 分区中的应用程序。 构建 Jelly Bean ROM 是一个有趣的练习，但现在，我们只需将我们的应用程序复制到 <code>/system/app</code>，以获得安装软件包（在模拟器或 Root 过的设备上）的必要权限。 一旦完成，我们可以通过 <code>PackageManager</code> 安装加密的应用程序，Android 将通过比较指定的 MAC 标记与基于实际文件内容计算的值来解密 APK 并验证包没有被篡改。 您可以通过稍微更改加密和 MAC 参数来使用示例应用程序进行测试，这将导致安装错误。</p><p><img src="http://mmmedia.qiniudn.com/2017-01-08-160231.jpg" alt="jb-app-encryption"></p><p><code>android.content.pm</code> 包有一些更有趣的类，例如 <code>MacAuthenticatedInputStream</code> 和 <code>ManifestDigest</code> ，但实际的 APK 加密和 MAC 验证是由 <code>DefaultContainerService$ApkContainer</code> 做的，它是 <code>DefaultContainerService</code>（aka，<code>Package Access Helper</code>）的一部分。</p><h2 id="前向锁定（Forward-locking）"><a href="#前向锁定（Forward-locking）" class="headerlink" title="前向锁定（Forward locking）"></a>前向锁定（Forward locking）</h2><p>在移动（功能）手机上，通常当铃声、壁纸或者其他数字商品开始进行销售时，<strong>Forward locking</strong> 会弹出。它的名称来自它的意图：阻止用户转发他们已经购买的文件给自己的朋友和家人。Android 上的主要数字内容是原生应用程序，随着付费应用越来越受欢迎，共享（二次销售）成为一个问题。应用程序包（APKs）在 Android 上是公共可读的，这使得即使是在生产设备中提取应用程序也相对容易。虽然公共可读的应用程序文件可能听起来像是一个坏主意，它根植于 Android 的开放和可扩展性—第三方启动器、Widget 容器和应用程序可以轻松的提取 APKs 的 Icon、Widget 的可定义 Intents等等。为了锁定付费应用程序而不失去任何操作系统的灵活性，Android 引入了 <strong>Forward locking</strong>（又称“拷贝保护”）。它的想法是把应用程序包分为两部分：一个公共可读的部分，包括资源文件和 manifest （保存在 <code>/data/app</code> ）；一个系统用户可读的包含可执行代码的包（保存在 <code>/data/app-private</code> ）。代码包受文件系统权限保护，虽然这使得大多数消费者设备上的用户无法访问它，但是只需要获得 <code>root</code> 访问权限即可提取它。这种方法很快就被启用，引入了在线 Android 授权（LVL）作为替代品。然而，这将应用程序保护实施从操作系统转移到应用程序开发人员，并取得了不同的结果。</p><p>在 Jelly Bean 中，<strong>Forward locking</strong>  的实现已经重新设计，现在提供了将 APK 存储在加密容器中的能力，该加密容器需要在运行时安装设备特定密钥。让我们更详细地研究一下实现。</p><h2 id="Jelly-Bean-实现"><a href="#Jelly-Bean-实现" class="headerlink" title="Jelly Bean 实现"></a>Jelly Bean 实现</h2><p>虽然对于 JB（Jelly Bean），把加密的应用程序容器作为一个前向锁定机制是新加的，但加密容器的想法开始于 Froyo。 当时（2010年5月），大多数Android 设备都配备有有限的内部存储空间和相当大（几GB）的外部存储设备，通常采用 micro SD 卡的形式。 为了使文件共享更容易，外部存储使用 FAT 文件系统进行了格式化，该文件系统缺少文件权限。 因此，任何人（任何应用程序）都可以读取和写入 SD 卡上的文件。 为了防止用户简单地将付费应用程序复制到 SD 卡上，Froyo 创建了一个加密的文件系统映像文件，并在您选择将应用移动到外部存储时将 APK 存储在其中。 然后使用 Linux 的设备映射程序在运行时安装映像，系统将从新创建的安装点（每个应用程序一个）加载应用程序文件。 基于此，JB 的容器使用 EXT4 文件系统，它允许权限。 典型的前向锁定应用程序的挂载点现在如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shell@android:/mnt/asec/org.mypackage-1 # ls -l</span><br><span class="line">ls -l</span><br><span class="line">drwxr-xr-x system   system            2012-07-16 15:07 lib</span><br><span class="line">drwx------ root     root              1970-01-01 09:00 lost+found</span><br><span class="line">-rw-r----- system   u0_a96    1319057 2012-07-16 15:07 pkg.apk</span><br><span class="line">-rw-r--r-- system   system     526091 2012-07-16 15:07 res.zip</span><br></pre></td></tr></table></figure><p>这里 <strong>res.zip</strong> 拥有应用程序资源，是公共可读的，而保存完整 APK 的 <strong>pkg.apk</strong> 文件只能由系统和应用程序的专用用户（u0_a96）读取。 实际的应用程序容器存储在<code>/data/app-asec</code> 中，文件名为 <code>pacakge.name-1.asec</code> 。 ASEC 容器管理（创建/删除和挂载/卸载）在系统卷守护程序（vold）中实现，框架服务通过通过本地 <strong>socket</strong> 发送命令与之通信。 我们可以使用 <strong>vdc</strong> 实用程序从 <strong>shell</strong> 管理转发锁定的应用程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vdc asec list</span></span><br><span class="line">vdc asec list</span><br><span class="line">111 0 com.mypackage-1</span><br><span class="line">111 0 org.foopackage-1</span><br><span class="line">200 0 asec operation succeeded</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> vdc asec unmount org.foopackage-1</span></span><br><span class="line">200 0 asec operation succeeded</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> vdc asec mount org.foopackage-1 000102030405060708090a0b0c0d0e0f 1000</span></span><br><span class="line">org.foopackage-1 000102030405060708090a0b0c0d0e0f  1000                    </span><br><span class="line">200 0 asec operation succeeded</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> vdc asec path org.foopackage-1</span></span><br><span class="line">vdc asec path org.foopackage-1</span><br><span class="line">211 0 /mnt/asec/org.foopackage-1</span><br></pre></td></tr></table></figure><p>所有命令都将命名空间 ID（实际上基于包名称）作为参数，对于 <strong>mount</strong> 命令，您需要指定加密密钥和装载点的所有者 UID（1000是系统）。 那就是如何存储和使用应用程序，剩下的是找出实际的加密算法和密钥。 两者从原始的 Froyo 应用程序到 SD 实现没有变化：Twofish 与128位密钥存储在 <code>/data/misc/systemkeys</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shell@android:/data/misc/systemkeys $ ls</span><br><span class="line">ls</span><br><span class="line">AppsOnSD.sks</span><br><span class="line">shell@android:/data/misc/systemkeys $ od -t x1 AppsOnSD.sks</span><br><span class="line">od -t x1 AppsOnSD.sks</span><br><span class="line">0000000 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f</span><br><span class="line">0000020</span><br></pre></td></tr></table></figure><p>通过指定 <code>pm install</code>命令的 <code>-l</code> 选项或为 <code>PackageManager</code> 的 <code>installPackage*</code> 方法指定 <code>INSTALL_FORWARD_LOCK</code> 标志（请参阅<a href="https://github.com/nelenkov/jb-app-encryption" target="_blank" rel="noopener">示例应用程序</a>）来触发转发锁定应用程序。</p><h2 id="加密应用程序和-Google-Play"><a href="#加密应用程序和-Google-Play" class="headerlink" title="加密应用程序和 Google Play"></a>加密应用程序和 Google Play</h2><p>所有这一切都很有趣，但正如我们所见，安装应用程序、加密或其他都需要系统权限，因此它只能由自定义运营商Android 固件和下一个版本友好的 CyanogenMod ROM 使用。 目前唯一利用了新的加密应用程序和前向锁定基础设施的应用程序是 Play Store（谁出来了这些名字，真的？）Android 客户端。 要详细了解 Google Play 客户端的工作原理，需要详细了解底层协议（这始终是一个移动目标），但随意查看最新的 Android 客户端确实显示了一些有用的信息。 Google Play 服务器会发送相当多的有关您即将下载和安装的应用的元数据，例如下载网址，APK 文件大小，版本代码和退款窗口。 其中新增的是 <code>EncryptionParams</code> ，它看起来非常类似于上面显示的<code>ContainerEncryptionParams</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AndroidAppDelivery</span>$<span class="title">EncryptionParams</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> cachedSize;</span><br><span class="line">  <span class="keyword">private</span> String encryptionKey;</span><br><span class="line">  <span class="keyword">private</span> String hmacKey;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加密算法和 HMAC 算法总是分别设置为 <code>&#39;AES / CBC / PKCS5Padding&#39;</code> 和 <code>&#39;HMACSHA1&#39;</code> 。 IV 和 MAC 标签与加密的APK 捆绑在一个 blob 中。 一旦读取和验证所有参数，它们基本上将转换为 <code>ContainerEncryptionParams</code> 实例，并使用熟悉的 <code>PackageManager.installPackageWithVerification()</code> 方法安装应用程序。 如可能预期的，安装付费应用程序时，将设置 <code>INSTALL_FORWARD_LOCK</code> 标志。 操作系统从这里获取它，并且过程与上一节中描述的相同：免费应用程序被解密，APK最终在 <code>/data/app</code> 中，而在 <code>/data/app-asec</code> 中的加密容器被创建和装载在付费应用的 <code>/mnt/asec/package.name</code> 下。</p><p>那么在实践中这是什么意思？ Google Play 现在声称，付费应用程序始终以加密形式传输和存储，因此，如果您决定使用 Jelly Bean 提供的应用程序加密设施实现它，则您自己的应用程序分发渠道也会如此。 应用程序必须在某些时候可用于操作系统，所以如果你有 root 用户访问正在运行的 Android 设备，仍然可以提取前向锁定 APK 或容器加密密钥，但这确实是所有软件的解决方案。</p><p><strong>更新：</strong>虽然正向锁定使得复制付费应用程序更难，似乎它与其他服务的集成仍然有一些问题。 根据<a href="http://code.google.com/p/android/issues/detail?id=34880" target="_blank" rel="noopener">这里</a>的多个开发人员和用户的报告，它目前打破了应用程序注册自己账户管理的实现，包含大多数付费小部件的应用程序。 这是由于一些服务在 <code>/mnt/asec</code> 被挂载之前被初始化，因此不能访问它。 据说有一个可用的修复（没有Gerrit链接），并应在 Jelly Bean 维护版中发布。</p><p><strong>更新2</strong>：似乎最新版本的 Google Play 客户端（3.7.15）安装了带有小部件的付费应用程序，并且可能还会在 <code>/data/app</code> 中管理帐户（临时？）解决方法。 下载的 APK 仍会加密传输。 例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell@android:/data/app # ls -l|grep -i beautiful</span><br><span class="line">ls -l|grep -i beautiful</span><br><span class="line">-rw-r--r-- system   system    6046274 2012-08-06 10:45 com.levelup.beautifulwidgets-1.apk</span><br></pre></td></tr></table></figure><p>这就是现在的情况。 希望，很快就会从官方来源获得有关应用加密操作系统实施和设计以及 Google Play 商店的使用情况的更详细信息。 在那之前，获取<a href="https://github.com/nelenkov/jb-app-encryption" target="_blank" rel="noopener">示例项目</a>，启动 OpenSSL 并尝试。</p><p><a href="https://plus.google.com/117221066931981967754" target="_blank" rel="noopener">Nikolay Elenkov</a> 发布于 2012 年 7 月 6 日。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ADB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 必知必会- 解决在 Android Studio 中 framework 等 jar 包无法被引用的问题</title>
      <link href="/2016/12/28/android-code-framework/"/>
      <url>/2016/12/28/android-code-framework/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在编译原生 Contacts 应用时需用到非公开的 API，需要引入 framework 等 jar 包，但在 Android Studio 中 SDK 带的 jar 包的优先级最高，导致引入的 framework 等 jar 包无法被引用，请问如何将 framework 等 jar 包的优先级调成最高？</p><p>—— 知乎 <a href="https://www.zhihu.com/question/35628837" target="_blank" rel="noopener">在 Android Studio 中如何将依赖的 jar 包放在 SDK 的 android.jar 前？</a></p></blockquote><p>这是在知乎上的原问题的描述。尝试了该问题下面的多个答案，并没有十分完美的方案，直到一个为公司编译 Android 系统的同事，最近无奈转战到 Android Studio 开始…..</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>先了解一些基础点：</p><h3 id="Android-Studio-中的六种依赖"><a href="#Android-Studio-中的六种依赖" class="headerlink" title="Android Studio 中的六种依赖"></a>Android Studio 中的六种依赖</h3><p>Compile，Provided，APK，Test compile，Debug compile，Release compile</p><a id="more"></a><p><strong>Compile</strong></p><p>compile 是对所有的 build type 以及 favlors 都会参与编译并且打包到最终的 apk 文件中。</p><p><strong>Provided</strong></p><p>Provided 是对所有的 build type 以及 favlors 只在编译时使用，类似 eclipse 中的 external-libs ，只参与编译，不打包到最终 apk 。</p><p><strong>APK</strong></p><p>只会打包到 apk 文件中，而不参与编译，所以不能再代码中直接调用 jar 中的类或方法，否则在编译时会报错</p><p><strong>Test compile</strong></p><p>Test compile 仅仅是针对单元测试代码的编译编译以及最终打包测试 apk 时有效，而对正常的 debug 或者 release apk 包不起作用。</p><p><strong>Debug compile</strong></p><p>Debug compile 仅仅针对 debug 模式的编译和最终的 debug apk 打包。</p><p><strong>Release compile</strong></p><p>Release compile 仅仅针对 Release 模式的编译和最终的 Release apk 打包。</p><p><strong>PS：</strong>我们会用到 <code>Provided</code> 引用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> framework </tag>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android library version</title>
      <link href="/2016/11/11/android-library-version/"/>
      <url>/2016/11/11/android-library-version/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 必知必会 - DialogFragment 使用总结</title>
      <link href="/2016/10/27/dialog-fragment/"/>
      <url>/2016/10/27/dialog-fragment/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Android 官方推荐使用 <code>DialogFragment</code> 来代替 <code>Dialog</code> ，可以让它具有更高的可复用性（降低耦合）和更好的便利性（很好的处理屏幕翻转的情况）。</p><p>而创建 <code>DialogFragment</code> 有两种方式：</p><ol><li>覆写其 <code>onCreateDialog</code> 方法 — ①</li><li>覆写其 <code>onCreateView</code> 方法 — ②</li></ol><p>虽然这两种方式都能实现相同的效果，但是它们各有自己适合的应用场景：</p><ol><li>方法 ①，一般用于创建替代传统的 <code>Dialog</code> 对话框的场景，UI 简单，功能单一。</li><li>方法 ②，一般用于创建复杂内容弹窗或全屏展示效果的场景，UI 复杂，功能复杂，一般有网络请求等异步操作。</li></ol><a id="more"></a><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p><strong>对于方法 ①</strong>，创建一个 <code>Dialog</code> 并返回它即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//为了样式统一和兼容性，可以使用 V7 包下的 AlertDialog.Builder</span></span><br><span class="line">    AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(getActivity());</span><br><span class="line">  <span class="comment">// 设置主题的构造方法</span></span><br><span class="line"><span class="comment">// AlertDialog.Builder builder = new AlertDialog.Builder(getActivity(), R.style.CustomDialog);</span></span><br><span class="line">    builder.setTitle(<span class="string">"注意："</span>)</span><br><span class="line">           .setMessage(<span class="string">"是否退出应用？"</span>)</span><br><span class="line">           .setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">null</span>)</span><br><span class="line">           .setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">null</span>)</span><br><span class="line">           .setCancelable(<span class="keyword">false</span>);</span><br><span class="line">           <span class="comment">//builder.show(); // 不能在这里使用 show() 方法</span></span><br><span class="line">    <span class="keyword">return</span> builder.create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，你也可以使用自定义 <code>View</code> 来创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(getActivity());</span><br><span class="line">  <span class="comment">// 设置主题的构造方法</span></span><br><span class="line"><span class="comment">// AlertDialog.Builder builder = new AlertDialog.Builder(getActivity(), R.style.CustomDialog);</span></span><br><span class="line">LayoutInflater inflater = getActivity().getLayoutInflater();  </span><br><span class="line">    View view = inflater.inflate(R.layout.fragment_dialog, <span class="keyword">null</span>);  </span><br><span class="line">    builder.setView(view) </span><br><span class="line"> <span class="comment">// Do Someting,eg: TextView tv = view.findViewById(R.id.tv);</span></span><br><span class="line">    <span class="keyword">return</span> builder.create();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：创建 <code>Dialog</code> 的方式有多种，比如下面这种，使用时略有差异，需要自己注意：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">LayoutInflater inflater = getActivity().getLayoutInflater();</span><br><span class="line">    View view = inflater.inflate(R.layout.fragment_dialog, <span class="keyword">null</span>);</span><br><span class="line">Dialog dialog = <span class="keyword">new</span> Dialog(getActivity());</span><br><span class="line">    <span class="comment">// 设置主题的构造方法</span></span><br><span class="line">  <span class="comment">// Dialog dialog = new Dialog(getActivity(), R.style.CustomDialog);</span></span><br><span class="line">    dialog.setContentView(view);</span><br><span class="line">  <span class="comment">// Do Someting</span></span><br><span class="line"><span class="keyword">return</span> dialog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对于方法 ②</strong>，和普通的 <code>Fragment</code> 用法基本一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">View rootView = inflater.inflate(R.layout.fragment_dialog, container, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// Do Someting</span></span><br><span class="line"><span class="keyword">return</span> rootView;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置主题需要在 onCreate() 方法中调用 setStyle() 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setStyle(DialogFragment.STYLE_NO_TITLE, R.style.CustomDialog);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理屏幕翻转"><a href="#处理屏幕翻转" class="headerlink" title="处理屏幕翻转"></a>处理屏幕翻转</h3><p>如果使用传统的 <code>Dialog</code> ，需要我们手动处理屏幕翻转的情况，但使用 <code>DialogFragment</code> 的话，则不需要我们进行任何处理，<code>FragmentManager</code> 会自动管理 <code>DialogFragment</code> 的生命周期。</p><p>扩展阅读：<a href="http://likfe.com">Dialog 在屏幕翻转时的处理</a></p><h3 id="无标题栏-全屏"><a href="#无标题栏-全屏" class="headerlink" title="无标题栏/全屏"></a>无标题栏/全屏</h3><p>在基本用法里代码注释有设置主题的地方，下面详细说下两种方法下设置无标题栏和实现全屏的方式：</p><h4 id="无标题栏"><a href="#无标题栏" class="headerlink" title="无标题栏"></a>无标题栏</h4><p>对于方法 ① ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">LayoutInflater inflater = getActivity().getLayoutInflater();</span><br><span class="line">View view = inflater.inflate(R.layout.fragment_dialog, <span class="keyword">null</span>);</span><br><span class="line">Dialog dialog = <span class="keyword">new</span> Dialog(getActivity(), R.style.CustomDialog);</span><br><span class="line">  <span class="comment">// 关闭标题栏，setContentView() 之前调用</span></span><br><span class="line">dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">dialog.setContentView(view);</span><br><span class="line">dialog.setCanceledOnTouchOutside(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> dialog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于方法 ②：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * setStyle() 的第一个参数有四个可选值：</span></span><br><span class="line"><span class="comment"> * STYLE_NORMAL|STYLE_NO_TITLE|STYLE_NO_FRAME|STYLE_NO_INPUT</span></span><br><span class="line"><span class="comment"> * 其中 STYLE_NO_TITLE 和 STYLE_NO_FRAME 可以关闭标题栏</span></span><br><span class="line"><span class="comment"> * 每一个参数的详细用途可以直接看 Android 源码的说明</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">setStyle(DialogFragment.STYLE_NO_TITLE, R.style.CustomDialog);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现全屏（宽-高度全屏）"><a href="#实现全屏（宽-高度全屏）" class="headerlink" title="实现全屏（宽/高度全屏）"></a>实现全屏（宽/高度全屏）</h4><p>常用的形式大多是宽度上和屏幕一样宽，高度自适应，下面直接看代码：</p><p><strong>方法 ① ：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">LayoutInflater inflater = getActivity().getLayoutInflater();</span><br><span class="line">View view = inflater.inflate(R.layout.fragment_dialog, <span class="keyword">null</span>);</span><br><span class="line">Dialog dialog = <span class="keyword">new</span> Dialog(getActivity(), R.style.CustomDialog);</span><br><span class="line">dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">dialog.setContentView(view);</span><br><span class="line">dialog.setCanceledOnTouchOutside(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//Do something</span></span><br><span class="line">    <span class="comment">// 设置宽度为屏宽、位置靠近屏幕底部</span></span><br><span class="line">Window window = dialog.getWindow();</span><br><span class="line">window.setBackgroundDrawableResource(R.color.transparent);</span><br><span class="line">WindowManager.LayoutParams wlp = window.getAttributes();</span><br><span class="line">wlp.gravity = Gravity.BOTTOM;</span><br><span class="line">wlp.width = WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">  wlp.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">window.setAttributes(wlp);</span><br><span class="line"><span class="keyword">return</span> dialog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码 <code>12</code> 行设置了窗口的背景色为透明，这一步是必须的；</p><p>代码 <code>15</code> 行设置窗口的宽度为 <code>MATCH_PARENT</code>,效果是和屏幕宽度一样大，同样你也可以设置高度的值。设置宽度和高度除了 <code>MATCH_PARENT</code> 和 <code>WRAP_CONTENT</code> ，也可以直接设置成具体的数值。</p><p><strong>方法 ②：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setStyle(DialogFragment.STYLE_NO_TITLE, R.style.CustomDialog);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        getDialog().setCanceledOnTouchOutside(<span class="keyword">true</span>);</span><br><span class="line">        View rootView = inflater.inflate(R.layout.fragment_dialog, container, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//Do something</span></span><br><span class="line">        <span class="comment">// 设置宽度为屏宽、靠近屏幕底部。</span></span><br><span class="line">        <span class="keyword">final</span> Window window = getDialog().getWindow();</span><br><span class="line">        window.setBackgroundDrawableResource(R.color.transparent);</span><br><span class="line">        window.getDecorView().setPadding(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        WindowManager.LayoutParams wlp = window.getAttributes();</span><br><span class="line">        wlp.gravity = Gravity.BOTTOM;</span><br><span class="line">        wlp.width = WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">        wlp.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">        window.setAttributes(wlp);</span><br><span class="line">        <span class="keyword">return</span> rootView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码 <code>14</code> 行设置了窗口的背景色为透明，这一步是必须的；</p><p>代码 <code>15</code> 行设置了窗口的 Pading 值全部为0，这一步也是必须的，内容不能填充全部宽度和高度。</p><p>其他的和 ① 中的类似。</p><h3 id="应用场景区别"><a href="#应用场景区别" class="headerlink" title="应用场景区别"></a>应用场景区别</h3><p>文章一开始简单总结了方法 ① 和方法 ② 的应用场景，这里说明下：</p><ul><li>从基本的用法中可以看到方法 ① 为简单的替代 <code>Dialog</code> 提供了非常方便的创建方式，比方法 ② 有优势</li><li>方法 ① 在使用了多线程（例如网络请求）的情况下，不能正确的获取当前 Fragment 的状态，会产生空指针异常。方法 ② 则没有此问题，而且，其创建方式默认使用了自定义 View，更便于应对复杂 UI 的场景。</li></ul><p>这里举例说明：方法 ① 和方法 ② 的<code>//Do something</code> 代码处，我们进行一些异步操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">TextView title = rootView.findViewById(R.id.dialoag_tv);</span><br><span class="line">title.setText(<span class="string">"Value A"</span>);</span><br><span class="line"><span class="keyword">new</span> SomeTask().execute(url);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Void</span>, <span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Boolean <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 一些网络请求</span></span><br><span class="line">          <span class="comment">// 成功时 return true;</span></span><br><span class="line">            <span class="comment">// 异常时 return false;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Boolean aBoolean)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.onPostExecute(aBoolean);</span><br><span class="line">            <span class="comment">// if (!isVisible()) return;</span></span><br><span class="line">            <span class="keyword">if</span> (aBoolean) &#123;</span><br><span class="line">                title.setText(<span class="string">"Value B"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如果在网络请求未结束或者刚结束时关闭了当前 <code>DialogFragment</code> ，代码 <code>19</code> 行就会报空指针异常了，代码 <code>17</code> 的作用就是判断 <code>DialogFragment</code> 当前的状态是否为可用态，但是 <code>isVisible()</code> 以及 <code>isHide()</code> 对于方法 ① 无法正确返回其状态，方法 ② 则正常。方法 ① 和方法 ② 创建 <code>DialogFragment</code> 的一些状态并不是完全一致。</p><p>PS：你也可以使用静态 <code>Handler</code> 结合弱引用等来处理异步操作，那样对 <code>DialogFragment</code> 状态的获取就不重要了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是个人在实际开发过程中的一点总结和看法，希望你能抱着存疑的态度进行尝试，如果有新的观点或者文章中有不正确的地方，欢迎和我联系。</p><p>扩展阅读：</p><ul><li><a href="http://www.cnblogs.com/tianzhijiexian/p/4161811.html" target="_blank" rel="noopener">详细解读 DialogFragment</a></li><li><a href="http://blog.csdn.net/angcyo/article/details/50613084" target="_blank" rel="noopener">Android–&gt;Dialog/DialogFragment宽度高度修改/全屏,自定义样式</a> </li><li><a href="http://stackoverflow.com/questions/7189948/full-screen-dialogfragment-in-android" target="_blank" rel="noopener">Full Screen DialogFragment in Android</a></li></ul><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> DialogFragment </tag>
            
            <tag> Fragment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 必知必会 - RadioGroup 和 ViewPager 联动</title>
      <link href="/2016/09/20/androd-radioGroup-and-viewPager/"/>
      <url>/2016/09/20/androd-radioGroup-and-viewPager/</url>
      
        <content type="html"><![CDATA[<p>使用 RadioGroup 和 ViewPager 实现更加可定制的效果。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>昨天设计图刚出一点，写了<a href="http://blog.csdn.net/ys743276112/article/details/52587509" target="_blank" rel="noopener">《Android 必知必会 - 动态切换着色模式和全屏模式》</a>，记录了动态修改页面显示模式的方式。今天又有新图，不过设计师只考虑 iOS 平台的设计，拿到设计图发现 <code>TabLayout + ViewPager</code> 的套路实现起来很麻烦，考虑了下，为了方便，决定使用 <code>RadioGroup + ViewPager</code> 来实现，之所以使用 <code>RadioGroup</code> ，是因为它内部多个 <code>RadioButton</code> 的状态是互斥的，也就是只有一个是选中状态，不需要我们进行多余的处理。总体来说比较简单，就是细节略多了点。</p><p>主要知识点：</p><ul><li>自定义 <code>RadioButton</code> 样式 : <code>selector + shape</code></li><li>自定义 <code>RadioButton</code> 文字样式 : <code>selector</code></li><li><code>ViewPager + Fragment</code> 及其适配器</li><li><code>RadioGroup</code> 状态监听</li><li><code>ViewPager</code> 页面切换监听</li></ul><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>先看效果图：</p><p><img src="http://mmmedia.qiniudn.com/2016-09-20-radiogroup_viewpager.gif" alt></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>UI：</strong></p><ul><li>顶部是 <code>RadioGroup</code> ，内部包含两个 <code>RadioButton</code> <ul><li><code>RadioButton</code> 需要自定义背景和文字</li></ul></li><li>中间是 <code>ViewPager</code> </li></ul><p><strong>联动事件：</strong></p><ul><li><code>ViewPager</code> <ul><li>需要为 <code>ViewPager</code> 写适配器，以配合 <code>Fragment</code></li><li>使用 <code>addOnPageChangeListener()</code>  为其添加监听页面变动的事件<ul><li>在 <code>onPageSelected(int position)</code> 方法中修改 <code>RadioGroup</code> 中 <code>RadioButton</code> 的选中状态</li></ul></li></ul></li><li><code>RadioGroup</code> <ul><li>设置 <code>setOnCheckedChangeListener</code> 监听，并在其中修改 <code>ViewPager</code> 的状态</li></ul></li></ul><h3 id="实现-UI"><a href="#实现-UI" class="headerlink" title="实现 UI"></a>实现 UI</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"45dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/title_bar"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RadioGroup</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/main_top_rg"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/top_rg_a"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"76dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"29dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">"@drawable/top_r_bg"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:button</span>=<span class="string">"@null"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:checked</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@string/main_tab1"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">"@drawable/top_r_text"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColorHighlight</span>=<span class="string">"@color/title_bar"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"15sp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">RadioButton</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/top_rg_b"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"76dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"29dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">"@drawable/top_r_bg2"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:button</span>=<span class="string">"@null"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_marginLeft</span>=<span class="string">"-1dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@string/main_tab2"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">"@drawable/top_r_text"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColorHighlight</span>=<span class="string">"@color/title_bar"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"15sp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/main_top_right"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/left_padding"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/right_padding"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">"@drawable/main_search"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/main_viewpager"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重点在 <code>RadioButton</code> 的几个属性：</p><ul><li><code>android:button=&quot;@null&quot;</code> 隐藏 <code>RadioButton</code>  默认的图标</li><li><code>android:background=&quot;@drawable/top_r_bg&quot;</code> 设置背景，实际上是一个 <code>selector</code></li><li><code>android:textColor=&quot;@drawable/top_r_text&quot;</code> 设置文字颜色，它也是一个 <code>selector</code></li><li>对于第二个 <code>RadioButton</code> ： <code>android:layout_marginLeft=&quot;-1dp&quot;</code> 和描边宽度一样，防止出现间隙</li></ul><p>下面把 xml 代码放在一起看，它们都放在 <code>drawable</code> 目录下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- drawable/top_r_bg --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/top_r_bg_a"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:state_checked</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/top_r_bg_b"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:state_checked</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- drawable/top_r_bg_a --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:bottomLeftRadius</span>=<span class="string">"2dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:bottomRightRadius</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:topLeftRadius</span>=<span class="string">"2dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:topRightRadius</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">stroke</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:width</span>=<span class="string">"1dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:color</span>=<span class="string">"@color/white"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/transparent"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- drawable/top_r_bg_b --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:bottomLeftRadius</span>=<span class="string">"2dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:topLeftRadius</span>=<span class="string">"2dp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/white"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- drawable/top_r_text --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"@color/white"</span> <span class="attr">android:state_checked</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"@color/title_bar"</span> <span class="attr">android:state_checked</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面只贴出了左边按钮的样式，右边的类似，不再张贴。UI 到这里已经完成，下面看事件：</p><h3 id="实现联动事件"><a href="#实现联动事件" class="headerlink" title="实现联动事件"></a>实现联动事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Fragment&gt; fragments = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        fragments.add(<span class="keyword">new</span> FragmentMain01A());</span><br><span class="line">        fragments.add(<span class="keyword">new</span> FragmentMain01B());</span><br><span class="line"></span><br><span class="line">        NotePagerAdapter pagerAdapter = <span class="keyword">new</span> NotePagerAdapter(getFragmentManager(), fragments);</span><br><span class="line">        mainViewpager.setAdapter(pagerAdapter);</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 为 Viewpager 设置页面切换监听，当页面切换完成被选中时，我们同步 RadioButton 的状态</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">        mainViewpager.addOnPageChangeListener(<span class="keyword">new</span> ViewPager.OnPageChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (position == <span class="number">0</span>) radioButtonA.setChecked(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">else</span> radioButtonB.setChecked(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 为 RadioGroup 设置选中变化事件监听，当 RadioButton 状态变化，我们同步 Viewpager 的选中页面</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">        mRadioGroup.setOnCheckedChangeListener(<span class="keyword">new</span> RadioGroup.OnCheckedChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(RadioGroup group, <span class="keyword">int</span> checkedId)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (checkedId == radioButtonA.getId()) mainViewpager.setCurrentItem(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (checkedId == radioButtonB.getId()) mainViewpager.setCurrentItem(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置默认选中页</span></span><br><span class="line">        mainViewpager.setCurrentItem(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对了，还有 <code>NotePagerAdapter</code> 的代码，这个比较简单，是 <code>ViewPager</code> 和 <code>Fragment</code> 的适配器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotePagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentStatePagerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Fragment&gt; mFragments;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">NotePagerAdapter</span><span class="params">(FragmentManager fm, List&lt;Fragment&gt; fragments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(fm);</span><br><span class="line">        mFragments = fragments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mFragments.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mFragments.get(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>注意，以上代码使用的是 <code>android.support.v4</code> 包的类，理论上不使用 <code>V4</code> 包是没问题的。</p><p>看完整体的代码发现并没什么难点，纯属基础知识的叠加，主要是 UI 控件上的细节需要处理的比较多。</p><p>再者，如果顶部的控件超过2个，还需要更多的 xml 文件，顶部的几个控件是可以封装成一个自定义 View 的，甚至加上中间的 <code>ViewPager</code> 一起封装。等待我后面的成果吧。如果有什么疑问或建议，可以通过文末的联系方式和我交流。</p><p>最后，纪念一下自己今天正式成为 <code>CSDN博客专家</code> ，祝愿广大程序员都能在编程的路上有所成就！</p><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> ViewPager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 必知必会 - 动态切换着色模式和全屏模式</title>
      <link href="/2016/09/19/android-dynamic-set-statusBar/"/>
      <url>/2016/09/19/android-dynamic-set-statusBar/</url>
      
        <content type="html"><![CDATA[<p>通过代码动态切换页面的<strong>着色模式</strong>和<strong>全屏模式</strong>，兼容 <code>Android 4.4 +</code> 。</p><p>本文假设读者已经了解着色模式和全屏模式（沉浸模式）。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司的 APP 设计图仅有 iOS 版的，对于 Android 平台，它整体算是着色模式，但是在个人页面是全屏模式（沉浸模式），实现设计图时，我使用的是一个 <code>Activity</code> + 四个 <code>Fragment</code> 实现的。</p><a id="more"></a><p>下面直接上效果图：</p><table><thead><tr><th style="text-align:center">iOS 效果图</th><th style="text-align:center">Android 4.4 +</th><th style="text-align:center">Android 5.0 +</th></tr></thead><tbody><tr><td style="text-align:center"><img src="http://mmmedia.qiniudn.com/2016-09-19-ios.gif" alt></td><td style="text-align:center"><img src="http://mmmedia.qiniudn.com/2016-09-19-android_4.4.gif" alt></td><td style="text-align:center"><img src="http://mmmedia.qiniudn.com/2016-09-19-android_5.x.gif" alt></td></tr></tbody></table><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>从 <code>Android 4.4</code> 起，Window 新增了  <code>WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS</code> 的 Flag ，而从 <code>Android 5.0</code> 起，Window 又新增了 <code>setStatusBarColor()</code> 方法，可以直接修改状态栏的颜色。</p><h3 id="对于-Android-4-4-gt-4-4-且-lt-5-0"><a href="#对于-Android-4-4-gt-4-4-且-lt-5-0" class="headerlink" title="对于 Android 4.4 + ( &gt;= 4.4 且 &lt; 5.0 )"></a>对于 Android 4.4 + ( &gt;= 4.4 且 &lt; 5.0 )</h3><p>这种情况下，我们启用 4.4 新增的半透明状态栏，通过修改当前 Activity 的<strong>根布局</strong>的 <code>background</code> 和 <code>paddingTop</code> 来动态切换『着色模式』和全屏模式。</p><p>实际上，这种情况下的『着色模式』是在全屏模式下模拟出来的，并不是真正意义上的着色模式。</p><p><strong>着色模式：</strong></p><ul><li><code>android:background=&quot;@color/title_bar&quot;</code></li><li><code>paddingTop = statusHeight</code></li></ul><p><strong>全屏模式：</strong></p><ul><li><code>paddingTop = 0</code></li></ul><h3 id="对于-Android-5-0-gt-5-0"><a href="#对于-Android-5-0-gt-5-0" class="headerlink" title="对于 Android 5.0 + ( &gt;= 5.0 )"></a>对于 Android 5.0 + ( &gt;= 5.0 )</h3><p>这种情况下，我们修改Window 对应的 Flag，然后直接设置状态栏的颜色即可。</p><p><strong>全屏模式：</strong></p><ul><li><code>window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</code></li><li><code>window.setStatusBarColor(Color.TRANSPARENT);</code></li></ul><p><strong>着色模式：</strong></p><ul><li><code>window.setStatusBarColor(getResources().getColor(R.color.title_bar));</code></li><li><code>window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);</code></li></ul><h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><blockquote><p>activity_main.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/title_bar"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/main_fl"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/main_bottom"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:clickable</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ...... 四个 ImageView  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>MainActivity.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//响应底部对应的 ImageView 被点击的事件，i 为 0-3</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSelect</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        resetBg();<span class="comment">//重置背景</span></span><br><span class="line">        FragmentManager fm = getSupportFragmentManager();</span><br><span class="line">        FragmentTransaction ft = fm.beginTransaction();</span><br><span class="line">        hideFragment(ft);<span class="comment">//隐藏已经显示的 Fragment</span></span><br><span class="line">        <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                setStatusBar(<span class="keyword">false</span>);<span class="comment">//着色模式</span></span><br><span class="line">                <span class="comment">//... 显示 Fragment_a</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                setStatusBar(<span class="keyword">false</span>);<span class="comment">//着色模式</span></span><br><span class="line">                <span class="comment">//... 显示 Fragment_b</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                setStatusBar(<span class="keyword">false</span>);<span class="comment">//着色模式</span></span><br><span class="line">                <span class="comment">//... 显示 Fragment_c</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                setStatusBar(<span class="keyword">true</span>);<span class="comment">//全屏模式</span></span><br><span class="line">                <span class="comment">//... 显示 Fragment_d</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ft.commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改当前 Activity 的显示模式，hideStatusBarBackground :true 全屏模式，false 着色模式</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setStatusBar</span><span class="params">(<span class="keyword">boolean</span> hideStatusBarBackground)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT &amp;&amp; Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">            Window window = getWindow();</span><br><span class="line">            window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">            <span class="keyword">if</span> (hideStatusBarBackground) &#123;</span><br><span class="line">                window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ViewGroup mContentView = (ViewGroup) window.findViewById(Window.ID_ANDROID_CONTENT);</span><br><span class="line">            View mChildView = mContentView.getChildAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (mChildView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hideStatusBarBackground) &#123;</span><br><span class="line">                    mChildView.setPadding(</span><br><span class="line">                            mChildView.getPaddingLeft(),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            mChildView.getPaddingRight(),</span><br><span class="line">                            mChildView.getPaddingBottom()</span><br><span class="line">                    );</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> statusHeight = getStatusBarHeight(<span class="keyword">this</span>);</span><br><span class="line">                    mChildView.setPadding(</span><br><span class="line">                            mChildView.getPaddingLeft(),</span><br><span class="line">                            statusHeight,</span><br><span class="line">                            mChildView.getPaddingRight(),</span><br><span class="line">                            mChildView.getPaddingBottom()</span><br><span class="line">                    );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">            Window window = getWindow();</span><br><span class="line"></span><br><span class="line">            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);</span><br><span class="line">            <span class="keyword">if</span> (hideStatusBarBackground) &#123;</span><br><span class="line">                window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">                window.setStatusBarColor(Color.TRANSPARENT);</span><br><span class="line">                window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                window.setStatusBarColor(getResources().getColor(R.color.title_bar));</span><br><span class="line">                window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);</span><br><span class="line">                window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get StatusBar Height</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getStatusBarHeight</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        Rect frame = <span class="keyword">new</span> Rect();</span><br><span class="line">         activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);</span><br><span class="line">        <span class="keyword">return</span> frame.top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结和回顾"><a href="#总结和回顾" class="headerlink" title="总结和回顾"></a>总结和回顾</h2><p>对于 Android 5.0 + ( &gt;= 5.0 ) 的情况很容易懂，毕竟可以直接设置状态栏的颜色。对于 Android 4.4 + ( &gt;= 4.4 且 &lt; 5.0 ) 的情况，我这里并没有使用网上一些教程：向 DecorView 中添加一个高度为状态栏的高度 View，也就没有黑线的问题，而是通过修改根布局的背景色和根布局的 PaddingTop 来<strong>模拟</strong>着色模式。</p><p>注意，<strong>本实验仅针对一个 Activity 包含多个 Fragment 且需要动态修改显示模式的情况</strong>。操作过程中页面并没有配合使用 ActionBar ，使用的主题是 <code>Theme.AppCompat.Light.NoActionBar</code> ，不确定是否会有意想不到的效果，请在配合 ActionBar 时先进行测试或者参考文末的相关资料。</p><p>如果有什么问题或建议，欢迎和我交流。</p><p>相关资料：</p><ul><li><a href="http://niorgai.github.io/2016/03/20/Android-transulcent-status-bar/" target="_blank" rel="noopener">Android-transulcent-status-bar</a></li><li><a href="http://www.jianshu.com/p/140be70b84cd?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">由沉浸式状态栏引发的血案</a></li></ul><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 必知必会 - Glide 加载圆形和圆角图片的两种方法</title>
      <link href="/2016/08/31/android-glide-roundedBitmapTransformation/"/>
      <url>/2016/08/31/android-glide-roundedBitmapTransformation/</url>
      
        <content type="html"><![CDATA[<p>两种使用 <code>BitmapTransformation</code> 来实现<code>Glide</code> 加载圆形图片和圆角图片的方法。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><code>Glide</code> 并不能直接支持 <code>Round Pictures</code> ，需要使用 <code>BitmapTransformation</code> 来进行处理。</p><blockquote><p>Round Pictures: <code>CircleImageView</code> / <code>CircularImageView</code> / <code>RoundedImageView</code> are known to have <a href="https://github.com/bumptech/glide/issues?q=is%3Aissue+CircleImageView+OR+CircularImageView+OR+RoundedImageView" target="_blank" rel="noopener">issues</a> with TransitionDrawable (.crossFade() with .thumbnail() or .placeholder()) and animated GIFs, use a BitmapTransformation (.circleCrop() will be available in v4) or .dontAnimate() to fix the issue.</p></blockquote><p>这里介绍下网上常见的方式和使用 <code>RoundedBitmapDrawable</code> 两种方法，本质上是差不多的：</p><ul><li>使用 <code>Canvas</code> 和 <code>Paint</code> 来绘制</li><li>使用 <code>Android.support.v4.graphics.drawable.RoundedBitmapDrawable</code> </li></ul><p><strong>PS：</strong> <code>RoundedBitmapDrawable</code> 是 <code>support.v4</code> 下的一个类，想了解更多，可以阅读我之前的文章：<a href="http://blog.csdn.net/ys743276112/article/details/52316588" target="_blank" rel="noopener">Android 必知必会-使用 supportV4 的 RoundedBitmapDrawable 实现圆角</a> 。</p><a id="more"></a><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>实现圆形图片：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Glide 圆形图片 Transform</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlideCircleTransform</span> <span class="keyword">extends</span> <span class="title">BitmapTransformation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GlideCircleTransform</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">transform</span><span class="params">(BitmapPool pool, Bitmap toTransform, <span class="keyword">int</span> outWidth, <span class="keyword">int</span> outHeight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> circleCrop(pool, toTransform);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Bitmap <span class="title">circleCrop</span><span class="params">(BitmapPool pool, Bitmap source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> size = Math.min(source.getWidth(), source.getHeight());</span><br><span class="line">        <span class="keyword">int</span> x = (source.getWidth() - size) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> y = (source.getHeight() - size) / <span class="number">2</span>;</span><br><span class="line">        Bitmap squared = Bitmap.createBitmap(source, x, y, size, size);</span><br><span class="line">        Bitmap result = pool.get(size, size, Bitmap.Config.ARGB_8888);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            result = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);</span><br><span class="line">        &#125;</span><br><span class="line">        Canvas canvas = <span class="keyword">new</span> Canvas(result);</span><br><span class="line">        Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">        paint.setShader(<span class="keyword">new</span> BitmapShader(squared, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));</span><br><span class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">float</span> r = size / <span class="number">2f</span>;</span><br><span class="line">        canvas.drawCircle(r, r, r, paint);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现圆角图片：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Glide 圆角 Transform</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlideRoundTransform</span> <span class="keyword">extends</span> <span class="title">BitmapTransformation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> radius = <span class="number">0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数 默认圆角半径 4dp</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context Context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GlideRoundTransform</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context Context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dp      圆角半径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GlideRoundTransform</span><span class="params">(Context context, <span class="keyword">int</span> dp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        radius = Resources.getSystem().getDisplayMetrics().density * dp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">transform</span><span class="params">(BitmapPool pool, Bitmap toTransform, <span class="keyword">int</span> outWidth, <span class="keyword">int</span> outHeight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roundCrop(pool, toTransform);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Bitmap <span class="title">roundCrop</span><span class="params">(BitmapPool pool, Bitmap source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Bitmap result = pool.get(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            result = Bitmap.createBitmap(source.getWidth(), source.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Canvas canvas = <span class="keyword">new</span> Canvas(result);</span><br><span class="line">        Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">        paint.setShader(<span class="keyword">new</span> BitmapShader(source, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP));</span><br><span class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        RectF rectF = <span class="keyword">new</span> RectF(<span class="number">0f</span>, <span class="number">0f</span>, source.getWidth(), source.getHeight());</span><br><span class="line">        canvas.drawRoundRect(rectF, radius, radius, paint);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getName() + Math.round(radius);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">drawableToBitmap</span><span class="params">(Drawable drawable)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 取 drawable 的长宽</span></span><br><span class="line">        <span class="keyword">int</span> w = drawable.getIntrinsicWidth();</span><br><span class="line">        <span class="keyword">int</span> h = drawable.getIntrinsicHeight();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取 drawable 的颜色格式</span></span><br><span class="line">        Bitmap.Config config = drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888</span><br><span class="line">                : Bitmap.Config.RGB_565;</span><br><span class="line">        <span class="comment">// 建立对应 bitmap</span></span><br><span class="line">        Bitmap bitmap = Bitmap.createBitmap(w, h, config);</span><br><span class="line">        <span class="comment">// 建立对应 bitmap 的画布</span></span><br><span class="line">        Canvas canvas = <span class="keyword">new</span> Canvas(bitmap);</span><br><span class="line">        drawable.setBounds(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">        <span class="comment">// 把 drawable 内容画到画布中</span></span><br><span class="line">        drawable.draw(canvas);</span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * RoundedBitmapDrawable 是 V4 下的一个类，不能简单的通过：强制转换成 BitmapDrawable 来获取 bitmap</span></span><br><span class="line"><span class="comment">  * Bitmap bitmap = ((BitmapDrawable)xxx).getBitmap();</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><p>实现圆形：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RoundedBitmapDrawable drawableA = RoundedBitmapDrawableFactory.create(getResources(), bitmap);</span><br><span class="line">        drawableA.setCircular(<span class="keyword">true</span>);</span><br><span class="line">        Bitmap a = drawableToBitmap(drawableA);</span><br></pre></td></tr></table></figure><p>实现圆角：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RoundedBitmapDrawable drawableB = RoundedBitmapDrawableFactory.create(getResources(), bitmap);</span><br><span class="line">       drawableB.setCornerRadius(<span class="number">30L</span>);</span><br><span class="line">       Bitmap b = drawableToBitmap(drawableB);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Glide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 必知必会 - 极简版 Leancloud 短信验证码功能</title>
      <link href="/2016/08/29/android-simple-leancloud-sms/"/>
      <url>/2016/08/29/android-simple-leancloud-sms/</url>
      
        <content type="html"><![CDATA[<p>使用 LeanCloud 的 REST API 来自定义短信验证码相关功能，不再需要臃肿的 SDK 。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司的项目仅仅使用了 Leancloud 短信功能来发送验证码，刚开始 Leancloud 的短信 SDK 还会和项目中的 <code>okhttp</code> 、<code>fastjson</code> 产生冲突，后来使用了独立的命名空间解决了冲突，但这样处理会导致项目中产生大量的冗余库。在仅仅使用短信验证码功能 SDK 的情况下会有下列文件被引入到项目中：</p><ul><li><code>avoscloud-sdk-v3.13.8.jar</code></li><li><code>fastjson-1.1.39-leancloud.jar</code></li><li><code>okhttp-2.6.0-leancloud.jar</code></li><li><code>okio-1.6.0-leancloud.jar</code></li></ul><p>本来开发 Android 时，大家都尽量避免触碰 <code>64K</code> 个方法的限制，对于发验证码这样一个简单的事情，还需要引入大量的第三方库实在是难以接受。</p><p>在目前开发的新项目中，我尽量控制第三方库的筛选和使用，不想引起启用 <code>Multidex</code> 导致应用启动慢的问题。直到我发现 Leancloud 的 <code>REST API</code> ，顿时觉得里面有搞头，对，<strong>大有搞头</strong>。</p><a id="more"></a><h2 id="搞点事情"><a href="#搞点事情" class="headerlink" title="搞点事情"></a>搞点事情</h2><p>首先贴下文档地址：<a href="https://leancloud.cn/docs/rest_sms_api.html" target="_blank" rel="noopener">短信服务 REST API 详解</a> ，建议先进行初步阅读了解基础概念。</p><p><code>REST API</code> 是请求接口，与具体的语言无关，这里仅仅演示 Android 下使用 Java 语言的一个实现。</p><p>项目中使用的是 <code>okhttp-3.4.1</code> 和 <code>gson-2.7</code> ，当然你也可以使用其他网络请求库和<code>JSON</code> 解析库。下面上关键代码：</p><blockquote><p>OkHttpUtil</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Constants.APP_KEY 和 Constants.APP_ID 在 LeanCloud 控制台获取</span></span><br><span class="line"><span class="comment">// String MD5Util.string2MD5(String s); 进行 MD5 加密的一个方法。</span></span><br><span class="line"><span class="comment">// 项目使用了 Logger 日志库，没使用的话请自行删除相关代码...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpUtil OkHttpUtil = <span class="keyword">new</span> OkHttpUtil();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> OkHttpClient client;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OkHttpUtil <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        client = <span class="keyword">new</span> OkHttpClient().newBuilder().build();</span><br><span class="line">        <span class="keyword">return</span> OkHttpUtil;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">postJson</span><span class="params">(String target, String json)</span> </span>&#123;</span><br><span class="line">        MediaType JSON = MediaType.parse(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">        RequestBody requestBody = RequestBody.create(JSON, json);</span><br><span class="line">        <span class="keyword">long</span> timestamp = System.currentTimeMillis();</span><br><span class="line">        String sign = MD5Util.string2MD5(timestamp + Constants.APP_KEY);</span><br><span class="line">        Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">                .addHeader(<span class="string">"X-LC-Id"</span>, Constants.APP_ID)</span><br><span class="line">                .addHeader(<span class="string">"X-LC-Sign"</span>, sign + <span class="string">","</span> + timestamp)</span><br><span class="line">                .url(target)</span><br><span class="line">                .post(requestBody)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Response response = client.newCall(request).execute();</span><br><span class="line">            <span class="comment">//判断请求是否成功</span></span><br><span class="line">            <span class="keyword">if</span> (response.isSuccessful()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Logger.e(response.body().string());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Logger.e(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>LoginActivity</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 发送短信验证码</span></span><br><span class="line"><span class="comment">    * params : mobilePhoneNumber</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SendCodeTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Void</span>, <span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> Boolean <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//ttl后面的值是短信有效时间(分钟)</span></span><br><span class="line">           String json = <span class="string">"&#123;\"mobilePhoneNumber\":\"&#123;0&#125;\",\"ttl\":10,\"name\":\"注册\"&#125;"</span>;</span><br><span class="line">           json = json.replace(<span class="string">"&#123;0&#125;"</span>, phone);</span><br><span class="line">           <span class="keyword">return</span> okHttpUtil.postJson(<span class="string">"https://api.leancloud.cn/1.1/requestSmsCode"</span>, json);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Boolean s)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">super</span>.onPostExecute(s);</span><br><span class="line">           <span class="keyword">if</span> (s) &#123;</span><br><span class="line">             Toast.makeText(LoginActivity.<span class="keyword">this</span>,<span class="string">"验证码发送成功"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">           &#125; <span class="keyword">else</span> Toast.makeText(LoginActivity.<span class="keyword">this</span>, <span class="string">"验证码发送失败"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 验证短信验证码</span></span><br><span class="line"><span class="comment">    * params : mobilePhoneNumber , smsCode</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">VerifySmsCode</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Void</span>, <span class="title">Boolean</span>&gt; </span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> Boolean <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</span><br><span class="line">           String json = <span class="string">"&#123;\"mobilePhoneNumber\":\"&#123;0&#125;\"&#125;"</span>;</span><br><span class="line">           json = json.replace(<span class="string">"&#123;0&#125;"</span>, params[<span class="number">0</span>]);</span><br><span class="line">           <span class="keyword">return</span> okHttpUtil.postJson(<span class="string">"https://api.leancloud.cn/1.1/verifySmsCode/"</span> + params[<span class="number">1</span>], json);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Boolean aBoolean)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">super</span>.onPostExecute(aBoolean);</span><br><span class="line">           <span class="keyword">if</span> &#123;</span><br><span class="line">             <span class="comment">//do something</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> Toast.makeText(LoginActivity.<span class="keyword">this</span>, <span class="string">"验证码不匹配"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>自己动手，丰衣足食啊。</p><p>顺便吐槽下：国内的很多第三方 SDK 封装的时候，基本上没怎么考虑使用者项目中已经使用了什么类库。对于大部分常见的类库（图片加载库，网络请求库等）进行进一步的抽象，可以大大减少开发者的负担。</p><p>如果你不明白我的意思，可以看看 <a href="https://github.com/ddwhan0123/GalleryFinal/" target="_blank" rel="noopener">GalleryFinal</a> 这个开源图片选择器对于图片加载库的封装，使得它可以适应多种图片加载库而不需要你修改项目中已有的图片库。</p><p>如果你有更好的或者其他想法，欢迎和我交流。</p><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Leancloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 必知必会-使用 supportV4 的 RoundedBitmapDrawable 实现圆角</title>
      <link href="/2016/08/25/use-supportv4-RoundedBitmapDrawable/"/>
      <url>/2016/08/25/use-supportv4-RoundedBitmapDrawable/</url>
      
        <content type="html"><![CDATA[<p><code>RoundedBitmapDrawable</code> 是 <code>supportV4</code> 下的一个类，有了它，显示圆角和圆形图片的情况下就不需要额外的第三方类库了，还能和各种图片加载库配合使用。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天无意间看到一段实现圆形头像的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RoundedBitmapDrawable drawable = RoundedBitmapDrawableFactory.create(getResources(), bitmap);</span><br><span class="line">drawable.setCircular(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p><code>RoundedBitmapDrawable</code> 这个类顿时就引起我的好奇了，一查发现是 <code>android.support.v4.graphics.drawable.RoundedBitmapDrawable</code> ，<a href="http://developer.android.youdaxue.com/reference/android/support/v4/graphics/drawable/RoundedBitmapDrawable.html?_ga=1.118511817.1571171213.1463032326" target="_blank" rel="noopener">点击此处</a> 可以看到官方的介绍。这个类中的两个方法是今天的主角：</p><table><thead><tr><th style="text-align:center">return</th><th style="text-align:center">method</th></tr></thead><tbody><tr><td style="text-align:center">void</td><td style="text-align:center"><code>setCircular(boolean circular)</code> : Sets the image shape to circular.</td></tr><tr><td style="text-align:center">void</td><td style="text-align:center"><code>setCornerRadius(float cornerRadius)</code> : Sets the corner radius to be applied when drawing the bitmap.</td></tr></tbody></table><p><code>setCircular(boolean circular)</code> : 把图片的形状设为圆形；</p><p><code>setCornerRadius(float cornerRadius)</code> : 设置图片的圆角半径。</p><p>这里贴一下源码，更能清晰的知道它的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Sets the image shape to circular.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This overwrites any calls made to &#123;<span class="doctag">@link</span> #setCornerRadius(float)&#125; so far.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCircular</span><span class="params">(<span class="keyword">boolean</span> circular)</span> </span>&#123;</span><br><span class="line">       mIsCircular = circular;</span><br><span class="line">       mApplyGravity = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">if</span> (circular) &#123;</span><br><span class="line">           updateCircularCornerRadius();</span><br><span class="line">           mPaint.setShader(mBitmapShader);</span><br><span class="line">           invalidateSelf();</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           setCornerRadius(<span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateCircularCornerRadius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> minCircularSize = Math.min(mBitmapHeight, mBitmapWidth);</span><br><span class="line">       mCornerRadius = minCircularSize / <span class="number">2</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Sets the corner radius to be applied when drawing the bitmap.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCornerRadius</span><span class="params">(<span class="keyword">float</span> cornerRadius)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (mCornerRadius == cornerRadius) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">       mIsCircular = <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">if</span> (isGreaterThanZero(cornerRadius)) &#123;</span><br><span class="line">           mPaint.setShader(mBitmapShader);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           mPaint.setShader(<span class="keyword">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       mCornerRadius = cornerRadius;</span><br><span class="line">       invalidateSelf();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>至于具体的实现，阅读源码发现官方使用了 <code>BitmapShader</code> 来实现的圆角。</p><p>如果你有兴趣研究，更多资料：</p><ul><li><a href="http://blog.csdn.net/lmj623565791/article/details/41967509" target="_blank" rel="noopener">Android BitmapShader 实战 实现圆形、圆角图片</a></li><li><a href="http://blog.csdn.net/aigestudio/article/details/41799811" target="_blank" rel="noopener">自定义控件其实很简单1/3</a></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>先看效果图：</p><p><img src="http://mmmedia.qiniudn.com/2016-08-25_08104B752A742F5F71AE7F16661CBA2A.jpg" alt="2016-08-25_08104B752A742F5F71AE7F16661CBA2A.jpg"></p><p>其中第一个图片是圆形，第二个和第三个图片设置了自定义大小的圆角。</p><blockquote><p>xxActivity</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RoundedBitmapDrawable drawableA = RoundedBitmapDrawableFactory.create(getResources(), id2Bitmap(<span class="keyword">this</span>, R.drawable.icon_avatar));</span><br><span class="line">        drawableA.setCircular(<span class="keyword">true</span>);</span><br><span class="line">        rbA.setImageDrawable(drawableA);</span><br><span class="line"></span><br><span class="line">        RoundedBitmapDrawable drawableB = RoundedBitmapDrawableFactory.create(getResources(), id2Bitmap(<span class="keyword">this</span>, R.drawable.icon_avatar));</span><br><span class="line">        drawableB.setCornerRadius(<span class="number">30L</span>);</span><br><span class="line">        rbB.setImageDrawable(drawableB);</span><br><span class="line"></span><br><span class="line">        RoundedBitmapDrawable drawableC = RoundedBitmapDrawableFactory.create(getResources(), id2Bitmap(<span class="keyword">this</span>, R.drawable.icon_avatar));</span><br><span class="line">        drawableC.setCornerRadius(<span class="number">60L</span>);</span><br><span class="line">        rbC.setImageDrawable(drawableC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">id2Bitmap</span><span class="params">(Context context, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BitmapFactory.decodeResource(context.getResources(), id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>activity_xx.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center_horizontal"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/rb_a"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/rb_b"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/rb_c"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码比较简单，有什么问题欢迎随时和我联系。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一个小小的发现，让我又少使用了一个第三方库，心情大好。另外在此过程中发现的 <code>BitmapShader</code>  是学习自定义 View 的一个不错的切入点，需要再研究研究。</p><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 项目开发填坑记 - 使用 MultiDex 解决 64K 限制</title>
      <link href="/2016/08/17/android-multiDex/"/>
      <url>/2016/08/17/android-multiDex/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Android 的 <code>classLoader</code> 在加载 APK 的时候限制了<code>class.dex</code> 包含的 Java 方法数，其总数不能超过65535（64K，<strong>不要再说成 65K</strong> 了，1K = 2^10 = 1024 , 64 * 1024 = 65535），Google 官方给出的解决方案是使用  <a href="https://developer.android.com/studio/build/multidex.html" target="_blank" rel="noopener">Multidex</a> 。</p><h2 id="启用-Multidex"><a href="#启用-Multidex" class="headerlink" title="启用 Multidex"></a>启用 Multidex</h2><p>基本要求：</p><ul><li>使用 Android Studio 开发工具</li><li>Android SDK Build Tools &gt;= 21.1</li><li>更新  Android Support Repository 到最新版本</li></ul><p>配置步骤：</p><ol><li>配置 Gradle build 来开启 multidex</li><li>修改 manifest 来引用 MultiDexApplication 类</li></ol><a id="more"></a><p>修改 <code>module</code> 下的 <code>build.gradle</code> 文件，添加支持库并开启 multidex：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">21</span></span><br><span class="line">    buildToolsVersion <span class="string">"21.1.0"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        minSdkVersion <span class="number">14</span></span><br><span class="line">        targetSdkVersion <span class="number">21</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Enabling multidex support.</span></span><br><span class="line">        multiDexEnabled <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  compile <span class="string">'com.android.support:multidex:1.0.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS： compileSdkVersion、buildToolsVersion 根据实际项目配置，但是版本不能低于上述版本。</p><p>在 <code>AndroidManifest.xml</code> 中给 <code>application</code> 节点添加对 <code>MultiDexApplication</code> 类的引用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"xxx"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"android.support.multidex.MultiDexApplication"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>PS： <code>manifest</code> 节点的 <code>package</code> 属性值根据实际项目有所不同。</p><p><strong>注意</strong>：如果你的 APP 使用了继承 <code>Application</code> 的类，你需要重写<code>attachBaseContext()</code>方法并调用 <code>MultiDex.install(this)</code> 来启用 multidex 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXX</span> <span class="keyword">extends</span> <span class="title">Application</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">attachBaseContext</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.attachBaseContext(base);</span><br><span class="line">MultiDex.install(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网上搜到还有一个方法：不继承 <code>Application</code> ，而是直接继承 <code>MultiDexApplication</code> 即可，这样就不需要重写<code>attachBaseContext()</code>方法了。</p><blockquote><p>参考资料：<a href="https://developer.android.com/studio/build/multidex.html" target="_blank" rel="noopener">Configure Apps with Over 64K Methods</a></p></blockquote><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><h3 id="NoClassDefFoundError"><a href="#NoClassDefFoundError" class="headerlink" title="NoClassDefFoundError"></a>NoClassDefFoundError</h3><blockquote><p>Android SDK Build Tools 21.1 或者更高版本中的 Gradle  Android 插件有对 multidex 的支持。这个插件使用 Proguard 来分析你的项目并在 <code>[buildDir]/intermediates/multi-dex/[buildType]/maindexlist.txt</code> 文件中生成一个 app 启动 classes 的列表。但是这个列表并不是100%准确，可能会丢失一些app启动所需的 classes 。</p></blockquote><p>如果你在本地的测试机上没有遇到这个问题，并不代表你的 APP 没有问题，我通过查看友盟的崩溃记录和使用一些真机测试平台来进行检查，通常情况下会有所发现。</p><p>解决方法：在 <code>module</code> 下创建 <code>multidex.keep</code> 文件，并在其中罗列出那些 class，以便让编译器知道在 main dex 文件中要保持哪些 class。</p><p>生成 <code>multidex.keep</code> 文件中的内容有多种：</p><p><strong>方法一</strong>：修改 <code>module</code> 下的 <code>build.gradle</code> 文件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">android.applicationVariants.all &#123; variant -&gt;</span><br><span class="line">    task <span class="string">"fix$&#123;variant.name.capitalize()&#125;MainDexClassList"</span> &lt;&lt; &#123;</span><br><span class="line">        logger.info <span class="string">"Fixing main dex keep file for $variant.name"</span></span><br><span class="line">        File keepFile = <span class="keyword">new</span> File(<span class="string">"$buildDir/intermediates/multi-dex/$variant.buildType.name/maindexlist.txt"</span>)</span><br><span class="line">        keepFile.withWriterAppend &#123; w -&gt;</span><br><span class="line">            <span class="comment">// Get a reader for the input file</span></span><br><span class="line">            w.append(<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">new</span> File(<span class="string">"$&#123;projectDir&#125;/multidex.keep"</span>).withReader &#123; r -&gt;</span><br><span class="line">                <span class="comment">// And write data from the input into the output</span></span><br><span class="line">                w &lt;&lt; r &lt;&lt; <span class="string">'\n'</span></span><br><span class="line">            &#125;</span><br><span class="line">            logger.info <span class="string">"Updated main dex keep file for $&#123;keepFile.getAbsolutePath()&#125;\n$keepFile.text"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">tasks.whenTaskAdded &#123; task -&gt;</span><br><span class="line">    android.applicationVariants.all &#123; variant -&gt;</span><br><span class="line">        <span class="keyword">if</span> (task.name == <span class="string">"create$&#123;variant.name.capitalize()&#125;MainDexClassList"</span>) &#123;</span><br><span class="line">            task.finalizedBy <span class="string">"fix$&#123;variant.name.capitalize()&#125;MainDexClassList"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>：修改 <code>module</code> 下的 <code>build.gradle</code> 文件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  afterEvaluate &#123;</span><br><span class="line">        tasks.matching &#123;</span><br><span class="line">            it.name.startsWith(<span class="string">'dex'</span>)</span><br><span class="line">        &#125;.each &#123; dx -&gt;</span><br><span class="line">            <span class="keyword">if</span> (dx.additionalParameters == <span class="literal">null</span>) &#123;</span><br><span class="line">                dx.additionalParameters = []</span><br><span class="line">            &#125;</span><br><span class="line">            dx.additionalParameters += <span class="string">'--multi-dex'</span> <span class="comment">// enable multidex</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// optional</span></span><br><span class="line">            dx.additionalParameters += <span class="string">"--main-dex-list=$projectDir/class-list.txt"</span>.toString() <span class="comment">// enable the main-dex-list</span></span><br><span class="line">            dx.additionalParameters += <span class="string">'--minimal-main-dex'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用上述任意方式配置完成后，<code>clean</code> 然后 <code>rebuild</code> 项目，完成之后在 <code>module</code> 下的<code>build/intermediates/multi-dex/xxx</code>里找到 <code>maindexlist.txt</code> 文件（如果找不到相关目录，可能需要你同步后 <code>rebuild</code> 项目才能生成），复制里面的内容到 <code>module</code> 根目录下 <code>multidex.keep</code> 文件中（没有则先创建此文件）。</p><p>然后，比较重要的一步就是：通过友盟、测试记录、Bug记录等获取到 <code>NoClassDefFoundError</code> 错误对应的类，按照 <code>maindexlist.txt</code> 文件的方式添加这些类到 <code>multidex.keep</code> 文件中就可解决了。</p><h3 id="其他错误和问题"><a href="#其他错误和问题" class="headerlink" title="其他错误和问题"></a>其他错误和问题</h3><p>比如<strong>首次安装启动时黑屏没有响应／ANR</strong>、<strong>安装时异常</strong>等，你可以参考文末的一些文章，此外你还可以参考 <a href="http://blog.csdn.net/ys743276112/article/details/52223272" target="_blank" rel="noopener">Android 必知必会-Android Splash 页秒开之细节处理</a> 来优化启动体验。</p><p>参考资料和推荐阅读：</p><ul><li><a href="http://blog.csdn.net/wangbaochu/article/details/51178881" target="_blank" rel="noopener">Android Multidex 遇到的问题</a> （推荐此文）</li><li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1223/3796.html" target="_blank" rel="noopener">Android的multidex带来的性能问题－减慢app启动速度</a></li><li><a href="https://github.com/casidiablo/multidex/issues/7" target="_blank" rel="noopener">ClassNotFoundException</a></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是一篇早就准备写的文章，但当时搜集的资料未及时保存或者丢失，就拖到了现在。因为一个比较旧的 APP 也遇到了相关的问题，所以重新搜集了下资料整理发布出来了，希望能帮到遇到相关问题的朋友们。</p><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 必知必会 - Android Splash 页秒开之细节处理</title>
      <link href="/2016/08/16/create-splash-activity/"/>
      <url>/2016/08/16/create-splash-activity/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天阅读了两篇 Android Splash 页秒开的文章，就上手试了试，效果确实不错，不过在使用过程中发现个小的问题，应用是发现在 Android 6.0 系统下 APP 启动的时候有个默认的动画，如果按照文章介绍的直接启动下一个加载数据的页面会出现页面闪动，有点美中不足的感觉。</p><a id="more"></a><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决方法很简单，我这里做出了两处修改：<strong>延迟启动</strong>和<strong>添加淡出的过场动画</strong></p><blockquote><p>SplashActivity</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">       <span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               Intent starter = <span class="keyword">new</span> Intent(SplashActivity.<span class="keyword">this</span>, xxxActivity.class);</span><br><span class="line">       startActivity(starter);</span><br><span class="line">               finish();</span><br><span class="line">               overridePendingTransition(R.anim.stand,R.anim.splash);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>stand.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/accelerate_interpolator"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">translate</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"200"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromXDelta</span>=<span class="string">"0%p"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toXDelta</span>=<span class="string">"0%p"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>splash.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alpha</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromAlpha</span>=<span class="string">"1.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toAlpha</span>=<span class="string">"0.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"200"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先贴一下阅读到的两篇文章：</p><ul><li><a href="http://blog.csdn.net/yanzhenjie1003/article/details/52201896" target="_blank" rel="noopener">带你重新认识：Android Splash 页秒开 Activity 白屏 Activity 黑屏</a></li><li><a href="https://www.bignerdranch.com/blog/splash-screens-the-right-way/" target="_blank" rel="noopener">Splash Screens the Right Way</a></li></ul><p>先感谢下博主的认真总结，才能让我们把自己的 APP 启动体验做的这么完美。</p><p>在实际开发中，我们可能会遇到很多复杂的情况，一篇博客或者教程也好，只能记录最核心的一些东西，学习的时候还是需要多多思考的。</p><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在自己的电脑上安装 GitBook For Mac</title>
      <link href="/2016/08/05/use-gitbook-on-mac/"/>
      <url>/2016/08/05/use-gitbook-on-mac/</url>
      
        <content type="html"><![CDATA[<h2 id="剪不断的情缘"><a href="#剪不断的情缘" class="headerlink" title="剪不断的情缘"></a>剪不断的情缘</h2><p>之前写了一篇 <a href="http://blog.csdn.net/ys743276112/article/details/45130831" target="_blank" rel="noopener">在自己的服务器上安装GitBook</a> ,发布于 2015-04-20，当时的安装环境是 <code>CentOS 6.X_64Bit</code>，今天想再研究一下这个 <code>GitBook</code> ，发现在基于 <code>Linux</code> 内核的机器上<strong>安装基础功能很简单</strong>，但是牵涉到生成 <code>pdf/epub/mobi</code> 格式的书籍时，<strong>安装calibre的代价非常大</strong>（因为要安装 N 多前置库），对于不是非常非常熟练使用 <code>Linux</code> 的用户，几乎是一种灾难。</p><p>然而，对于 <code>OS X</code> 和 <code>Windows</code> 用户，则相对容易很多（Windows环境未测试），安装相应的 <code>calibre</code> 的客户端即可解决格式转换的问题。</p><a id="more"></a><h2 id="只讲重点-゜-゜"><a href="#只讲重点-゜-゜" class="headerlink" title="只讲重点  (゜-゜)"></a>只讲重点  (゜-゜)</h2><p>前提条件这里一笔带过（在 Mac 上进行）：</p><ol><li>安装 <code>nvm</code> ；</li><li>使用 <code>nvm</code> 安装 <code>Node.js</code> ，我安装了 <code>v5.0.0</code> 版本的；</li><li>使用 <code>npm</code> 安装 <code>gitbook</code> ，不会的看 <a href="http://toolchain.gitbook.com/setup.html" target="_blank" rel="noopener">这里</a>；</li><li>安装 <code>calibre</code> 的客户端==&gt;重点在此步；</li><li>执行生成命令：生成指定格式的文件。</li></ol><h3 id="画重点啦-´−｀-ﾝｰ-咳咳，看黑板"><a href="#画重点啦-´−｀-ﾝｰ-咳咳，看黑板" class="headerlink" title="画重点啦 (´−｀) ﾝｰ 咳咳，看黑板"></a>画重点啦 (´−｀) ﾝｰ 咳咳，看黑板</h3><p>1.下载对应的 <code>Calibre</code> 文件，<a href="http://www.calibre-ebook.com/download" target="_blank" rel="noopener">下载地址在此</a> ，Mac 用户自然是下载 <code>OS X</code> 版本的了；<br>2.下载安装 <code>Calibre</code> ，然后<strong>务必打开运行一次 <code>Calibre</code></strong> ，否则就嘿嘿嘿了；<br>3.在终端里执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /Applications/calibre.app/Contents/MacOS/ebook-convert /usr/<span class="built_in">local</span>/bin</span><br><span class="line"></span><br><span class="line">//官方的文档里是如下命令：会引起权限和命令无效等问题</span><br><span class="line">sudo ln -s ~/Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin</span><br></pre></td></tr></table></figure><p>4.转换格式，参考官方文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generate a PDF file</span></span><br><span class="line">$ gitbook pdf ./ ./mybook.pdf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate an ePub file</span></span><br><span class="line">$ gitbook epub ./ ./mybook.epub</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate a Mobi file</span></span><br><span class="line">$ gitbook mobi ./ ./mybook.mobi</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不管怎么说，终于还是实现了 <code>GitBook</code> 在 Mac 上的完美运行。在有生成 <code>pdf/epub/mobi</code> 格式的文件的需求时，就不心虚了。</p><p>最近在阅读的比较火的一个项目 <a href="https://github.com/GeniusVJR/LearningNotes" target="_blank" rel="noopener">LearningNotes</a> ，是一个 Android 知识点笔记和面试题的一个总结，我用 <code>GitBook</code> 生成了一份 HTML 版，<a href="http://doc.inkcode.cc/ALN/index.html" target="_blank" rel="noopener">点击这里访问</a>，我还打算和作者联系一下，帮他生成 <code>pdf/epub/mobi</code> 格式，方便本地阅读。</p><p>PS:</p><blockquote><p>你可以通过 <a href="https://github.com/likfe" target="_blank" rel="noopener">Github</a>、<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">CSDN</a> 和 <a href="http://weibo.com/zyansen" target="_blank" rel="noopener">微博</a> 与我联系</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> GitBook </tag>
            
            <tag> OSX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime Text 3 安装 Emmet</title>
      <link href="/2016/08/01/sublime-text-3-install-emmet-for-mac/"/>
      <url>/2016/08/01/sublime-text-3-install-emmet-for-mac/</url>
      
        <content type="html"><![CDATA[<p>前几天重写了2014年发布的 <a href="http://blog.csdn.net/ys743276112/article/details/52063396" target="_blank" rel="noopener">超高速前端开发工具——Emmet</a> ，主要是优化了代码段的格式，更加易读。今天在 MacBook 上安装了 Sublime Text 3 ，在安装一系列的插件时被网络问题影响到，这里介绍下安装过程，包含本地安装的情况。</p><h2 id="1-安装-Package-Control"><a href="#1-安装-Package-Control" class="headerlink" title="1. 安装 Package Control"></a>1. 安装 <code>Package Control</code></h2><p>这里我们访问 <a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">Package Control 官网</a> ，按照步骤即可：</p><h3 id="1-打开命令行"><a href="#1-打开命令行" class="headerlink" title="1. 打开命令行"></a>1. 打开命令行</h3><p>使用快捷键 <strong>ctrl+` </strong> 或者在菜单中点击 <strong>View &gt; Show Console</strong> 。</p><a id="more"></a><h3 id="2-执行安装命令"><a href="#2-执行安装命令" class="headerlink" title="2. 执行安装命令"></a>2. 执行安装命令</h3><p>如果是 <code>Sublime Text 2</code> ，则复制下面的命令到命令行里并按下回车键进行安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2,os,hashlib; h = <span class="string">'2915d1851351e5ee549c20394736b442'</span> + <span class="string">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ipp) <span class="keyword">else</span> <span class="keyword">None</span>; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler()) ); by = urllib2.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); open( os.path.join( ipp, pf), <span class="string">'wb'</span> ).write(by) <span class="keyword">if</span> dh == h <span class="keyword">else</span> <span class="keyword">None</span>; print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="string">'Please restart Sublime Text to finish installation'</span>)</span><br></pre></td></tr></table></figure><p>如果是 <code>Sublime Text 3</code> ，则复制下面的命令到命令行里并按下回车键进行安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">'2915d1851351e5ee549c20394736b442'</span> + <span class="string">'8bc59f460fa1548d1514676163dafc88'</span>; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class="string">'http://packagecontrol.io/'</span> + pf.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class="string">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> open(os.path.join( ipp, pf), <span class="string">'wb'</span> ).write(by)</span><br></pre></td></tr></table></figure><p><strong>本地安装：</strong></p><p>本地安装可能不区分 <code>Sublime Text</code> 的版本问题，因为官网只提供了一个下载链接。</p><ol><li>点击菜单：<code>Preferences &gt; Browse Packages…</code> ；</li><li>打开并进入 <code>Installed Packages/</code> 目录；</li><li>下载 <a href="https://packagecontrol.io/Package%20Control.sublime-package" target="_blank" rel="noopener">Package Control.sublime-packageb</a> 并拷贝文件到 <code>Installed Packages/</code> 目录；</li><li>重启 <code>Sublime Text</code> 。</li></ol><h2 id="2-安装-Emmet"><a href="#2-安装-Emmet" class="headerlink" title="2. 安装 Emmet"></a>2. 安装 <code>Emmet</code></h2><p>在 <code>Sublime Text</code> 中按 <code>Ctrl+Shift+p</code> 快捷键或在菜单-工具中打开“命令面板”（ <code>Tools &gt; Command Palette...</code> ），输入：<code>Install Package</code> (安装扩展)后回车，弹出新的窗口，再输入 <code>Emmet</code> 查找 <code>Emmet</code> 确定安装，等到自动打开一个文档，说明安装成功。</p><h3 id="解决-Emmet-安装之后，Pyv8-未安装的问题"><a href="#解决-Emmet-安装之后，Pyv8-未安装的问题" class="headerlink" title="解决 Emmet 安装之后，Pyv8 未安装的问题"></a>解决 Emmet 安装之后，Pyv8 未安装的问题</h3><p>安装 <code>Emmet</code> 之后，自动打开的文档提示会自动安装 <code>PyV8</code> 的包，请在安装 <code>PyV8</code> 成功之后重启 <code>Sublime Text</code> ，你可能会发现 <code>Sublime Text</code> 左下角一直显示 <code>Loading PyV8…</code> 之类的提示，如果关闭重启之后依旧如此，最后还是无法使用 <code>Emmet</code> 的话，就说明网络有一定的问题，无法正常下载 <code>PyV8</code> 的包了，下面介绍本地安装 <code>PyV8</code> 的方法（Mac系统下）：</p><ul><li>打开 <a href="https://github.com/emmetio/pyv8-binaries" target="_blank" rel="noopener">PyV8 的 Github 主页</a></li><li>按照说明下载对应版本的包，并解压到指定的目录。</li></ul><p>对于 <code>OSX 10.7+</code> 上使用 <code>Sublime Text 3</code> ,我们需要下载 <a href="https://raw.githubusercontent.com/emmetio/pyv8-binaries/master/pyv8-osx-p3.zip" target="_blank" rel="noopener">pyv8-osx-p3.zip</a> ,然后把解压后 2 个的文件放在如下目录结构中：</p><p><img src="http://mmmedia.qiniudn.com/2016-08-01_2016-08-01%20at%20%E4%B8%8B%E5%8D%884.39.png" alt="2016-08-01_2016-08-01 at 下午4.39.png"></p><p>没有的目录需要自己创建，然后重启 <code>Sublime Text 3</code> 即可。</p><p>PS:</p><blockquote><p>你可以关注的我 <a href="https://github.com/likfe" target="_blank" rel="noopener">Github</a>、<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">CSDN</a> 和 <a href="http://weibo.com/zyansen" target="_blank" rel="noopener">微博</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Sublime Text </tag>
            
            <tag> Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android必知必会-App 常用图标尺寸规范汇总</title>
      <link href="/2016/07/26/android-size-set/"/>
      <url>/2016/07/26/android-size-set/</url>
      
        <content type="html"><![CDATA[<p><strong>内容持续更新中，更新日期：2016-08-11</strong></p><h2 id="1-程序启动图标（icon-launcher）"><a href="#1-程序启动图标（icon-launcher）" class="headerlink" title="1. 程序启动图标（icon launcher）"></a>1. 程序启动图标（icon launcher）</h2><p>放在<code>mipmap-*dpi</code>下，文件名为<code>ic_launcher.png</code></p><ul><li>LDPI (Low Density Screen，120 DPI)，其图标大小为 36 x 36 px。</li><li>MDPI (Medium Density Screen, 160 DPI)，其图标大小为 48 x 48 px。</li><li>HDPI (High Density Screen, 240 DPI)，其图标大小为 72 x 72 px。</li><li>xhdpi (Extra-high density screen, 320 DPI)，其图标大小为 96 x 96 px。</li><li>xxhdpi（xx-high density screen, 480 DPI）,其图标大小为144 x 144 px。</li><li>xxxhdpi（xxx-high density screen, 640 DPI）,其图标大小为192 x 192 px。</li></ul><h3 id="技巧：自动生成对应分辨率的-icon-launcher"><a href="#技巧：自动生成对应分辨率的-icon-launcher" class="headerlink" title="技巧：自动生成对应分辨率的 icon launcher"></a>技巧：自动生成对应分辨率的 icon launcher</h3><blockquote><p>新增于2016-08-11 </p></blockquote><p>使用 <code>Android Studio</code> ，在 <code>module</code>或者 <code>drawable</code> 上右键 <code>new &gt; ImageAsset</code> ,可以把一张大图自动裁切成各 DPI 对应的分辨率的 icon launcher。</p><a id="more"></a><p>细节操作参照下图：</p><p><img src="http://mmmedia.qiniudn.com/2016-08-11_2016-08-11%20at%20%E4%B8%8A%E5%8D%8811.38.png" alt="2016-08-11_2016-08-11 at 上午11.38.png"></p><ol><li>选择要生成的图片类型：<code>Launcher Icons</code> ；</li><li>Name 会自动生成 <code>ic_launcher</code> ，如果不是则填成 <code>ic_launcher</code> ；</li><li><code>Asset Type</code> 设置成 <code>Image</code> ;</li><li>在 <code>path</code> 一列的最后选择自己要生成的图片</li><li>调整 <code>Shape</code> 等参数；</li><li>点击 <code>next</code> 一路到 <code>finish</code> 即可。</li></ol><p><strong>PS：</strong>使用 <code>Shape</code> 的其他参数，比如圆角<code>square</code> , 会默认使用<strong>不支持透明度的颜色</strong>作为背景，所以要根据具体的图标进行修改，特殊的情况需要设计师切出带圆角和透明度的大图。</p><h2 id="2-不透明度16进制值"><a href="#2-不透明度16进制值" class="headerlink" title="2. 不透明度16进制值"></a>2. 不透明度16进制值</h2><table><thead><tr><th style="text-align:center">不透明度</th><th style="text-align:center">16进制值</th></tr></thead><tbody><tr><td style="text-align:center">100%</td><td style="text-align:center">FF</td></tr><tr><td style="text-align:center">95%</td><td style="text-align:center">F2</td></tr><tr><td style="text-align:center">90%</td><td style="text-align:center">E6</td></tr><tr><td style="text-align:center">85%</td><td style="text-align:center">D9</td></tr><tr><td style="text-align:center">80%</td><td style="text-align:center">CC</td></tr><tr><td style="text-align:center">75%</td><td style="text-align:center">BF</td></tr><tr><td style="text-align:center">70%</td><td style="text-align:center">B3</td></tr><tr><td style="text-align:center">65%</td><td style="text-align:center">A6</td></tr><tr><td style="text-align:center">60%</td><td style="text-align:center">99</td></tr><tr><td style="text-align:center">55%</td><td style="text-align:center">8C</td></tr><tr><td style="text-align:center">50%</td><td style="text-align:center">80</td></tr><tr><td style="text-align:center">45%</td><td style="text-align:center">73</td></tr><tr><td style="text-align:center">40%</td><td style="text-align:center">66</td></tr><tr><td style="text-align:center">35%</td><td style="text-align:center">59</td></tr><tr><td style="text-align:center">30%</td><td style="text-align:center">4D</td></tr><tr><td style="text-align:center">25%</td><td style="text-align:center">40</td></tr><tr><td style="text-align:center">20%</td><td style="text-align:center">33</td></tr><tr><td style="text-align:center">15%</td><td style="text-align:center">26</td></tr><tr><td style="text-align:center">10%</td><td style="text-align:center">1A</td></tr><tr><td style="text-align:center">5%</td><td style="text-align:center">0D</td></tr><tr><td style="text-align:center">0%</td><td style="text-align:center">00</td></tr></tbody></table><h2 id="3-dp和px换算及关系"><a href="#3-dp和px换算及关系" class="headerlink" title="3. dp和px换算及关系"></a>3. dp和px换算及关系</h2><p>各DPI的换算：</p><p><img src="http://img.blog.csdn.net/20160721152503652" alt="Android DPI"></p><p>数据总结表：</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">对应 DPI</th><th style="text-align:center">比例(以 mdpi 为基数 1)</th><th style="text-align:center">和px的换算关系</th></tr></thead><tbody><tr><td style="text-align:center">lpdi</td><td style="text-align:center">120 DPI</td><td style="text-align:center">0.75</td><td style="text-align:center">1 dp = 0.75 px</td></tr><tr><td style="text-align:center">mdpi</td><td style="text-align:center">160 DPI</td><td style="text-align:center">1</td><td style="text-align:center">1 dp = 1 px</td></tr><tr><td style="text-align:center">hdpi</td><td style="text-align:center">240 DPI</td><td style="text-align:center">1.5</td><td style="text-align:center">1 dp = 1.5 px</td></tr><tr><td style="text-align:center">xhdpi</td><td style="text-align:center">320 DPI</td><td style="text-align:center">2</td><td style="text-align:center">1 dp = 2 px</td></tr><tr><td style="text-align:center">xxhdpi</td><td style="text-align:center">480 DPI</td><td style="text-align:center">3</td><td style="text-align:center">1 dp = 3 px</td></tr><tr><td style="text-align:center">xxxhdpi</td><td style="text-align:center">640 DPI</td><td style="text-align:center">4</td><td style="text-align:center">1 dp = 4 px</td></tr></tbody></table><h3 id="dp-到-px"><a href="#dp-到-px" class="headerlink" title="dp 到 px"></a>dp 到 px</h3><p>这里给定：<strong>400 dp * 240 dp</strong><br>则对应的图片分辨率分别为：</p><ul><li>lpdi  ⇒ 300 px * 180 px</li><li>mdpi ⇒ 400 px * 240 px</li><li>hdpi ⇒ 600 px * 360 px</li><li>xhdpi ⇒ 800 px * 480 px</li><li>xxhdpi ⇒ 1200 px * 720 px</li><li>xxxhdpi ⇒ 1600 px * 960 px</li></ul><h3 id="px-到-dp"><a href="#px-到-dp" class="headerlink" title="px 到 dp"></a>px 到 dp</h3><p>从 <code>px</code> 换算成 <code>dp</code> 要知道它是以什么 <code>dpi</code> 标准来设计的，根据换算关系表可得到相应的 <code>dp</code> 。<br>例如： 以 <code>xxhdpi</code> 标准设计的 UI，其中一个切图的分辨率是 <code>600 px * 360 px</code> ，根据换算关系表可知，在 <code>xxhdpi</code> 标准下，<code>1 dp = 3 px</code> ,则其对应的 <code>dp</code> 是  <code>200 dp * 120 dp</code> 。</p><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android必知必会-发布开源Android项目注意事项</title>
      <link href="/2016/07/17/android-postOpenProjectNote/"/>
      <url>/2016/07/17/android-postOpenProjectNote/</url>
      
        <content type="html"><![CDATA[<h2 id="1-合理配置-gitignore-文件"><a href="#1-合理配置-gitignore-文件" class="headerlink" title="1. 合理配置 .gitignore 文件"></a>1. 合理配置 <code>.gitignore</code> 文件</h2><p>配置 <code>.gitignore</code> 可以排除一些非必要文件和保护保密信息，下面是在项目根目录下 <code>.gitignore</code> 的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.gradle</span><br><span class="line">/local.properties</span><br><span class="line">/gradle.properties</span><br><span class="line">/build</span><br><span class="line">*.log</span><br><span class="line">*.apk</span><br><span class="line">*.ap_</span><br><span class="line">/*/build/</span><br></pre></td></tr></table></figure><p>这里介绍下一些参数的意义：</p><ul><li><code>/local.properties</code>：这个文件里默认写的有本地 SDK 的位置，多人协作时一般要排除，仅仅做开源项目可以不排除。</li><li><code>/gradle.properties</code>：一般写有 gradle 的 jvm 、代理和打包签名文件 Key 的一些信息，根据需要进行处理，一般情况下需要排除，其他情况见下文。</li><li><code>/build</code>和<code>/*/build/</code>：排除 build 项目生成的文件，文件较大，且 IDE 可以自动生成，无特殊需求，<strong>必须排除</strong>。</li></ul><a id="more"></a><h2 id="2-签名文件"><a href="#2-签名文件" class="headerlink" title="2. 签名文件"></a>2. 签名文件</h2><p>在使用了一些需要配置 <code>appkey</code> 的第三方的 SDK 时，比如 XX 地图 SDK 、XX 播放器 SDK ，这些都需要在对应的开发者中心里配置<strong>包名</strong>和 <strong>Android签名</strong> 信息，这些和签名文件直接相关，所以需要在项目里提前放置好一个编译用的签名文件，可以在 <code>gradle.properties</code> 里写上相应的变量。</p><p>签名文件目前有两种格式：<code>.keystore</code> 和 <code>.jsk</code> ，这里以 <code>debug.jks</code> 为例，<strong>此文件存放在项目根目录</strong>，如果目录有变化，加上相应的路径即可。</p><p>根据是否在 <code>gradle.properties</code> 里写上相应的变量有两种使用方法：</p><h3 id="方案一：不使用-gradle-properties"><a href="#方案一：不使用-gradle-properties" class="headerlink" title="方案一：不使用 gradle.properties"></a>方案一：不使用 <code>gradle.properties</code></h3><p>不使用 <code>gradle.properties</code> 的话，相关信息直接写在 <code>/app/build.gradle</code> 文件里:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  signingConfigs &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            storeFile file(<span class="string">"$rootDir/debug.jks"</span>)</span><br><span class="line">            storePassword <span class="string">"androidstore"</span></span><br><span class="line">            keyAlias <span class="string">"androiddebugkey"</span></span><br><span class="line">            keyPassword <span class="string">"androidkey"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        release &#123;</span><br><span class="line">            storeFile file(<span class="string">"$rootDir/debug.jks"</span>)</span><br><span class="line">            storePassword <span class="string">"androidstore"</span></span><br><span class="line">            keyAlias <span class="string">"androiddebugkey"</span></span><br><span class="line">            keyPassword <span class="string">"androidkey"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方案二：使用-gradle-properties"><a href="#方案二：使用-gradle-properties" class="headerlink" title="方案二：使用 gradle.properties"></a>方案二：使用 <code>gradle.properties</code></h3><p>使用 <code>gradle.properties</code> 的话，相关信息写在 <code>/gradle.properties</code> 和 <code>/app/build.gradle</code> 文件里:</p><p>对于 <code>/gradle.properties</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RELEASE_KEY_ALIAS=androiddebugkey</span><br><span class="line">RELEASE_STORE_PASSWORD=androidstore</span><br><span class="line">RELEASE_KEY_PASSWORD=androidkey</span><br><span class="line">RELEASE_STORE_FILE=$rootDir/debug.jks</span><br></pre></td></tr></table></figure><p>对于 <code>/app/build.gradle</code> ：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  signingConfigs &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            storeFile file(RELEASE_STORE_FILE)</span><br><span class="line">            storePassword RELEASE_STORE_PASSWORD</span><br><span class="line">            keyAlias RELEASE_KEY_ALIAS</span><br><span class="line">            keyPassword RELEASE_KEY_PASSWORD</span><br><span class="line">        &#125;</span><br><span class="line">        releaseConfig &#123;</span><br><span class="line">            storeFile file(RELEASE_STORE_FILE)</span><br><span class="line">            storePassword RELEASE_STORE_PASSWORD</span><br><span class="line">            keyAlias RELEASE_KEY_ALIAS</span><br><span class="line">            keyPassword RELEASE_KEY_PASSWORD</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况下 <code>/gradle.properties</code> 不能出现在 <code>.gitignore</code> 文件中。</p><h2 id="3-SO-文件"><a href="#3-SO-文件" class="headerlink" title="3. .SO 文件"></a>3. <code>.SO</code> 文件</h2><p>如果开源项目中使用的开源库中有多个库包含 <code>jni</code>，由于每个开源库提供的 <code>so</code> 文件的编译版本不尽相同，那么，很有可能在不同 CPU 架构的手机上崩溃，所以要在打包时进行 <code>so</code> 文件的过滤或者说选择。</p><p>下面举个简单的例子：假设我的一个开源项目使用了 <code>gif-drawable</code>、<code>fresco</code>、<code>Vitamio-4.0</code></p><p>在 <code>/app/build.gradle</code> 中的配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">...</span><br><span class="line">compile &apos;pl.droidsonroids.gif:android-gif-drawable:1.1.14&apos;</span><br><span class="line">compile &apos;com.facebook.fresco:fresco:0.9.0&apos;</span><br><span class="line">compile(name: &apos;Vitamio-4.0&apos;, ext: &apos;aar&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们看一下它们各自编译的 <code>so</code> 版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gif-drawable</span><br><span class="line">--mips</span><br><span class="line">--mips64</span><br><span class="line">--armeabi</span><br><span class="line">--armeabi-v7a</span><br><span class="line">--arm64-v8a</span><br><span class="line">--x86</span><br><span class="line">--x86_64</span><br><span class="line">fresco:imagepipeline</span><br><span class="line">--armeabi</span><br><span class="line">--armeabi-v7a</span><br><span class="line">--arm64-v8a</span><br><span class="line">--x86</span><br><span class="line">--x86_64</span><br><span class="line">Vitamio-4.0</span><br><span class="line">--mips</span><br><span class="line">--armeabi</span><br><span class="line">--armeabi-v7a</span><br><span class="line">--x86</span><br></pre></td></tr></table></figure><p>我们找一下以上三个库的 <code>so</code> 版本的<strong>交集</strong>，对，这里强调下：<strong>交集</strong>、<strong>交集</strong>、<strong>交集</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">armeabi</span><br><span class="line">armeabi-v7a</span><br><span class="line">x86</span><br></pre></td></tr></table></figure><p>找到了交集，就是我们需要在打包进APK的 <code>so</code> 版本，如何指定打包 <code>so</code> 版本，需要配置 <code>/app/build.gradle</code> 文件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">...</span><br><span class="line">productFlavors &#123;</span><br><span class="line">        dev &#123;</span><br><span class="line">            ndk &#123;</span><br><span class="line">                abiFilters <span class="string">"armeabi-v7a"</span>,<span class="string">"arm64-v8a"</span>,<span class="string">"x86"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        prod &#123;</span><br><span class="line">            ndk &#123;</span><br><span class="line">                abiFilters <span class="string">"armeabi-v7a"</span>,<span class="string">"arm64-v8a"</span>,<span class="string">"x86"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于打包时指定 <code>so</code> 版本这一点很重要，不仅时在开源项目中需要注意，在实际的开发项目中更要注意这一点，所以在选择包含了 jni 的开源库时，务必要注意到当前项目中其他开源库的 jni 的版本。每次添加新的包含 jni 的类库时，都要做一次比对，务必打包它们交集的 jni 版本。</p><h2 id="4-第三方SDK二次打包"><a href="#4-第三方SDK二次打包" class="headerlink" title="4. 第三方SDK二次打包"></a>4. 第三方SDK二次打包</h2><p>项目中使用的第三方 SDK 中，其作者可能考虑的不够细致，也可能是为了兼容 Eclipse ，常常会出现让你复制粘贴大量的图片和 XML 文件到现有的项目中，这大大影响了项目原有的目录结构和可读性，更糟糕的问题是对 SDK 的升级、删除会非常的麻烦，碰到这样的 SDK ，需要我们进行二次打包成 aar 格式的类库。</p><p><strong>PS</strong>：Eclipse 不支持 aar 格式，只能使用上述比较麻烦的方式，不过你可以在使用此类类库的时候，<strong>列一张清单</strong>，记录此 SDK 在项目中添加的所有文件，便于以后变更。如果不是特别需要，建议使用 Android Studio 进行开发。</p><h3 id="打包-aar"><a href="#打包-aar" class="headerlink" title="打包 aar"></a>打包 aar</h3><p>打包 aar 需要在 Android Studio 中进行。这里先做一个约定，在 Android Studio 中的一个 Project 中，包含两个 module ，其中需要打包成 aar 的 module ，名称是 <strong>demoLibary</strong> ，主 module 或者说测试用的 module 名称是 <strong>app</strong> 。</p><p>1.修改 <strong>demoLibary</strong> 的 <code>build.gradle</code>  ：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//apply plugin: 'com.android.application'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></span><br></pre></td></tr></table></figure><p>即修改 <code>apply plugin: &#39;com.android.application&#39;</code> 为 <code>apply plugin: &#39;com.android.library&#39;</code></p><p>2.修改<strong>demoLibary</strong>一些信息：</p><p>删除 <code>AndroidManifest.xml</code> 中的无用信息：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="string">android:</span>icon=<span class="string">"@mipmap/ic_launcher"</span></span><br><span class="line"><span class="string">android:</span>label=<span class="string">"@string/app_name"</span></span><br></pre></td></tr></table></figure><p>删除 <code>res/values</code> 下不用的值和文件。</p><p>3.在主 module <strong>app</strong> 里添加对 <strong>demoLibary</strong> 的引用：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">...</span><br><span class="line">compile project(<span class="string">':demoLibary'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.生成 aar 文件：</p><p><code>build</code> module <strong>app</strong> 之后就能在 <strong>demoLibary</strong> 下的 <code>build/outputs/aar</code> 下找到我们需要的 aar 文件了，这里命名为 <code>demoLibary-1.0.aar</code>。</p><h3 id="使用-aar"><a href="#使用-aar" class="headerlink" title="使用 aar"></a>使用 aar</h3><p>1.配置项目根目录的 <code>/build.gradle</code> ：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">    ...</span><br><span class="line">    flatDir &#123;</span><br><span class="line">            dirs <span class="string">'libs'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在 module <strong>app</strong> 中引用 aar ：</p><p>首先复制 <code>demoLibary-1.0.aar</code> 到 module <strong>app</strong> 下的 <code>libs</code> 目录（没有则创建此目录）中，然后修改 <code>/app/build.gradle</code> 文件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="string">include:</span> [<span class="string">'*.jar'</span>], <span class="string">dir:</span> <span class="string">'libs'</span>)</span><br><span class="line">    compile(<span class="string">name:</span> <span class="string">'demoLibary-1.0'</span>, <span class="string">ext:</span> <span class="string">'aar'</span>)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，你就可以使用 <strong>demoLibary</strong> 开放的接口和方法了。</p><h2 id="n-不是结尾"><a href="#n-不是结尾" class="headerlink" title="n. 不是结尾"></a>n. 不是结尾</h2><p>以上几点是目前发现的较明显的问题，如果你了解更多的注意事项，欢迎和我联系。</p><blockquote><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android必知必会-长按返回健退出</title>
      <link href="/2016/07/06/android-longpress-back/"/>
      <url>/2016/07/06/android-longpress-back/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>平常比较常见的都是一定时间间隔内按两次返回键来退出应用，并且第一次点击会有相应的提示，网上资料比较多，这里写一下，长按返回键退出。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>实现的方案常用的有两个：</p><ul><li>重写<code>dispatchKeyEvent(KeyEvent event)</code>方法</li><li>重写<code>onKeyDown(int keyCode, KeyEvent event)</code>方法</li></ul><a id="more"></a><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchKeyEvent</span><span class="params">(KeyEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.getKeyCode() == KeyEvent.KEYCODE_BACK &amp;&amp; event.isLongPress()) &#123;</span><br><span class="line">        <span class="comment">//do something else</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很简单，如果按下了返回键且是长按，则退出。</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; event.getRepeatCount() == <span class="number">0</span>) &#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"长按返回键退出"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK &amp;&amp; event.getRepeatCount() == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">//do something else</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐本方案，可以修改<code>else if</code>中<code>event.getRepeatCount()==</code>的次数来修改长按的时间，<code>event.getRepeatCount()</code> 为<strong>0</strong>时代表单击了一次，当次数<code>&gt;=1</code>时就代表长按了,值越大，说明按的时间越长。<br>之所以推荐本方案，因为可以在第一次点击返回键的时候提醒用户。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本来准备多整理些资料一起发出来，掘金刚刚在内测发布工具，这里就手写一篇试试感觉如何，体验还是很棒的。以下是个人意见：</p><p>优点：</p><ul><li>配色漂亮</li><li>界面干净，写作比较专注，适合有经验的老手</li><li>响应快，对<code>MarkDown</code>语法的细节处理的不错</li></ul><p>缺点：</p><ul><li>界面没有引导，新手会蒙圈吧</li><li>左边的写作区的配色是暗色，没有可选性（难道根据时间换白色和黑色主题？）</li><li>不支持流程图等高级功能</li></ul><p>总的来说，基本功能都是有的，界面比较干净，这个是优点也是缺点了，相对而言，更适合把<code>MarkDown</code>语法熟记于心的人。</p><p>最后，来个配图看看写作界面：</p><p><img src="http://ac-mhke0kuv.clouddn.com/bcb599449a6de0393bcc.png" alt></p><blockquote><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android必知必会-Android Studio下配置和使用Lambda</title>
      <link href="/2016/07/06/android-setting-lamdba/"/>
      <url>/2016/07/06/android-setting-lamdba/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>和朋友讨论 <code>JAVA8</code> 的新特性，聊到<code>Lambda</code>，正好在掘金上看到一篇相关的文章，结合资料，作一个总结，特别是记录下实际使用中遇到的问题。</p><h3 id="什么是Lambda表达式"><a href="#什么是Lambda表达式" class="headerlink" title="什么是Lambda表达式"></a>什么是Lambda表达式</h3><blockquote><p>lambda表达式，它将允许我们将行为传到函数里。在Java 8之前，如果想将行为传入函数，仅有的选择就是匿名类，需要6行代码。而定义行为最重要的那行代码，却混在中间不够突出。Lambda表达式取代了匿名类，取消了模板，允许用函数式风格编写代码。这样有时可读性更好，表达更清晰。</p><p>— Java8 lambda表达式10个示例</p></blockquote><a id="more"></a><p>阅读完上面的文字估计也不是特别明白，对于我们日常开发Android，就是简化了匿名函数的使用，可以简单通过下面的示例来感受一下，如果你有更深的兴趣，文末有更多搜集的资料供你阅读。</p><h3 id="Lamdba示例"><a href="#Lamdba示例" class="headerlink" title="Lamdba示例"></a>Lamdba示例</h3><h4 id="用lambda表达式实现Runnable"><a href="#用lambda表达式实现Runnable" class="headerlink" title="用lambda表达式实现Runnable"></a>用lambda表达式实现Runnable</h4><p>使用lambda表达式可以替换匿名类，而实现<code>Runnable</code>接口是匿名类的最好示例。Java 8之前的<code>runnable</code>实现方法，需要4行代码，而使用<code>lambda</code>表达式只需要一行代码。只需要用<code>() -&gt; {}</code>代码块替代整个匿名类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8之前：</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"在Java8之前, 需要写很多代码"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java 8方式：</span></span><br><span class="line"><span class="keyword">new</span> Thread( () -&gt; System.out.println(<span class="string">"使用Java8, Lambda表达式一目了然"</span>) ).start();</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在Java8之前, 需要写很多代码</span><br><span class="line">使用Java8, Lambda表达式一目了然</span><br></pre></td></tr></table></figure></p><p>这个例子展示了Java 8 lambda表达式的语法，可以使用<code>lambda</code>写出如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(params) -&gt; expression</span><br><span class="line">(params) -&gt; statement</span><br><span class="line">(params) -&gt; &#123; statements &#125;</span><br></pre></td></tr></table></figure></p><p>例如，如果你的方法不对参数进行修改、重写，只是在控制台打印点东西的话，那么可以这样写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() -&gt; System.out.println(<span class="string">"Hello World"</span>);</span><br></pre></td></tr></table></figure></p><p>如果你的方法接收两个参数，那么可以写成如下这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(int a, int b) -&gt; a + b</span><br></pre></td></tr></table></figure></p><h4 id="使用lambda表达式进行事件处理"><a href="#使用lambda表达式进行事件处理" class="headerlink" title="使用lambda表达式进行事件处理"></a>使用lambda表达式进行事件处理</h4><p>在Android日常开发中，我们常常会设置各种事件，比如<code>setOnClickListener</code>、<code>setOnItemClickListener</code>等等，下面对比下前后的写法变化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//之前</span></span><br><span class="line">viewA.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//Do something</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//使用lambda</span></span><br><span class="line">viewA.setOnClickListener(v -&gt; &#123;</span><br><span class="line">  <span class="comment">//Do something</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">viewA.setOnClickListener(View v -&gt; &#123;</span><br><span class="line">  <span class="comment">//Do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样一对比是不是简洁很多？那么对于多个参数的<code>setOnItemClickListener</code>怎么写呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//之前</span></span><br><span class="line">xxxListView.setOnItemClickListener(<span class="keyword">new</span> AdapterView.OnItemClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//Do something</span></span><br><span class="line">            &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//使用lambda后</span></span><br><span class="line">xxxListView.setOnItemClickListener((parent,view,position,id)-&gt;&#123;</span><br><span class="line"><span class="comment">//Do something</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">xxxListView.setOnItemClickListener((AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)-&gt;&#123;</span><br><span class="line"><span class="comment">//Do something</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//甚至</span></span><br><span class="line">xxxListView.setOnItemClickListener((a,b,c,d)-&gt;&#123;</span><br><span class="line"><span class="comment">//Do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上两种例子大概是日常Android开发中最为常用的，更多示例请访问 ：<a href="http://www.importnew.com/16436.html" target="_blank" rel="noopener">Java8 lambda表达式10个示例</a></p><h2 id="启用Lambda"><a href="#启用Lambda" class="headerlink" title="启用Lambda"></a>启用Lambda</h2><p>启用<code>Lamdba</code>目前有两种方式，一个是使用Google官方的，一个是使用第三方Java8兼容插件，<strong>推荐使用第三方兼容插件</strong> 。</p><p>基本要求如下：</p><ul><li>Android Studio 2.1+</li><li>安装好 JAVA 8</li></ul><h3 id="方式一：Google官方方式"><a href="#方式一：Google官方方式" class="headerlink" title="方式一：Google官方方式"></a>方式一：Google官方方式</h3><blockquote><p>要使用新的 Java 8 语言功能，还需使用新的 Jack 工具链。新的 Android 工具链将 Java 源语言编译成 Android 可读取的 Dalvik 可执行文件字节码，且有其自己的 .jack 库格式，在一个工具中提供了大多数工具链功能：重新打包、压缩、模糊化以及 Dalvik 可执行文件分包。</p></blockquote><p>以下是构建 Android Dalvik 可执行文件可用的两种工具链的对比：</p><p>旧版 javac 工具链：<br><code>javac (.java --&gt; .class) --&gt; dx (.class --&gt; .dex)</code><br>新版 Jack 工具链：<br><code>Jack (.java --&gt; .jack --&gt; .dex)</code><br><strong>配置 Gradle</strong><br>如需为您的项目启用 Java 8 语言功能和 Jack，请在模块层级的 build.gradle 文件中输入以下内容：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">    jackOptions &#123;</span><br><span class="line">      enabled <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  compileOptions &#123;</span><br><span class="line">    sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>已知问题</strong><br>Instant Run 目前不能用于 Jack，在使用新的工具链时将被禁用。</p><blockquote><p><a href="https://developer.android.com/preview/j8-jack.html#configuration" target="_blank" rel="noopener">Java 8 语言功能</a></p></blockquote><h3 id="方式二：使用第三方Java8兼容插件"><a href="#方式二：使用第三方Java8兼容插件" class="headerlink" title="方式二：使用第三方Java8兼容插件"></a>方式二：使用第三方Java8兼容插件</h3><p>下面是插件的<code>ReadMe</code>的配置：添加下面的内容到项目的<code>build.gradle</code>文件中</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">     mavenCentral()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dependencies &#123;</span><br><span class="line">     classpath <span class="string">'me.tatarka:gradle-retrolambda:3.2.5'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Required because retrolambda is on maven central</span></span><br><span class="line">repositories &#123;</span><br><span class="line">  mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span> <span class="comment">//or apply plugin: 'java'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'me.tatarka.retrolambda'</span></span><br></pre></td></tr></table></figure><p>在本人的项目中，是如下配置，可以避免很多不必要的错误：</p><p><code>build.gradle</code>文件在项目根目录有一个，在Module下也有一个：</p><blockquote><p>/build.gradle</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.1.2'</span></span><br><span class="line">        classpath <span class="string">'me.tatarka:gradle-retrolambda:3.2.5'</span></span><br><span class="line">        classpath <span class="string">'me.tatarka.retrolambda.projectlombok:lombok.ast:0.2.3.a2'</span></span><br><span class="line">    &#125;</span><br><span class="line">    configurations.classpath.exclude <span class="string">group:</span> <span class="string">'com.android.tools.external.lombok'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>/app/build.gradle</p></blockquote><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'me.tatarka.retrolambda'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">...</span><br><span class="line">compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我在使用中多了<a href="https://github.com/evant/android-retrolambda-lombok" target="_blank" rel="noopener">几个配置</a>，不过都是在这个插件的<code>issue</code>里查到的。建议仔细阅读下<a href="https://github.com/evant/gradle-retrolambda" target="_blank" rel="noopener">配置说明</a> ，可以适应一些实际项目中的一些特别需求。</p><h2 id="常见Error及解决方式"><a href="#常见Error及解决方式" class="headerlink" title="常见Error及解决方式"></a>常见Error及解决方式</h2><h3 id="Couldnot-find-property-‘options’-on-task-‘-app-compileDebugJavaWithJack’"><a href="#Couldnot-find-property-‘options’-on-task-‘-app-compileDebugJavaWithJack’" class="headerlink" title="Couldnot find property ‘options’ on task ‘:app:compileDebugJavaWithJack’."></a>Couldnot find property ‘options’ on task ‘:app:compileDebugJavaWithJack’.</h3><p><strong>原因</strong>：使用Google官方的方式有一定的兼容性，使用Jack时不能同时使用APT，如果使用butterknife、Dagger等使用了APT的注解框架就不行了</p><p><strong>解决方案</strong>：使用retrolambda的兼容插件的方式启用lambda</p><h3 id="Doesn’t-seem-to-correctly-use-modified-lombok-version"><a href="#Doesn’t-seem-to-correctly-use-modified-lombok-version" class="headerlink" title="Doesn’t seem to correctly use modified lombok version"></a>Doesn’t seem to correctly use modified lombok version</h3><p><strong>原因</strong>：<a href="https://github.com/evant/android-retrolambda-lombok/issues/4" target="_blank" rel="noopener">参见这里</a></p><p><strong>解决方案</strong>：按照我上面写的就不会出现这个问题了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于想尝鲜的的开发者，启用Lamdba是个不错的选择，毕竟这个东西会慢慢普及的。下面是一些为想了解更多Lamdba使用方法的朋友搜集的资料以及本文参考的文章：</p><ul><li><a href="http://www.jianshu.com/p/5fc2b3362702" target="_blank" rel="noopener">jdk1.8新特性之lambda表达式及在Android Studio中的使用</a></li><li><a href="http://www.importnew.com/16436.html" target="_blank" rel="noopener">Java8 lambda表达式10个示例</a></li><li><a href="http://www.importnew.com/10360.html" target="_blank" rel="noopener">Java 8简明教程</a></li><li><a href="http://blog.csdn.net/yuhanghate/article/details/51544201" target="_blank" rel="noopener">Error:Could not find property ‘options’ on task ‘:app:compileDebugJavaWithJack’.</a></li><li><a href="https://github.com/evant/android-retrolambda-lombok/issues/4" target="_blank" rel="noopener">Doesn’t seem to correctly use modified lombok version</a></li><li><a href="https://github.com/evant/gradle-retrolambda" target="_blank" rel="noopener">retrolambda插件</a></li></ul><blockquote><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 开发指南-0</title>
      <link href="/2016/06/28/androidTutorials-0/"/>
      <url>/2016/06/28/androidTutorials-0/</url>
      
        <content type="html"><![CDATA[<p>无意间发现一个网站，主打IOS方面的教程，然而作为一个Android开发者，我就找了下网站里有没有Android的教程，还真有，这里就翻译一下。</p><blockquote><p>翻译目标教程：<a href="https://www.raywenderlich.com/category/android" target="_blank" rel="noopener">https://www.raywenderlich.com/category/android</a></p></blockquote><h2 id="Android-开发指南"><a href="#Android-开发指南" class="headerlink" title="Android 开发指南"></a>Android 开发指南</h2><p>想用 <code>Java</code> 来开发 <code>Android APP</code> 吗？<br>看看我们收集的超过15免费安卓开发教程，用覆盖所有你知道的知识来开始!</p><blockquote><p>注意:网站所有的Android教程使用Java。如果您是初次接触Java，一定要先读一本Java主题的书。</p></blockquote><a id="more"></a><h3 id="Getting-Started-开始"><a href="#Getting-Started-开始" class="headerlink" title="Getting Started 开始"></a>Getting Started 开始</h3><p>开始的最好方法是通过学习我们的<a href="https://www.raywenderlich.com/120177/beginning-android-development-tutorial-installing-android-studio" target="_blank" rel="noopener">开始Android开发</a>系列教程。<br>如果你需要快速学习Java，看看我们的 <a href="https://www.raywenderlich.com/110452/java-for-android" target="_blank" rel="noopener">Java For Android 教程</a>和<a href="https://www.raywenderlich.com/119175/java-for-android-cheat-sheet-and-quick-reference" target="_blank" rel="noopener">cheat sheet 备忘录</a>。</p><ul><li><a href="https://www.raywenderlich.com/110452/java-for-android" target="_blank" rel="noopener">Java For Android</a></li></ul><ul><li><a href="https://www.raywenderlich.com/119175/java-for-android-cheat-sheet-and-quick-reference" target="_blank" rel="noopener">Java for Android 备忘录和速记</a></li></ul><ul><li><a href="https://www.raywenderlich.com/120177/beginning-android-development-tutorial-installing-android-studio" target="_blank" rel="noopener">开始Android开发教程: 安装 Android Studio</a></li></ul><ul><li><a href="https://www.raywenderlich.com/120508/beginning-android-development-tutorial-android-studio" target="_blank" rel="noopener">开始Android开发教程:介绍 Android Studio</a></li></ul><h3 id="Core-Concepts-核心概念"><a href="#Core-Concepts-核心概念" class="headerlink" title="Core Concepts 核心概念"></a>Core Concepts 核心概念</h3><p>一旦你已经学习了基础知识，你应该了解Android开发所需要知道的一些核心概念，如<code>activities</code>（活动）、<code>fragments</code> （片段）,<code>intents</code> （意图）,一些重要的设计模式。</p><ul><li><a href="https://www.raywenderlich.com/103044/android-intents-tutorial" target="_blank" rel="noopener">Android: Intents 教程</a></li></ul><ul><li><a href="https://www.raywenderlich.com/109843/common-design-patterns-for-android" target="_blank" rel="noopener">Android 常见的设计模式</a></li></ul><ul><li><a href="https://www.raywenderlich.com/116580/introduction-to-android-activities-tutorial" target="_blank" rel="noopener">介绍 Android Activities 的教程</a></li></ul><ul><li><a href="https://www.raywenderlich.com/117838/introduction-to-android-fragments-tutorial" target="_blank" rel="noopener">介绍 Android Fragments 的教程</a></li></ul><h3 id="User-Interface-用户界面"><a href="#User-Interface-用户界面" class="headerlink" title="User Interface 用户界面"></a>User Interface 用户界面</h3><p>创建一个Android应用的一个重要组成部分是创建一个用户界面。在本节中,您将学习如何创建用户界面外观和了解各种屏幕尺寸。</p><ul><li><a href="https://www.raywenderlich.com/103367/material-design" target="_blank" rel="noopener">Android: Material Design 介绍</a></li></ul><ul><li><a href="https://www.raywenderlich.com/114066/adaptive-ui-android-tutorial" target="_blank" rel="noopener">Adaptive UI in Android Tutorial 自适应界面</a></li></ul><ul><li><a href="https://www.raywenderlich.com/124438/android-listview-tutorial" target="_blank" rel="noopener">Android ListView 教程</a></li></ul><ul><li><a href="https://www.raywenderlich.com/126528/android-recyclerview-tutorial" target="_blank" rel="noopener">Android RecyclerView 教程</a></li></ul><h3 id="其他-Android-教程"><a href="#其他-Android-教程" class="headerlink" title="其他 Android 教程"></a>其他 Android 教程</h3><p>别急，还有更多！在本节中,您将学习如何使用不同的Android SDK版本，如何分发你的应用程序到Android应用程序商店,等等。</p><ul><li><a href="https://www.raywenderlich.com/103540/geofences-googleapiclient" target="_blank" rel="noopener">Geofences on Android with GoogleApiClient</a></li></ul><ul><li><a href="https://www.raywenderlich.com/118966/android-sdk-versions-tutorial" target="_blank" rel="noopener">Android SDK 版本教程</a></li></ul><ul><li><a href="https://www.raywenderlich.com/122114/android-app-distribution-tutorial-zero-google-play-store" target="_blank" rel="noopener">Android App 分发教程: 从零到 Google Play Store</a></li></ul><ul><li><a href="https://www.raywenderlich.com/124936/whats-new-android-studio-2-0" target="_blank" rel="noopener">Android Studio 2.0 有什么新东西？</a></li></ul><p>后续内容翻译中…</p><blockquote><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android必知必会-Android Studio修改包名</title>
      <link href="/2016/06/15/android-studio-rename-package/"/>
      <url>/2016/06/15/android-studio-rename-package/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司做相似产品较多，一般都是以某个产品为基础修改，逐步替换设计图的切图。这个就会导致需要经常为Copy的项目修改包名。<br>这里是参考一些网上的说法，结合自身实战经验加以完善，特此分享给同行们，避免不必要的弯路。</p><a id="more"></a><h2 id="Android-Studio修改包名"><a href="#Android-Studio修改包名" class="headerlink" title="Android Studio修改包名"></a>Android Studio修改包名</h2><h3 id="1-修改包显示方式"><a href="#1-修改包显示方式" class="headerlink" title="1.修改包显示方式"></a>1.修改包显示方式</h3><p>如下图所示：<br><img src="http://img.blog.csdn.net/20160615174836929" alt="这里写图片描述"></p><p>通过修改包显示方式，我们可以更方便的修改包名。</p><h3 id="2-修改包名"><a href="#2-修改包名" class="headerlink" title="2.修改包名"></a>2.修改包名</h3><p>经过1中的操作，我们可以随意修改包的某个节点</p><ul><li>选中所要修改包的节点</li><li>右键后选中-&gt;<code>Refactor</code>-&gt;<code>Rename</code></li><li>在弹窗里输入要修改成什么名字，确认</li><li>在弹窗里选择 修改<code>package</code></li></ul><h3 id="3-后续操作"><a href="#3-后续操作" class="headerlink" title="3.后续操作"></a>3.后续操作</h3><ol><li>修改当前<code>Module</code>的<code>build.gradle</code>文件中的<code>applicationId</code>,改为跟你的包名一致；</li><li>修改当前<code>Module</code>的<code>AndroidManifest.xml</code>文件中的<code>manifest</code>节点里的<code>package</code>属性值，改为跟你的包名一致。</li></ol><p>以上两个后续操作缺一不可，否则会造成很多奇特的Bug，比如<code>Id</code>没有错误且存在的情况下，提示找不到<code>id</code>；还有找不到资源、某些<code>Activity</code> 无法启动等等的Bug。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上「3.后续操作」里的第二操作是很多人都容易忽略的地方，不修改的话一时间也不会出现问题，如果忽略里，以后遇到无法解决的Bug后可能需要很久才会意识到<code>AndroidManifest.xml</code> 包名的问题。</p><blockquote><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAMP显示文件列表</title>
      <link href="/2016/06/14/mamp-list-file/"/>
      <url>/2016/06/14/mamp-list-file/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>MAMP是Mac下的一个PHP+Nginx+MySQL的集成环境，支持多站点，不同版本PHP。<br>今天有人请教MAMP如何显示文件列表的问题，这里记录一下。</p><a id="more"></a><h3 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3><p>一个网站为了安全考虑，默认是禁止访问目录下的文件列表的。<br>当你请求一个目录时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line"></span><br><span class="line">cond1=&gt;condition: 是否存在index文件列表里的文件？</span><br><span class="line">cond2=&gt;condition: 是否允许显示文件列表？</span><br><span class="line">cond3=&gt;condition: 是否指定了404页面？</span><br><span class="line"></span><br><span class="line">op1=&gt;operation: 显示默认的文件</span><br><span class="line">op2=&gt;operation: 显示文件列表</span><br><span class="line">op3=&gt;operation: 显示指定的404页面</span><br><span class="line">op4=&gt;operation: 显示服务器级的404错误</span><br><span class="line"></span><br><span class="line">st-&gt;cond1-&gt;e</span><br><span class="line">cond1(yes)-&gt;op1-&gt;e</span><br><span class="line">cond1(no)-&gt;cond2(bottom)</span><br><span class="line"></span><br><span class="line">cond2(yes)-&gt;op2-&gt;e</span><br><span class="line">cond2(no)-&gt;cond3(right)</span><br><span class="line"></span><br><span class="line">cond3(yes)-&gt;op3-&gt;e</span><br><span class="line">cond3(no)-&gt;op4-&gt;e</span><br></pre></td></tr></table></figure><ul><li>默认的index文件列表（一般是index.html,index.htm,index.php）</li><li>网站配置里404相关说明，可以指定404时访问的文件<h2 id="配置MAMP"><a href="#配置MAMP" class="headerlink" title="配置MAMP"></a>配置MAMP</h2>如图所示：<br><img src="http://img.blog.csdn.net/20160614185258257" alt="这里写图片描述"></li></ul><ol><li>勾选 Indexs</li><li>设置Directory index的值为<code>*</code></li></ol><p>这里有配置Nginx的配置文件开启访问文件列表的方式：</p><blockquote><p><a href="http://blog.csdn.net/testcs_dn/article/details/39644147" target="_blank" rel="noopener">http://blog.csdn.net/testcs_dn/article/details/39644147</a></p></blockquote><p>PS:</p><blockquote><p>你可以关注的我 <a href="https://github.com/likfe" target="_blank" rel="noopener">Github</a>、<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">CSDN</a> 和 <a href="http://weibo.com/zyansen" target="_blank" rel="noopener">微博</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> MAMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AMH 5.X下安装 Flarum</title>
      <link href="/2016/06/12/amh-install-flarum/"/>
      <url>/2016/06/12/amh-install-flarum/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近无意间发现几个开源软件的<code>Bug反馈系统</code>使用的是<strong>Flarum</strong>，Flarum是一款优雅简洁论坛软件，看起来还是相当不错的，一时抑制不住想要尝试一下。</p><p>由于服务器使用的是AMH集成环境，它相对于通常的直接安装环境有很多的区别，这导致安装过程中产生里不少问题。这里做个总结。</p><h3 id="Flarum"><a href="#Flarum" class="headerlink" title="Flarum"></a>Flarum</h3><p>Flarum 是一款优雅简洁论坛软件，让在线交流变得更加轻松愉快。</p><a id="more"></a><ul><li><a href="https://discuss.flarum.org" target="_blank" rel="noopener">官网</a></li><li><a href="http://www.flarum.org.cn" target="_blank" rel="noopener">中文站</a></li></ul><h3 id="AMH"><a href="#AMH" class="headerlink" title="AMH"></a>AMH</h3><p><a href="https://amh.sh" target="_blank" rel="noopener">AMH</a> 是国内首个开源的主机面板，AMH 支持用户自由弹性组建运行环境与切换环境，您可以下载安装不同版本的WEB服务器、数据库、脚本软件自由组合创建您需要的运行环境。</p><p>我使用的是<code>AMH5.X</code>的付费版本，<code>4.X</code>的免费版本也可以参考本教程。</p><p>目前服务器环境是LNMP：</p><blockquote><p>CentOS-6.6 64位</p><p>lnmp-2.5</p><p>mysql-generic-5.5.40</p><p>nginx-generic-1.6.0</p><p>php-7.0</p></blockquote><h3 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h3><p>Composer是 PHP 用来管理依赖（dependency）关系的工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer 会帮你安装这些依赖的库文件。</p><ul><li><a href="https://getcomposer.org" target="_blank" rel="noopener">官网</a></li><li><a href="http://www.phpcomposer.com" target="_blank" rel="noopener">中文站</a></li></ul><p>Composer是安装Flarum的必要工具。</p><h2 id="安装PHP扩展"><a href="#安装PHP扩展" class="headerlink" title="安装PHP扩展"></a>安装PHP扩展</h2><p>这里需要安装Flarum所需要的必要的PHP扩展，先看下系统需求：</p><blockquote><p>Flarum 系统需求</p><p>服务器： Apache (需要支持 mod_rewrite)、Nginx、Lighttpd<br>PHP 5.5+，需要开启的扩展：mbstring, pdo_mysql, openssl, json, gd, dom, fileinfo<br>MySQL 5.5+</p></blockquote><p><strong>特别注意：</strong>PHP是5.5+、MySQL 5.5+，如果版本过低可以使用AMH安装更高版本，AMH支持多版本PHP和MySQL。</p><h3 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h3><ol><li>登录到AMH的管理面板</li><li>软件下载 &gt; fileinfo-1.0 &gt; 下载并安装到对应的环境</li><li>软件下载 &gt; mcrypt-1.0 &gt; 下载并安装到对应的环境</li><li>软件下载 &gt; pdo_mysql-1.0 &gt; 下载并安装到对应的环境</li></ol><h2 id="安装Composer"><a href="#安装Composer" class="headerlink" title="安装Composer"></a>安装Composer</h2><p>Flarum官网的文档要求使用Composer命令行的方式进行安装，所以需要先安装Composer：</p><p>使用SSH方式登录服务器之后：执行</p><p><code>curl -sS https://getcomposer.org/installer | php</code></p><blockquote><p>注意： 如果上述方法由于某些原因失败了，你还可以通过 php &gt;下载安装器：</p></blockquote><p><code>php -r &quot;readfile(&#39;https://getcomposer.org/installer&#39;);&quot; | php</code></p><p>这里你可能会遇到 <code>-bash php command not found</code>的错误提示，请参考下文的<strong>问题集锦</strong> 。</p><p>PS：<a href="http://docs.phpcomposer.com/00-intro.html" target="_blank" rel="noopener">安装Composer文档</a></p><h2 id="安装Flarum"><a href="#安装Flarum" class="headerlink" title="安装Flarum"></a>安装Flarum</h2><p>环境搭建好了，这里讲解安装Flarum的过程</p><blockquote><p><a href="http://flarum.org/docs/installation/" target="_blank" rel="noopener">官方安装文档</a></p></blockquote><ol><li>在AMH控制面板下创建好一个站点（这里指定为<code>A站点</code>），并做好域名解析，确认可以正常访问</li><li>删除<code>A站点</code>下的所有文件</li><li>创建好一个Flarum使用的MySQL数据库和对应的用户</li><li>SSH下进入<code>A站点</code>根目录（<code>cd /home/wwwroot/环境/domain/主域名/web/</code>）</li><li>执行安装命令：<code>composer create-project flarum/flarum . --stability=beta</code></li><li>配置<code>A站点的Nginx</code>配置文件（<code>/home/wwwroot/环境/vhost/主域名.conf</code>）：参见<a href="http://flarum.org/docs/installation/" target="_blank" rel="noopener">官方安装文档</a>。特别注意：<code>location ~* \.php$</code>下的参数以自动生成的为准，还需要删除自动生成的ErrorPage的配置信息。</li><li>重载Nginx并访问<code>A站点</code>，填写相关安装信息。（遇到文件读写权限问题，查看下文问题集锦）</li></ol><h3 id="安装Flarum中文语言包"><a href="#安装Flarum中文语言包" class="headerlink" title="安装Flarum中文语言包"></a>安装Flarum中文语言包</h3><p>为了便于操作，我们安装中文语言包来进行默认语言的切换。</p><p>尝试了几种安装方式，这里推荐使用命令行安装：</p><ol><li>SSH下进入<code>A站点</code>根目录</li><li>执行<code>composer require jsthon/flarum-ext-simplified-chinese</code>即可</li><li>访问<code>A站点</code>，进入后台修改勾选中文扩展，并修改默认语言。</li></ol><blockquote><p>其他语言和扩展：<a href="https://discuss.flarum.org/d/1534-extension-list" target="_blank" rel="noopener">https://discuss.flarum.org/d/1534-extension-list</a></p></blockquote><h2 id="问题集锦"><a href="#问题集锦" class="headerlink" title="问题集锦"></a>问题集锦</h2><p>可能遇到的问题：</p><h3 id="bash-php-command-not-found"><a href="#bash-php-command-not-found" class="headerlink" title="-bash php command not found"></a>-bash php command not found</h3><p>Composer的安装和使用是使用的php-cli的方式，AMH支持多版本的PHP，环境变量里并未指定php-cli的版本，这里需要我们把指定版本的<a href="http://blog.csdn.net/ys743276112/article/details/51648243" target="_blank" rel="noopener">PHP加入到环境变量</a>里。</p><p>在<code>~/.bash_profile</code>里加入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/php-版本/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure><p>保存修改后执行<code>source ~/.bash_profile</code>使得修改生效。</p><p>PS：如果你使用的是其他发行版的Linux，请自行搜索如何设置<code>PHP加入到环境变量</code> 。</p><h3 id="requires-ext-fileinfo-或者-request-for-intervention-image"><a href="#requires-ext-fileinfo-或者-request-for-intervention-image" class="headerlink" title="requires ext-fileinfo * 或者 request for intervention/image"></a>requires ext-fileinfo * 或者 request for intervention/image</h3><blockquote><p>参见：</p><ul><li><a href="http://stackoverflow.com/questions/24850136/i-have-ext-fileinfo-but-composer-says-it-is-missing" target="_blank" rel="noopener">http://stackoverflow.com/questions/24850136/i-have-ext-fileinfo-but-composer-says-it-is-missing</a></li><li><a href="http://amh.sh/bbs/post-6149-1-1.htm" target="_blank" rel="noopener">http://amh.sh/bbs/post-6149-1-1.htm</a></li></ul></blockquote><p>简单来说，就是咱们在AMH里安装的PHP扩展并没有影响到<code>php-cli</code>方式运行PHP的配置，需要我们手动同步一下配置：</p><p><code>cp /home/wwwroot/环境/etc/amh-php.ini /usr/local/php-版本/etc/php.ini</code></p><p>重载Nginx即可生效。</p><h3 id="Please-chmod-this-directory-to-0775"><a href="#Please-chmod-this-directory-to-0775" class="headerlink" title="Please chmod this directory to 0775"></a>Please chmod this directory to 0775</h3><p>当你访问通过composer安装好的<code>A站点</code>时，遇到里类似的权限读写问题，对于AMH环境，我们需要执行：</p><p><code>sudo chown www:www -R  /home/wwwroot/环境/domain/主域名/web</code></p><p>这里有一些讨论：</p><ul><li><a href="https://discuss.flarum.org/d/823-directorys-are-not-writable/46" target="_blank" rel="noopener">https://discuss.flarum.org/d/823-directorys-are-not-writable/46</a></li><li><a href="https://discuss.flarum.org/d/2209-directory-not-writable/3" target="_blank" rel="noopener">https://discuss.flarum.org/d/2209-directory-not-writable/3</a></li></ul><p>上面的讨论使用的用户组和AMH的不一样，AMH网站的用户组是<code>www</code>，结合实际情况才能真正解决问题。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>查看我们的成果：<a href="http://forum.inkcode.cc" target="_blank" rel="noopener">Cafeting的论坛</a></p><blockquote><p><a href="http://flarum.org/docs/" target="_blank" rel="noopener">官方文档</a> 适应最新版的Flarum，推荐<br><a href="https://www.gitbook.com/book/justjavac/flarum" target="_blank" rel="noopener">中文文档</a> 较旧，有一定参考意义</p></blockquote><p>AMH集成环境相对于通常的直接安装环境有很多的区别，使用的时候务必要考虑到。</p><blockquote><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> AMH </tag>
            
            <tag> Flarum </tag>
            
            <tag> PHP </tag>
            
            <tag> Composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android必知必会-带列表的地图POI周边搜索</title>
      <link href="/2016/05/30/mapPoiSearch/"/>
      <url>/2016/05/30/mapPoiSearch/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>先看效果图：（以公司附近的国贸为中心点）</p><p><img src="https://raw.githubusercontent.com/likfe/imagerepo/dev/img/20200505225541.gif" alt></p><p>上面是地图，下面是地理位置列表，有的只有地理位置列表（QQ动态的位置），这是个很常见的功能。它有个专门的叫法：<strong>POI周边搜索</strong>。</p><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>这个效果实现起来其实很简单，不过需要你先阅读下地图的API，这里使用的是高德地图的Android SDK，SDK的配置这里不作讲解，文末会放一些链接供学习。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ol><li>利用地图的定位功能，获取用户当前的位置</li><li>根据获得的位置信息调用POI搜索，获取位置列表</li><li>ListView展示位置列表</li><li>用户拖动地图，获取地图中心坐标的位置信息，并执行2~3的步骤</li></ol><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><p><strong>Layout:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.amap.api.maps2d.MapView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/map_local"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/map_list"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:divider</span>=<span class="string">"@color/space"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:dividerHeight</span>=<span class="string">"1dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scrollbars</span>=<span class="string">"none"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Activity:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">New_LocalActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">LocationSource</span>,</span></span><br><span class="line"><span class="class">        <span class="title">AMapLocationListener</span>, <span class="title">AMap</span>.<span class="title">OnCameraChangeListener</span>, <span class="title">PoiSearch</span>.<span class="title">OnPoiSearchListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BindView</span>(R.id.map_local)</span><br><span class="line">    MapView mapView;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.map_list)</span><br><span class="line">    ListView mapList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_LAT = <span class="string">"lat"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_LNG = <span class="string">"lng"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_DES = <span class="string">"des"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AMapLocationClient mLocationClient;</span><br><span class="line">    <span class="keyword">private</span> LocationSource.OnLocationChangedListener mListener;</span><br><span class="line">    <span class="keyword">private</span> LatLng latlng;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> AMap aMap;</span><br><span class="line">    <span class="keyword">private</span> String deepType = <span class="string">""</span>;<span class="comment">// poi搜索类型</span></span><br><span class="line">    <span class="keyword">private</span> PoiSearch.Query query;<span class="comment">// Poi查询条件类</span></span><br><span class="line">    <span class="keyword">private</span> PoiSearch poiSearch;</span><br><span class="line">    <span class="keyword">private</span> PoiResult poiResult; <span class="comment">// poi返回的结果</span></span><br><span class="line">    <span class="keyword">private</span> PoiOverlay poiOverlay;<span class="comment">// poi图层</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;PoiItem&gt; poiItems;<span class="comment">// poi数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PoiSearch_adapter adapter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_new__local);</span><br><span class="line">        ButterKnife.bind(<span class="keyword">this</span>);</span><br><span class="line">        mapView.onCreate(savedInstanceState);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (aMap == <span class="keyword">null</span>) &#123;</span><br><span class="line">            aMap = mapView.getMap();</span><br><span class="line">            aMap.setOnCameraChangeListener(<span class="keyword">this</span>);</span><br><span class="line">            setUpMap();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        deepType = <span class="string">"餐饮"</span>;<span class="comment">//这里以餐饮为例</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-------- 定位 Start ------</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setUpMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mLocationClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mLocationClient = <span class="keyword">new</span> AMapLocationClient(getApplicationContext());</span><br><span class="line">            AMapLocationClientOption mLocationOption = <span class="keyword">new</span> AMapLocationClientOption();</span><br><span class="line">            <span class="comment">//设置定位监听</span></span><br><span class="line">            mLocationClient.setLocationListener(<span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">//设置为高精度定位模式</span></span><br><span class="line">            mLocationOption.setOnceLocation(<span class="keyword">true</span>);</span><br><span class="line">            mLocationOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy);</span><br><span class="line">            <span class="comment">//设置定位参数</span></span><br><span class="line">            mLocationClient.setLocationOption(mLocationOption);</span><br><span class="line">            mLocationClient.startLocation();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 自定义系统定位小蓝点</span></span><br><span class="line">        MyLocationStyle myLocationStyle = <span class="keyword">new</span> MyLocationStyle();</span><br><span class="line">        myLocationStyle.myLocationIcon(BitmapDescriptorFactory</span><br><span class="line">                .fromResource(R.drawable.location_marker));<span class="comment">// 设置小蓝点的图标</span></span><br><span class="line">        myLocationStyle.strokeColor(Color.BLACK);<span class="comment">// 设置圆形的边框颜色</span></span><br><span class="line">        myLocationStyle.radiusFillColor(Color.argb(<span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">180</span>));<span class="comment">// 设置圆形的填充颜色</span></span><br><span class="line">        myLocationStyle.strokeWidth(<span class="number">1.0f</span>);<span class="comment">// 设置圆形的边框粗细</span></span><br><span class="line">        aMap.setMyLocationStyle(myLocationStyle);</span><br><span class="line">        aMap.setLocationSource(<span class="keyword">this</span>);<span class="comment">// 设置定位监听</span></span><br><span class="line">        aMap.getUiSettings().setMyLocationButtonEnabled(<span class="keyword">true</span>);<span class="comment">// 设置默认定位按钮是否显示</span></span><br><span class="line">        aMap.setMyLocationEnabled(<span class="keyword">true</span>);<span class="comment">// 设置为true表示显示定位层并可触发定位，false表示隐藏定位层并不可触发定位，默认是false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始进行poi搜索</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doSearchQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        aMap.setOnMapClickListener(<span class="keyword">null</span>);<span class="comment">// 进行poi搜索时清除掉地图点击事件</span></span><br><span class="line">        <span class="keyword">int</span> currentPage = <span class="number">0</span>;</span><br><span class="line">        query = <span class="keyword">new</span> PoiSearch.Query(<span class="string">""</span>, deepType, city);<span class="comment">// 第一个参数表示搜索字符串，第二个参数表示poi搜索类型，第三个参数表示poi搜索区域（空字符串代表全国）</span></span><br><span class="line">        query.setPageSize(<span class="number">20</span>);<span class="comment">// 设置每页最多返回多少条poiitem</span></span><br><span class="line">        query.setPageNum(currentPage);<span class="comment">// 设置查第一页</span></span><br><span class="line">        LatLonPoint lp = <span class="keyword">new</span> LatLonPoint(latlng.latitude, latlng.longitude);</span><br><span class="line"></span><br><span class="line">        poiSearch = <span class="keyword">new</span> PoiSearch(<span class="keyword">this</span>, query);</span><br><span class="line">        poiSearch.setOnPoiSearchListener(<span class="keyword">this</span>);</span><br><span class="line">        poiSearch.setBound(<span class="keyword">new</span> PoiSearch.SearchBound(lp, <span class="number">5000</span>, <span class="keyword">true</span>));</span><br><span class="line">        <span class="comment">// 设置搜索区域为以lp点为圆心，其周围2000米范围</span></span><br><span class="line">        poiSearch.searchPOIAsyn();<span class="comment">// 异步搜索</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLocationChanged</span><span class="params">(AMapLocation aMapLocation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mListener != <span class="keyword">null</span> &amp;&amp; aMapLocation != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (aMapLocation.getErrorCode() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 显示我的位置</span></span><br><span class="line">                mListener.onLocationChanged(aMapLocation);</span><br><span class="line">                <span class="comment">//设置第一次焦点中心</span></span><br><span class="line">                latlng = <span class="keyword">new</span> LatLng(aMapLocation.getLatitude(), aMapLocation.getLongitude());</span><br><span class="line">                aMap.animateCamera(CameraUpdateFactory.newLatLngZoom(latlng, <span class="number">14</span>), <span class="number">1000</span>, <span class="keyword">null</span>);</span><br><span class="line">                city = aMapLocation.getProvince();</span><br><span class="line">                doSearchQuery();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                String errText = <span class="string">"定位失败,"</span> + aMapLocation.getErrorCode() + <span class="string">": "</span> + aMapLocation.getErrorInfo();</span><br><span class="line">                Log.e(<span class="string">"AmapErr"</span>, errText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activate</span><span class="params">(OnLocationChangedListener listener)</span> </span>&#123;</span><br><span class="line">        mListener = listener;</span><br><span class="line">        mLocationClient.startLocation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deactivate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mListener = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (mLocationClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mLocationClient.stopLocation();</span><br><span class="line">            mLocationClient.onDestroy();</span><br><span class="line">        &#125;</span><br><span class="line">        mLocationClient = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCameraChange</span><span class="params">(CameraPosition cameraPosition)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCameraChangeFinish</span><span class="params">(CameraPosition cameraPosition)</span> </span>&#123;</span><br><span class="line">        latlng = cameraPosition.target;</span><br><span class="line">        aMap.clear();</span><br><span class="line">        aMap.addMarker(<span class="keyword">new</span> MarkerOptions().position(latlng));</span><br><span class="line">        doSearchQuery();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPoiSearched</span><span class="params">(PoiResult result, <span class="keyword">int</span> rCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rCode == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span> &amp;&amp; result.getQuery() != <span class="keyword">null</span>) &#123;<span class="comment">// 搜索poi的结果</span></span><br><span class="line">                <span class="keyword">if</span> (result.getQuery().equals(query)) &#123;<span class="comment">// 是否是同一条</span></span><br><span class="line">                    poiResult = result;</span><br><span class="line">                    poiItems = poiResult.getPois();<span class="comment">// 取得第一页的poiitem数据，页数从数字0开始</span></span><br><span class="line">                    List&lt;SuggestionCity&gt; suggestionCities = poiResult</span><br><span class="line">                            .getSearchSuggestionCitys();</span><br><span class="line">                    <span class="keyword">if</span> (poiItems != <span class="keyword">null</span> &amp;&amp; poiItems.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        adapter = <span class="keyword">new</span> PoiSearch_adapter(<span class="keyword">this</span>, poiItems);</span><br><span class="line">                        mapList.setAdapter(adapter);</span><br><span class="line">                        mapList.setOnItemClickListener(<span class="keyword">new</span> mOnItemClickListener());</span><br><span class="line"></span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        Logger.d(<span class="string">"无结果"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Logger.e(<span class="string">"无结果"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rCode == <span class="number">27</span>) &#123;</span><br><span class="line">            Logger.e(<span class="string">"error_network"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rCode == <span class="number">32</span>) &#123;</span><br><span class="line">            Logger.e(<span class="string">"error_key"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Logger.e(<span class="string">"error_other："</span> + rCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPoiItemSearched</span><span class="params">(PoiItem poiItem, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-------- 定位 End ------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        mLocationClient.startLocation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        mLocationClient.stopLocation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mLocationClient.onDestroy();</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">mOnItemClickListener</span> <span class="keyword">implements</span> <span class="title">AdapterView</span>.<span class="title">OnItemClickListener</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">            intent.putExtra(KEY_LAT, poiItems.get(position).getLatLonPoint().getLatitude());</span><br><span class="line">            intent.putExtra(KEY_LNG, poiItems.get(position).getLatLonPoint().getLongitude());</span><br><span class="line">            intent.putExtra(KEY_DES, poiItems.get(position).getTitle());</span><br><span class="line">            setResult(RESULT_OK, intent);</span><br><span class="line">            finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>示例中的Activity是使用<code>startActivityForResult</code>方式启动的，最后点击位置之后会返回点选的位置信息。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我第一次准备实现上述的效果时，也是不知所措，因为还没有对地图API有比较全面的认识，后来看了不少资料，自己便结合了一下地图的功能点，实现了设计图中的效果。</p><p>下面是一些资料，初学者务必先学习基础API的应用：</p><ul><li><a href="http://lbs.amap.com" target="_blank" rel="noopener">高德开发者中心</a></li><li><a href="http://www.imooc.com/learn/339" target="_blank" rel="noopener">慕课网-如何使用高德Android SDK进行LBS的开发</a></li><li><a href="http://blog.csdn.net/ys743276112/article/details/51519223" target="_blank" rel="noopener">带列表的地图POI周边搜索</a></li></ul><p>如果你有什么问题，可以在博客上留言。</p><p>PS:</p><blockquote><p>你可以关注的我 <a href="https://github.com/likfe" target="_blank" rel="noopener">Github</a>、<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">CSDN</a> 和 <a href="http://weibo.com/zyansen" target="_blank" rel="noopener">微博</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android必知必会-自定义Scrollbar样式</title>
      <link href="/2016/05/16/diyScrollbar/"/>
      <url>/2016/05/16/diyScrollbar/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>设计师给的设计图完全依照 IOS 的标准来的，导致很多细节的控件都得自己重写，最近的设计图中有显示滚动条，Android 默认的滚动条样式（带描边）和设计图格格不入，无奈，只好研究下自定义 Scrollbar 样式。这里稍微整理下。<br><a id="more"></a></p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>在<code>ListView</code>/<code>ScrollView</code>/<code>RecyclerView</code>中添加属性：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 情况A ：垂直滚动条--&gt;</span></span><br><span class="line">android:scrollbars="vertical"</span><br><span class="line">android:scrollbarTrackVertical="@drawable/xxx_vertical_track"</span><br><span class="line">android:scrollbarThumbVertical="@drawable/xxx_vertical_thumb"</span><br><span class="line"><span class="comment">&lt;!-- 情况B ：水平滚动条--&gt;</span></span><br><span class="line">android:scrollbars="horizontal"</span><br><span class="line">android:scrollbarTrackHorizontal="@drawable/xxx_horizontal_track"</span><br><span class="line">android:scrollbarThumbHorizontal="@drawable/xxx_horizontal_thumb"</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 其他通用的属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.定义滚动条的样式和位置 --&gt;</span></span><br><span class="line">android:scrollbarStyle="outsideInset"</span><br><span class="line"><span class="comment">&lt;!-- 2.定义滚动条的大小，垂直时指宽度，水平时指高度 --&gt;</span></span><br><span class="line">android:scrollbarSize="4dp"</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">scrollbarThumbVertical[Horizontal]</td><td style="text-align:center">短条</td></tr><tr><td style="text-align:center">scrollbarTrackVertical[Horizontal]</td><td style="text-align:center">长条，即背景</td></tr></tbody></table><p>即<code>scrollbaTrackxxx</code>，<code>scrollbarThumbxxx</code>自定义的 xml 文件，放在<code>Drawable</code>中，<code>track</code>是指长条，<code>thumb</code>是指短条，然后再 xml 中定义短条和长条的样式。</p><h3 id="需要注意"><a href="#需要注意" class="headerlink" title="需要注意"></a>需要注意</h3><p>其中，<code>scrollbaTrackxxx</code>、<code>scrollbarThumbxxx</code><strong>可以使用</strong>：</p><ul><li>Shape自定义 Drawable</li><li>图片</li><li><code>.9.png</code></li><li><code>@color/xxx</code>的方式使用颜色值</li></ul><p><strong>不可以</strong>直接使用<code>#xxxxxx</code>颜色值</p><h3 id="android-scrollbarStyle"><a href="#android-scrollbarStyle" class="headerlink" title="android:scrollbarStyle"></a>android:scrollbarStyle</h3><p> <code>android:scrollbarStyle</code>可以定义滚动条的样式和位置，可选值有<code>insideOverlay</code>、<code>insideInset</code>、<code>outsideOverlay</code>、<code>outsideInset</code>四种。</p><p>其中<code>inside</code>和<code>outside</code>分别表示是否在 view 的 padding 区域内，<code>overlay</code>和<code>inset</code>表示覆盖在 view 上或是插在 view 后面，所以四种值分别表示：</p><table><thead><tr><th style="text-align:center">属性值</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">insideOverlay</td><td style="text-align:center"><strong>默认值</strong>，表示在padding区域内并且覆盖在view上</td></tr><tr><td style="text-align:center">insideInset</td><td style="text-align:center">表示在padding区域内并且插入在view后面</td></tr><tr><td style="text-align:center">outsideOverlay</td><td style="text-align:center">表示在padding区域外并且覆盖在view上</td></tr><tr><td style="text-align:center">outsideInset</td><td style="text-align:center">表示在padding区域外并且插入在view后面</td></tr></tbody></table><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>下面是两个Demo：</p><p>color:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"red_square"</span>&gt;</span>#CCFF6464<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"transparent"</span>&gt;</span>#00000000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br></pre></td></tr></table></figure><p>drawable:scrollbar_vertical_thumb</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 填充 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#66000000"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 圆角 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"1dp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo 1"></a>Demo 1</h3><p><strong>layout：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">android:scrollbarStyle="outsideOverlay"</span><br><span class="line">android:scrollbarThumbVertical="@drawable/scrollbar_vertical_thumb"</span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">scrollbarTrackVertical设为透明或者直接不设置即可</span></span><br><span class="line"><span class="comment">android:scrollbarTrackVertical="@color/transparent"</span></span><br><span class="line"><span class="comment">再次强调：scrollbarThumbVertical、scrollbarTrackVertical 不可以直接设置为颜色值,但可以使用@color的方式使用颜色值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">android:scrollbarSize="3dp"</span><br><span class="line">android:scrollbars="vertical"</span><br></pre></td></tr></table></figure><h3 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo 2"></a>Demo 2</h3><p><strong>layout：</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">android:scrollbarStyle="outsideOverlay"</span><br><span class="line">android:scrollbarThumbVertical="@color/red_square"</span><br><span class="line">android:scrollbarSize="3dp"</span><br><span class="line">android:scrollbars="vertical"</span><br></pre></td></tr></table></figure></p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><table><thead><tr><th style="text-align:center">默认样式</th><th style="text-align:center">Demo 1</th><th style="text-align:center">Demo 2</th></tr></thead><tbody><tr><td style="text-align:center"><img src="http://img.blog.csdn.net/20160516180441093" alt="default"></td><td style="text-align:center"><img src="http://img.blog.csdn.net/20160516180459625" alt="demo1"></td><td style="text-align:center"><img src="http://img.blog.csdn.net/20160516180511849" alt="demo2"></td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在查资料的过程中，发现滚动条也可以使用代码来画，这里不做过多介绍，有兴趣的可以研究一下。</p><blockquote><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Scrollbar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android必知必会-获取View坐标和长宽的时机</title>
      <link href="/2016/05/13/theTimeGetViewInfo/"/>
      <url>/2016/05/13/theTimeGetViewInfo/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近要实现一个功能，用到了一些属性动画，需要获取一些View的坐标信息，设计图如下：<br><a id="more"></a><br><img src="http://img.blog.csdn.net/20160513160842549" alt="design"></p><p>这里我使用的是<code>DialogFragment</code>来实现的，可以复用。</p><p>先贴一下获取View坐标的一些资料：</p><blockquote><p><a href="http://www.cnblogs.com/mengdd/p/3273284.html" target="_blank" rel="noopener">Android View各种尺寸位置相关的方法探究</a></p><p><a href="http://blog.csdn.net/ys743276112/article/details/51396319" target="_blank" rel="noopener"> Android获得控件在屏幕中的绝对坐标</a></p></blockquote><h3 id="合适的时机"><a href="#合适的时机" class="headerlink" title="合适的时机"></a>合适的时机</h3><p>要想获得View的坐标和长宽，必须要等到View绘制完毕，在平常写代码的生命周期函数内一般是获取不到的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Activity</span></span><br><span class="line">onCreate();</span><br><span class="line">onResume();</span><br><span class="line"><span class="comment">//Fragmen</span></span><br><span class="line">onCreate();</span><br><span class="line">onCreateView();</span><br><span class="line">onResume();</span><br><span class="line">onShow();</span><br><span class="line">setUserVisibleHint();</span><br></pre></td></tr></table></figure><p>以上这些时机都是不行的。</p><p>目前经过测试可用的方法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 对于：Activity</span></span><br><span class="line"><span class="comment"> * 覆写 onWindowFocusChanged(boolean hasFocus)方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onWindowFocusChanged</span><span class="params">(<span class="keyword">boolean</span> hasFocus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onWindowFocusChanged(hasFocus);</span><br><span class="line">        <span class="keyword">int</span>[] location1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>] ;</span><br><span class="line">        view.getLocationInWindow(location1); <span class="comment">//获取在当前窗口内的绝对坐标</span></span><br><span class="line">        <span class="keyword">int</span>[] location2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>] ;</span><br><span class="line">        view.getLocationOnScreen(location2);<span class="comment">//获取在整个屏幕内的绝对坐标</span></span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 对于：Fragmen</span></span><br><span class="line"><span class="comment"> * 在 onCreateView()中为View添加addOnGlobalLayoutListener</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View view = inflater.inflate(R.layout.xxx, container, <span class="keyword">false</span>);</span><br><span class="line">        ViewTreeObserver vto = view.getViewTreeObserver();</span><br><span class="line">        vto.addOnGlobalLayoutListener(<span class="keyword">new</span>  ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//在这里获取View及其子控件的坐标和长宽信息</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      <span class="comment">//do something</span></span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 对于：DialogFragment</span></span><br><span class="line"><span class="comment"> * 在 onCreateDialog()中为View添加addOnGlobalLayoutListener</span></span><br><span class="line"><span class="comment"> * PS: start-end之间的是重点，其他可以不看</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dialog <span class="title">onCreateDialog</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        LayoutInflater inflater = getActivity().getLayoutInflater();</span><br><span class="line">        View view = inflater.inflate(R.layout.xxxx, <span class="keyword">null</span>);</span><br><span class="line">      <span class="comment">//-----获取View及其子控件的坐标和长宽信息 start----</span></span><br><span class="line">      ViewTreeObserver vto = view.getViewTreeObserver();</span><br><span class="line">        vto.addOnGlobalLayoutListener(<span class="keyword">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//在这里获取View及其子控件的坐标和长宽信息</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      <span class="comment">//-----获取View及其子控件的坐标和长宽信息 end----</span></span><br><span class="line">      </span><br><span class="line">        Dialog dialog = <span class="keyword">new</span> Dialog(getActivity(), R.style.CustomCityPickerDialog);</span><br><span class="line">        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        dialog.setContentView(view);</span><br><span class="line">        dialog.setCanceledOnTouchOutside(<span class="keyword">true</span>);</span><br><span class="line">        ButterKnife.bind(<span class="keyword">this</span>, view);</span><br><span class="line">        <span class="comment">// 设置宽度为屏宽、靠近屏幕底部。</span></span><br><span class="line">        Window window = dialog.getWindow();</span><br><span class="line">        window.setBackgroundDrawableResource(R.color.transparent);</span><br><span class="line">        WindowManager.LayoutParams wlp = window.getAttributes();</span><br><span class="line">        wlp.gravity = Gravity.BOTTOM;</span><br><span class="line">        wlp.width = WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">        window.setAttributes(wlp);</span><br><span class="line">        <span class="keyword">return</span> dialog;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h3><p>这是最后的成果：<br><img src="http://o73yhoopc.bkt.clouddn.com/5EAA53013EB5AD8401EBF68B86F60F98.gif" alt="成果"></p><p>下一篇文章将简单总结一下最近学习的属性动画，和如何实现上图中效果。</p><p>PS:</p><blockquote><p>你可以关注的我 <a href="https://github.com/likfe" target="_blank" rel="noopener">Github</a>、<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">CSDN</a> 和 <a href="http://weibo.com/zyansen" target="_blank" rel="noopener">微博</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android项目开发填坑记-9patchPng报错</title>
      <link href="/2016/04/28/9patchAttention/"/>
      <url>/2016/04/28/9patchAttention/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>之前写了一篇文章<a href="http://blog.csdn.net/ys743276112/article/details/45794809" target="_blank" rel="noopener">Android必知必会–NinePatch图片制作</a>详细介绍了Android 9Patch图片的制作和一些Demo展示，这次说明一下9Patch图片的制作的注意事项和遇到相关报错的解决方案。</p><h3 id="一、注意事项"><a href="#一、注意事项" class="headerlink" title="一、注意事项"></a>一、注意事项</h3><p>9Patch图片的<strong>左边框</strong>和<strong>上边框</strong>至少<strong>有一个描点</strong>，<strong>右边框</strong>和<strong>下边框</strong>则<strong>有且只有一段描点</strong>。</p><a id="more"></a><table><thead><tr><th style="text-align:center">边框</th><th style="text-align:center">描点数</th></tr></thead><tbody><tr><td style="text-align:center">左边框</td><td style="text-align:center">>=1</td></tr><tr><td style="text-align:center">上边框</td><td style="text-align:center">>=1</td></tr><tr><td style="text-align:center">右边框</td><td style="text-align:center">非0，仅仅可为1</td></tr><tr><td style="text-align:center">下边框</td><td style="text-align:center">非0，仅仅可为1</td></tr></tbody></table><p><strong>左边框</strong>和<strong>上边框</strong>留白的地方，即告诉系统那里不进行处理，保持原样。</p><h3 id="二、No-marked-region-found-along-edge"><a href="#二、No-marked-region-found-along-edge" class="headerlink" title="二、No marked region found along edge"></a>二、No marked region found along edge</h3><p>与<code>No marked region found along edge</code>类似和相关的，意思是某条边框或者全部的边框没有进行描点。</p><p><strong>解决方法</strong>：检查一下报错的那个9Patch的四条边是否都进行了描点。</p><h3 id="三、Can’t-have-more-than-one-marked-region-along-edge"><a href="#三、Can’t-have-more-than-one-marked-region-along-edge" class="headerlink" title="三、Can’t have more than one marked region along edge."></a>三、Can’t have more than one marked region along edge.</h3><p>与<code>Can&#39;t have more than one marked region along edge.</code>类似和相关的，意思是右边框或者下边框有一个或两边框的描点<strong>超过了一个</strong>，从【注意事项】里我们了解到这两条边框的描点数只能为1。</p><p><strong>解决方法</strong>：检查一下报错的那个9Patch的右边框和下边框是否描点数超过1，有可能只是描点描了一个像素，所以检查的时候建议放大多倍进行检查。</p><blockquote><p>参考: <a href="http://stackoverflow.com/questions/3733471/android-9-patch-png-what-if-i-need-smth-like-a-11-patch-png" target="_blank" rel="noopener">StackOverFlow</a></p></blockquote><blockquote><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android必知必会--GreenDao缓存</title>
      <link href="/2016/04/22/greenDao-session/"/>
      <url>/2016/04/22/greenDao-session/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="http://likfe.github.io/2016/04/22/greenDao-session/" target="_blank" rel="noopener">Github版</a></li><li><a href="http://blog.csdn.net/ys743276112/article/details/50479917" target="_blank" rel="noopener">CSDN版</a></li></ul><p>本篇文章不是介绍GreenDao的配置和基础使用，记录一下GreenDao缓存的问题，帮助遇到同样问题的朋友找到原因和方法，下面是示例：<br><a id="more"></a></p><h3 id="场景重现"><a href="#场景重现" class="headerlink" title="场景重现"></a>场景重现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一次查询</span></span><br><span class="line">List chats = daoSession.getChatSessionDao()</span><br><span class="line">.queryBuilder()</span><br><span class="line">.orderDesc(ChatSessionDao.Properties.Updatetime)</span><br><span class="line">.list();</span><br><span class="line"></span><br><span class="line"><span class="comment">//对数据库中的一条数据进行更新：</span></span><br><span class="line">ChatSession cs = chats.get(<span class="number">0</span>);</span><br><span class="line">Log.d(<span class="string">"body"</span>,cs.getBody());</span><br><span class="line">cs.setBody(cs.getBody() + <span class="string">"new"</span>);</span><br><span class="line">daoSession.getChatSessionDao().update(cs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二次查询</span></span><br><span class="line">List chats = daoSession.getChatSessionDao()</span><br><span class="line">.queryBuilder()</span><br><span class="line">.orderDesc(ChatSessionDao.Properties.Updatetime)</span><br><span class="line">.list();</span><br><span class="line"></span><br><span class="line">Log.d(<span class="string">"body"</span>,chats.get(<span class="number">0</span>).getBody());</span><br></pre></td></tr></table></figure><p>结果发现两次的<code>body</code>的值是一样的，使用工具查看Sqlite数据库，发现<code>body</code>的值已经变化了，也就是说，我们第二次查询并没有真正执行，返回的是第一次查询的结果。如果要解决缓存问题，这里就要用到<code>DaoSession</code>的一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DaoSession.clear();</span><br></pre></td></tr></table></figure><p>在示例代码中应该写在第二次查询前面<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">daoSession.clear();</span><br><span class="line"><span class="comment">//第二次查询</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><p>PS:这个清理缓存的方法，会清除所有表的缓存，目前没有发现可以清除单个表或者某个查询的缓存的方法。</p><h3 id="GreenDao配置与使用"><a href="#GreenDao配置与使用" class="headerlink" title="GreenDao配置与使用"></a>GreenDao配置与使用</h3><p>GreenDao详细的配置和Demo可以参考：</p><blockquote><ol><li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0727/3223.html" target="_blank" rel="noopener">ORM 框架之 greenDAO 使用心得</a></li><li><a href="http://wiki.xby1993.net/doku.php?id=greendao" target="_blank" rel="noopener">GreenDao</a></li></ol></blockquote><p>PS:</p><blockquote><p>你可以关注的我 <a href="https://github.com/likfe" target="_blank" rel="noopener">Github</a>、<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">CSDN</a> 和 <a href="http://weibo.com/zyansen" target="_blank" rel="noopener">微博</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> GreenDao </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android项目开发填坑记-Fragmen的onBackPressed</title>
      <link href="/2016/04/20/fragmen-onBackPressed/"/>
      <url>/2016/04/20/fragmen-onBackPressed/</url>
      
        <content type="html"><![CDATA[<h2 id="知识背景"><a href="#知识背景" class="headerlink" title="知识背景"></a>知识背景</h2><p><code>Fragment</code>在当前的Android开发中，有两种引用方式，一个是 Android 3.0 时加入的，一个是supportV4包中的。这里简称为<code>Fragment3.0</code>和<code>FragmentV4</code>。</p><h2 id="Fragment中的返回"><a href="#Fragment中的返回" class="headerlink" title="Fragment中的返回"></a>Fragment中的返回</h2><p>在Fragment中经常用到自定义标题栏，而<strong>返回按钮</strong>的点击事件一般设置为：<code>getActivity().onBackPressed();</code>，这样可以使得点击返回按钮和点击手机上的返回键的效果一致，即调用所在Activity的<code>onBackPressed();</code>。</p><a id="more"></a><p>那么可能会造成一个问题：</p><p>本来你是想点击返回按钮让当前的<code>Fragment</code>出栈，显示上一个<code>Fragment</code>，但是却关闭了整个<code>Fragment</code>所在的<code>Activity</code>。</p><p>即 启动Activity–&gt;显示FragmentA–&gt;显示FragmentB–&gt;用户点击返回按钮或者手机上的返回键–&gt;退出了Activity。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>下面我们追踪一下代码调用，找找产生这种现象的原因：</p><h3 id="Fragment-3-0的getActivity-onBackPressed"><a href="#Fragment-3-0的getActivity-onBackPressed" class="headerlink" title="Fragment 3.0的getActivity().onBackPressed()"></a><strong>Fragment 3.0</strong>的<code>getActivity().onBackPressed()</code></h3><blockquote><p>Activity类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mActionBar != <span class="keyword">null</span> &amp;&amp; mActionBar.collapseActionView()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!mFragments.getFragmentManager().popBackStackImmediate()) &#123;</span><br><span class="line">            finishAfterTransition();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Fragment-V4的getActivity-onBackPressed"><a href="#Fragment-V4的getActivity-onBackPressed" class="headerlink" title="Fragment V4的getActivity().onBackPressed()"></a><strong>Fragment V4</strong>的<code>getActivity().onBackPressed()</code></h3><blockquote><p>FragmentActivity</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mFragments.getSupportFragmentManager().popBackStackImmediate()) &#123;</span><br><span class="line">            supportFinishAfterTransition();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="真相"><a href="#真相" class="headerlink" title="真相"></a>真相</h3><p>从对代码调用的追踪，发现了真相。<code>Fragment3.0</code>和<code>FragmentV4</code></p><ol><li><code>Fragment3.0</code>的<code>getActivity().onBackPressed()</code>默认调用了<code>Activity</code>的<code>onBackPressed()</code>方法，方法里面使用的<code>getFragmentManager()</code>获取<code>FragmentManager</code>对象弹出栈内的<code>Fragment3.0</code>版的Fragment</li><li><code>FragmentV4</code>的<code>getActivity().onBackPressed()</code>默认调用了<code>FragmentActivity</code>的<code>onBackPressed()</code>方法，方法里面使用的<code>getSupportFragmentManager()</code>获取<code>FragmentManager</code>对象进行弹出栈内的<code>FragmentV4</code>版的Fragment</li></ol><p>简单说就是<code>Fragment3.0</code>要放在继承了<code>Activity</code>的Activity中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXX_Activity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FragmentV4</code>要放在继承了<code>FragmentActivity</code>的Activity中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXX_Activity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者系统默认的 FragmentActivity 的子类 AppCompatActivity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXX_Activity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fragment和Activity版本不匹配时"><a href="#Fragment和Activity版本不匹配时" class="headerlink" title="Fragment和Activity版本不匹配时"></a>Fragment和Activity版本不匹配时</h2><p>开发的时候，或许并不能达到Fragment版本和对应的Activity相匹配的理想状态，那么就有了下面的一个比较完善的解决方案：</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>使用其匹配的Activity类的<code>onBackPressed()</code>方法的代码重写所在的<code>Activity</code>的<code>onBackPressed()</code>方法：</p><p><code>FragmentV4</code>配合继承了<code>Activity</code>的Activity中时：</p><blockquote><p>XXX_Activity extends Activity</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用FragmentActivity的onBackPressed()的代码覆盖</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mFragments.getSupportFragmentManager().popBackStackImmediate()) &#123;</span><br><span class="line">            supportFinishAfterTransition();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>Fragment3.0</code>配合继承了<code>FragmentActivity</code>的Activity中时：</p><blockquote><p>XXX_Activity extends FragmentActivity（或者AppCompatActivity）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用Activity的onBackPressed()的代码覆盖</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mActionBar != <span class="keyword">null</span> &amp;&amp; mActionBar.collapseActionView()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!mFragments.getFragmentManager().popBackStackImmediate()) &#123;</span><br><span class="line">            finishAfterTransition();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于当前 Android Studio 默认新建的 Activity 继承于 <code>AppCompatActivity</code>,所以建议大家使用<code>FragmentV4</code>进行开发，这样能省下不少麻烦，本系列还有一篇文章介绍<code>Fragment3.0</code>使用<code>onAttach</code>时的Bug，而这个对于<code>FragmentV4</code>则没有。<br>传送门：<a href>Android项目开发填坑记-Fragmen的onAttach方法</a></p><p>PS:</p><blockquote><p>你可以关注的我 <a href="https://github.com/likfe" target="_blank" rel="noopener">Github</a>、<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">CSDN</a> 和 <a href="http://weibo.com/zyansen" target="_blank" rel="noopener">微博</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Fragment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android项目开发填坑记-Fragmen的onAttach方法</title>
      <link href="/2016/04/20/fragmen-onAttach/"/>
      <url>/2016/04/20/fragmen-onAttach/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>现在Android开发多使用一个Activity管理多个Fragment进行开发，不免需要两者相互传递数据，一般是给Fragment添加回调接口，让Activity继承并实现。</p><p>回调接口一般都写在Fragment的<code>onAttach()</code>方法中，Fragment 3.0 的<code>onAttach()</code>方法有2个重载，其中一个被废弃，所以通常是：</p><a id="more"></a><blockquote><p>XX_Fragment extends Fragment(Fragment 3.0)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (context <span class="keyword">instanceof</span> OnCoverChangeListener) &#123;</span><br><span class="line">            mListener = (ABC_Listener) context;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(context.toString()</span><br><span class="line">                    + <span class="string">" must implement ABC_Listener"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.onAttach(context);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是在一些特定的Android版本下，这个<code>onAttach(Context context)</code>并未被调用，而是调用了<strong>废弃的</strong><code>onAttach(Activity activity)</code>方法。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如果使用了Fragment 3.0，并且用到了自定义回调，那么为了兼容，需要：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (context <span class="keyword">instanceof</span> OnCoverChangeListener) &#123;</span><br><span class="line">            mListener = (ABC_Listener) context;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(context.toString()</span><br><span class="line">                    + <span class="string">" must implement ABC_Listener"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.onAttach(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SDK API&lt;23时，onAttach(Context)不执行，需要使用onAttach(Activity)。Fragment自身的Bug，v4的没有此问题</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onAttach(activity);</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M) &#123;</span><br><span class="line">            <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> OnCoverChangeListener) &#123;</span><br><span class="line">                mListener = (ABC_Listener) activity;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(activity.toString()</span><br><span class="line">                        + <span class="string">" must implement ABC_Listener"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>建议使用FragmentV4版的，减少不必要的系统自身Bug的处理。</p><p>还有一篇关于FragmentV4、Fragment3.0的<code>onBackPressed();</code>的Bug详解：<br>传送门：<a href>Android项目开发填坑记-Fragmen的onBackPressed</a></p><p><strong>PS</strong>：你可以通过下面的方式和我联系</p><blockquote><ul><li>微博：<a href="http://weibo.com/zyansen" target="_blank" rel="noopener">cafeting</a></li><li>Github： <a href="https://github.com/likfe" target="_blank" rel="noopener">likfe</a></li><li>CSDN：<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">他叫自己Mr.张</a> </li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Fragment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android必知必会-Fragment监听返回键事件</title>
      <link href="/2016/04/14/fragment-backpress/"/>
      <url>/2016/04/14/fragment-backpress/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>项目要求用户注册成功后进入修改个人资料的页面，且不允许返回到上一个页面，资料修改完成后结束当前页面，进入APP主页。</p><p>由于是使用多个Fragment完成注册流程，就需要Fragment监听用户点击手机上的返回按钮，查了一些资料，加上自己使用过程中发现的问题，特此记录，帮助更多有此需求的朋友</p><a id="more"></a><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote><p>XXX_Fragment</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onResume();</span><br><span class="line">       getFocus();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//主界面获取焦点</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getFocus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       getView().setFocusableInTouchMode(<span class="keyword">true</span>);</span><br><span class="line">       getView().requestFocus();</span><br><span class="line">       getView().setOnKeyListener(<span class="keyword">new</span> View.OnKeyListener() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKey</span><span class="params">(View v, <span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (event.getAction() == KeyEvent.ACTION_UP &amp;&amp; keyCode == KeyEvent.KEYCODE_BACK) &#123;</span><br><span class="line">                   <span class="comment">// 监听到返回按钮点击事件</span></span><br><span class="line">                   ......</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>以上代码是<code>stackoverflow.com</code>中找到的一个解决方案，但是在使用时，由于Fragment页面里可能有其他能获取焦点的View（例如EditText），会导致监听失效，点击返回键会返回到上个页面。</p><h3 id="更完善的解决方案："><a href="#更完善的解决方案：" class="headerlink" title="更完善的解决方案："></a>更完善的解决方案：</h3><p>除了上面的代码，我们需要对可以获取焦点的View的<code>setOnKeyListener</code>进行处理，这里以一个EditText为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//private EditText nickname;</span></span><br><span class="line"></span><br><span class="line">nickname.setOnKeyListener(<span class="keyword">new</span> View.OnKeyListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKey</span><span class="params">(View v, <span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK</span><br><span class="line">                        &amp;&amp; event.getAction() == KeyEvent.ACTION_UP) &#123;</span><br><span class="line">                    <span class="comment">//关闭软键盘</span></span><br><span class="line">                    InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line">                    imm.hideSoftInputFromWindow(nickname.getWindowToken(), <span class="number">0</span>);</span><br><span class="line">                    <span class="comment">//使得根View重新获取焦点，以监听返回键</span></span><br><span class="line">                    getFocus();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>使用到的资料：</p><blockquote><p><a href="http://blog.csdn.net/ccpat/article/details/45176665" target="_blank" rel="noopener">http://blog.csdn.net/ccpat/article/details/45176665</a></p></blockquote><blockquote><p><a href="http://stackoverflow.com/questions/22552958/handling-back-press-when-using-fragments-in-android" target="_blank" rel="noopener">http://stackoverflow.com/questions/22552958/handling-back-press-when-using-fragments-in-android</a></p></blockquote><p>PS:</p><blockquote><p>你可以关注的我 <a href="https://github.com/likfe" target="_blank" rel="noopener">Github</a>、<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">CSDN</a> 和 <a href="http://weibo.com/zyansen" target="_blank" rel="noopener">微博</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Fragment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android反编译 -- 错误代码还原</title>
      <link href="/2016/04/09/My-New-Post/"/>
      <url>/2016/04/09/My-New-Post/</url>
      
        <content type="html"><![CDATA[<h3 id="1-setColor-16777216"><a href="#1-setColor-16777216" class="headerlink" title="1. setColor(-16777216)"></a>1. <code>setColor(-16777216)</code></h3><p>反编译的代码中会有很多<code>setColor(int)</code>的情况，比如<code>setColor(-16777216)</code>，这个值比较特别，能轻易的查到Android文档中对这个整数的定义：</p><blockquote><p>public static final int BLACK.<br>Added in API level 1<br>Constant Value: -16777216 ( 0xff000000). </p></blockquote><p>也就是说<code>setColor(-16777216)</code>中<code>-16777216</code>对应的颜色是<strong>BLACK</strong>(0xff000000)，那么其他系统未定义成某个颜色名的值呢？</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-16777216 对应 0xff000000</span><br><span class="line">       -1 对应 0xffffffff</span><br><span class="line"> 0xffffff 的值 16777215</span><br><span class="line">   </span><br><span class="line">那么对任意的 setColor(int)中的int值，我们可以：</span><br><span class="line">0xffffffff+(int)+1 或 0xffffffff-(-int+1) </span><br><span class="line"></span><br><span class="line">则对于 ：setColor(-16777216)</span><br><span class="line">可写成 ：setColor(0xffffffff - 16777215)) 或 setColor(-16777216 + 1 + 0xffffffff))</span><br><span class="line"></span><br><span class="line">这样，我们就不用查文档寻找特定的颜色值，也能解决任意颜色的设置。</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://stackoverflow.com/questions/8489990/how-to-set-color-using-integer" target="_blank" rel="noopener">Stackoverflow : How to set color using integer?</a></p></blockquote><h3 id="2-MeasureSpec-makeMeasureSpec-xx-int"><a href="#2-MeasureSpec-makeMeasureSpec-xx-int" class="headerlink" title="2.MeasureSpec.makeMeasureSpec(xx, int)"></a>2.<code>MeasureSpec.makeMeasureSpec(xx, int)</code></h3><p>反编译的代码中<code>MeasureSpec.makeMeasureSpec(xx, int)</code>的第二个参数是个<code>int</code>类型的数，这个比较简单，直接看文档或者源码即可找到：</p><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MeasureSpec</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNSPECIFIED = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXACTLY = <span class="number">1073741824</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AT_MOST = -<span class="number">2147483648</span>;</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>文档：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static final int AT_MOST</span><br><span class="line">Added in API level 1</span><br><span class="line">Measure specification mode: The child can be as large as it wants up to the specified size.</span><br><span class="line">Constant Value: -2147483648 (0x80000000)</span><br><span class="line"></span><br><span class="line">public static final int EXACTLY</span><br><span class="line">Added in API level 1</span><br><span class="line">Measure specification mode: The parent has determined an exact size for the child. The child is going to be given those bounds regardless of how big it wants to be.</span><br><span class="line">Constant Value: 1073741824 (0x40000000)</span><br><span class="line"></span><br><span class="line">public static final int UNSPECIFIED</span><br><span class="line">Added in API level 1</span><br><span class="line">Measure specification mode: The parent has not imposed any constraint on the child. It can be whatever size it wants.</span><br><span class="line">Constant Value: 0 (0x00000000)</span><br></pre></td></tr></table></figure><p>则对于：<br><code>MeasureSpec.makeMeasureSpec(xx, 0)</code><br>我们应该修改为<br><code>MeasureSpec.makeMeasureSpec(xx, View.MeasureSpec.UNSPECIFIED)</code></p><p>其他依次类推。</p><h3 id="3-setVisibility-int"><a href="#3-setVisibility-int" class="headerlink" title="3.setVisibility(int)"></a>3.<code>setVisibility(int)</code></h3><p>这个同<strong>[2]</strong>,看文档或者看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VISIBLE = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INVISIBLE = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GONE = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>则对于：<code>setVisibility(0)</code> ==&gt; <code>setVisibility(View.VISIBLE)</code></p><p>其他依次类推。</p><h3 id="4-new-Runnable"><a href="#4-new-Runnable" class="headerlink" title="4.new Runnable()..."></a>4.<code>new Runnable()...</code></h3><p>反编译的代码中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="comment">/* synthetic */</span> AbstractButton a;</span><br><span class="line">&#123;</span><br><span class="line">       <span class="keyword">this</span>.a = r1;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.a.xxxxx();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可直接去掉成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          xxxxx();</span><br><span class="line">       &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="5-new-Handler"><a href="#5-new-Handler" class="headerlink" title="5.new Handler()..."></a>5.<code>new Handler()...</code></h3><p>同<code>[4]</code>,直接去掉成员变量:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Handler() &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="comment">/* synthetic */</span> ButtonSave a;</span><br><span class="line"></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.a = r1;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.a.xxx();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="comment">//修改为</span></span><br><span class="line"><span class="keyword">new</span> Handler() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                xxx();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><h3 id="6-context-getSystemService-quot-layout-inflater-quot"><a href="#6-context-getSystemService-quot-layout-inflater-quot" class="headerlink" title="6.context.getSystemService(&quot;layout_inflater&quot;)"></a>6.<code>context.getSystemService(&quot;layout_inflater&quot;)</code></h3><p>直接看源码即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String POWER_SERVICE = <span class="string">"power"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String WINDOW_SERVICE = <span class="string">"window"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LAYOUT_INFLATER_SERVICE = <span class="string">"layout_inflater"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCOUNT_SERVICE = <span class="string">"account"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVITY_SERVICE = <span class="string">"activity"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ALARM_SERVICE = <span class="string">"alarm"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NOTIFICATION_SERVICE = <span class="string">"notification"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCESSIBILITY_SERVICE = <span class="string">"accessibility"</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>则<code>context.getSystemService(&quot;layout_inflater&quot;)</code> ==&gt; <code>context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)</code></p><p>其他依次类推。</p><h3 id="7-intent-setFlags-335544320"><a href="#7-intent-setFlags-335544320" class="headerlink" title="7.intent.setFlags(335544320)"></a>7.<code>intent.setFlags(335544320)</code></h3><p>先看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Intent implements Parcelable, Cloneable  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_GRANT_READ_URI_PERMISSION = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_GRANT_WRITE_URI_PERMISSION = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_FROM_BACKGROUND = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_DEBUG_LOG_RESOLUTION = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_EXCLUDE_STOPPED_PACKAGES = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_INCLUDE_STOPPED_PACKAGES = <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_NO_HISTORY = <span class="number">1073741824</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_SINGLE_TOP = <span class="number">536870912</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_NEW_TASK = <span class="number">268435456</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_MULTIPLE_TASK = <span class="number">134217728</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_CLEAR_TOP = <span class="number">67108864</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_FORWARD_RESULT = <span class="number">33554432</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_PREVIOUS_IS_TOP = <span class="number">16777216</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS = <span class="number">8388608</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_BROUGHT_TO_FRONT = <span class="number">4194304</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_RESET_TASK_IF_NEEDED = <span class="number">2097152</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY = <span class="number">1048576</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET = <span class="number">524288</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_NO_USER_ACTION = <span class="number">262144</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_REORDER_TO_FRONT = <span class="number">131072</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_NO_ANIMATION = <span class="number">65536</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_CLEAR_TASK = <span class="number">32768</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ACTIVITY_TASK_ON_HOME = <span class="number">16384</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_RECEIVER_REGISTERED_ONLY = <span class="number">1073741824</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_RECEIVER_REPLACE_PENDING = <span class="number">536870912</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_RECEIVER_FOREGROUND = <span class="number">268435456</span>;</span><br></pre></td></tr></table></figure><p>那么对于<code>intent.setFlags(int);</code> 中 <code>int</code>值是上面四种之一的话就比较简单，例如：</p><p><code>intent.setFlags(536870912);</code> ==&gt; <code>intent.setFlags(PendingIntent.FLAG_NO_CREATE);</code> </p><p>但是遇到一个比较特别的：<code>intent.setFlags(335544320);</code></p><p>源码里根本没有这样一个值啊，其实<code>intent.setFlags( A | B )</code>是可以使用<code>|(或运算)</code>的，那么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">10000000000000000000000000000 = 268435456</span><br><span class="line">||</span><br><span class="line">  100000000000000000000000000 =  67108864</span><br><span class="line">10100000000000000000000000000 = 335544320</span><br><span class="line"></span><br><span class="line">即 268435456 | 67108864 = 335544320</span><br></pre></td></tr></table></figure><p>从而:</p><p><code>intent.setFlags(335544320);</code>==&gt;</p><p><code>intent.setFlags( FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TOP )</code></p><p>或者</p><p><code>intent.setFlags( FLAG_RECEIVER_FOREGROUND | FLAG_ACTIVITY_CLEAR_TOP )</code></p><p>从 <a href="https://www.codota.com" target="_blank" rel="noopener">Codota</a> 中搜索<code>intent.setFlags(335544320);</code>看到的是第一种情况，结合<code>intent.setFlags()</code>的用法，应该也是第一种情况。</p><p>相关资料：</p><blockquote><p><a href="http://farwmarth.com/2013/04/23/android%20反编译和代码解读/" target="_blank" rel="noopener">http://farwmarth.com/2013/04/23/android%20反编译和代码解读/</a></p></blockquote><p>PS:</p><blockquote><p>本文已整理到Github上，欢迎提交更多代码！</p><p>你可以关注的我 <a href="https://github.com/likfe" target="_blank" rel="noopener">Github</a>、<a href="http://blog.csdn.net/ys743276112" target="_blank" rel="noopener">CSDN</a> 和 <a href="http://weibo.com/zyansen" target="_blank" rel="noopener">微博</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 反编译 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
