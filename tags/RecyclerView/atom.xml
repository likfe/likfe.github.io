<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://likfe.com</id>
    <title>Cafeting • Posts by &#34;recyclerview&#34; tag</title>
    <link href="https://likfe.com" />
    <updated>2020-04-22T12:34:19.000Z</updated>
    <category term="Android" />
    <category term="Flurry" />
    <category term="Confluence" />
    <category term="反编译" />
    <category term="ReactNative" />
    <category term="AccessibilityNodeInfo" />
    <category term="StackOverflow" />
    <category term="Proxy" />
    <category term="AndroidStudio" />
    <category term="Translucent" />
    <category term="SwipeBack" />
    <category term="PopWindow" />
    <category term="AMH" />
    <category term="Flarum" />
    <category term="PHP" />
    <category term="Composer" />
    <category term="ViewPager" />
    <category term="ADB" />
    <category term="Clipboard" />
    <category term="framework" />
    <category term="gradle" />
    <category term="DialogFragment" />
    <category term="PopupWindow" />
    <category term="Google" />
    <category term="Glide" />
    <category term="Intent" />
    <category term="RecyclerView" />
    <category term="Lambda" />
    <category term="Leancloud" />
    <category term="Gradle" />
    <category term="Messenger" />
    <category term="Make" />
    <category term="Mac" />
    <category term="Linux" />
    <category term="JDK" />
    <category term="Fragment" />
    <category term="View" />
    <category term="Scrollbar" />
    <category term="备案" />
    <category term="域名" />
    <category term="Github" />
    <category term="GreenDao" />
    <category term="Rust" />
    <category term="IDEA" />
    <category term="GooglePlay" />
    <category term="Docker" />
    <category term="Jenkins" />
    <category term="MAMP" />
    <category term="树莓派" />
    <category term="Sublime Text" />
    <category term="Emmet" />
    <category term="ThinkPHP" />
    <category term="GitBook" />
    <category term="OSX" />
    <entry>
        <id>https://likfe.com/2020/04/22/android-recycleview-log-resume-position/</id>
        <title>Android必知必会 - RecyclerView 恢复上次滚动位置</title>
        <link rel="alternate" href="https://likfe.com/2020/04/22/android-recycleview-log-resume-position/"/>
        <content type="html">&lt;p&gt;记录 RecyclerView 滚动位置并恢复是一个很常见的需求，通常需要精准恢复到上次的位置。&lt;/p&gt;
&lt;p&gt;预计会用到 RecyclerView 相关的三个知识点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;监听 RecyclerView 滚动状态&lt;/li&gt;
&lt;li&gt;监听 RecyclerView 完成绘制&lt;/li&gt;
&lt;li&gt;滚动 RecyclerView 到指定的位置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在「RecyclerView 完成绘制」时，记录首个元素的偏移量作为基础偏移量；此步非必须流程，根据自己实际情况看是否需要，有些情况此基础偏移量为0，即不存在基础偏移量的问题；&lt;/li&gt;
&lt;li&gt;在「监听 RecyclerView 滚动状态」里，滚动结束时，记录最左侧的元素坐标和偏移量；&lt;/li&gt;
&lt;li&gt;再次打开当前页面时，检查是否存在偏移量信息的记录，有则进行位置恢复，即「滚动 RecyclerView 到指定的位置」。&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;条件：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;LinearLayoutManager&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;linearLayoutManager&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinearLayoutManager&lt;/span&gt;(mContext);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL); &lt;span class=&#34;comment&#34;&gt;// 水平，本文以此为例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;linearLayoutManager.setOrientation(LinearLayoutManager.VERTICAL); &lt;span class=&#34;comment&#34;&gt;//或 垂直&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//以下3个变量的值需要持久化存储到 SharedPreferences 类似的地方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; rvBaseOffset; &lt;span class=&#34;comment&#34;&gt;//初始状态时position=0元素的的基础偏移量 Offset&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; rvPosition; &lt;span class=&#34;comment&#34;&gt;//最左边首个可见元素的 position&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; rvOffset; &lt;span class=&#34;comment&#34;&gt;//最左边首个可见元素的偏移量 Offset&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;1-前置知识&#34;&gt;&lt;a href=&#34;#1-前置知识&#34; class=&#34;headerlink&#34; title=&#34;1. 前置知识&#34;&gt;&lt;/a&gt;1. 前置知识&lt;/h2&gt;&lt;h3 id=&#34;监听-RecyclerView-滚动状态&#34;&gt;&lt;a href=&#34;#监听-RecyclerView-滚动状态&#34; class=&#34;headerlink&#34; title=&#34;监听 RecyclerView 滚动状态&#34;&gt;&lt;/a&gt;监听 RecyclerView 滚动状态&lt;/h3&gt;&lt;p&gt;调用 &lt;code&gt;recyclerView.addOnScrollListener(onScrollListener);&lt;/code&gt; 来设置 RecyclerView 的滚动监听器。&lt;/p&gt;
&lt;p&gt;自定义一个类来继承 &lt;code&gt;RecyclerView.OnScrollListener&lt;/code&gt; 并覆写 &lt;code&gt;onScrollStateChanged()&lt;/code&gt; 方法，在其中处理关键状态的监听。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MOnScrollListener&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RecyclerView&lt;/span&gt;.OnScrollListener &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;onScrollStateChanged&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;meta&#34;&gt;@NonNull&lt;/span&gt; RecyclerView recyclerView, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; newState)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;super&lt;/span&gt;.onScrollStateChanged(recyclerView, newState);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;hasStarted&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; newState == RecyclerView.SCROLL_STATE_DRAGGING; &lt;span class=&#34;comment&#34;&gt;//此时，RecyclerView 滚动开始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;hasEnded&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; newState == RecyclerView.SCROLL_STATE_IDLE; &lt;span class=&#34;comment&#34;&gt;//此时，RecyclerView 滚动结束&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (hasEnded &amp;amp;&amp;amp; linearLayoutManager != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;type&#34;&gt;View&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;leftView&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; linearLayoutManager.getChildAt(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//获取可视的第一个view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (leftView == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      rvOffset = leftView.getLeft(); &lt;span class=&#34;comment&#34;&gt;//获取该view的左边的偏移量，垂直布局时获取 getTop()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      rvPosition = linearLayoutManager.getPosition(leftView);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      SPManager.getInstance().setRvOffset(rvOffset);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      SPManager.getInstance().setRvPosition(rvPosition);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;监听-RecyclerView-完成绘制&#34;&gt;&lt;a href=&#34;#监听-RecyclerView-完成绘制&#34; class=&#34;headerlink&#34; title=&#34;监听 RecyclerView 完成绘制&#34;&gt;&lt;/a&gt;监听 RecyclerView 完成绘制&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;recyclerView.getViewTreeObserver()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    .addOnGlobalLayoutListener(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ViewTreeObserver&lt;/span&gt;.OnGlobalLayoutListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;onGlobalLayout&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;View&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;leftView&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; linearLayoutManager.getChildAt(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//获取可视的第一个view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (leftView == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rvBaseOffset = leftView.getLeft();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;lastPosition&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; linearLayoutManager.getPosition(leftView);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (lastPosition == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      SPManager.getInstance().setRvBaseOffset(rvBaseOffset);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    recyclerView.getViewTreeObserver().removeOnGlobalLayoutListener(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;滚动-RecyclerView-到指定的位置&#34;&gt;&lt;a href=&#34;#滚动-RecyclerView-到指定的位置&#34; class=&#34;headerlink&#34; title=&#34;滚动 RecyclerView 到指定的位置&#34;&gt;&lt;/a&gt;滚动 RecyclerView 到指定的位置&lt;/h3&gt;&lt;p&gt;具有类似功能的 API 有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RecyclerView.scrollToPosition(int position)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RecyclerView.smoothScrollToPosition(int position)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RecyclerView.scrollBy(int x, int y)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LinearLayoutManager.scrollToPositionWithOffset(int position, int offset)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意不同 API 是不同的类的方法，另外还有使用有滚动动画的区别等。&lt;/p&gt;
&lt;p&gt;这里使用 &lt;code&gt;LinearLayoutManager.scrollToPositionWithOffset(int position, int offset)&lt;/code&gt; ，它可以精准的定位到上次的位置，也不需要展示滚动动画。&lt;/p&gt;
&lt;h2 id=&#34;2-代码实现&#34;&gt;&lt;a href=&#34;#2-代码实现&#34; class=&#34;headerlink&#34; title=&#34;2. 代码实现&#34;&gt;&lt;/a&gt;2. 代码实现&lt;/h2&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;LinearLayoutManager&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;linearLayoutManager&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LinearLayoutManager&lt;/span&gt;(getContext());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;recyclerView.setLayoutManager(linearLayoutManager);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;onScrollListener = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MOnScrollListener&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;recyclerView.addOnScrollListener(onScrollListener);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;lastPositionHistory&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; SPManager.getInstance().getRvPosition();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (lastPositionHistory == -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &amp;#123; &lt;span class=&#34;comment&#34;&gt;//从未设置过偏移位置时获取一次基础偏移量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  recyclerView.getViewTreeObserver()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    .addOnGlobalLayoutListener(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ViewTreeObserver&lt;/span&gt;.OnGlobalLayoutListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;onGlobalLayout&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;type&#34;&gt;View&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;leftView&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; linearLayoutManager.getChildAt(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;//获取可视的第一个view&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (leftView == &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rvBaseOffset = leftView.getLeft();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;lastPosition&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; linearLayoutManager.getPosition(leftView);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (lastPosition == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      SPManager.getInstance().setRvBaseOffset(rvBaseOffset);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    recyclerView.getViewTreeObserver().removeOnGlobalLayoutListener(&lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//在合适的时机，比如 onResume() 或者获取完数据后进行位置恢复&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (linearLayoutManager != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; recyclerView != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;lastPosition&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; SPManager.getInstance().getRvPositiont();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (lastPosition &amp;gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; linearLayoutManager != &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;lastOffset&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; SPManager.getInstance().getRvOffset();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;baseOffset&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; SPManager.getInstance().getRvBaseOffset();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    linearLayoutManager.scrollToPositionWithOffset(lastPosition, lastOffset - baseOffset);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;3-回顾总结&#34;&gt;&lt;a href=&#34;#3-回顾总结&#34; class=&#34;headerlink&#34; title=&#34;3. 回顾总结&#34;&gt;&lt;/a&gt;3. 回顾总结&lt;/h2&gt;&lt;p&gt;本次记录的是实际使用中的情况，基础偏移量的值不为 0 可能不是普遍现象，没看到过相关记录，特记录下来，避免后人踩坑吧。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/34271773/how-to-scrollto-an-offset-inside-recyclerview&#34;&gt;How to scrollto an offset inside recyclerview?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/27507715/android-how-to-get-the-current-x-offset-of-recyclerview&#34;&gt;Android: How to get the current X offset of RecyclerView?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/34271773/how-to-scrollto-an-offset-inside-recyclerview&#34;&gt;How to scrollto an offset inside recyclerview?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/30397460/how-to-know-when-the-recyclerview-has-finished-laying-down-the-items&#34;&gt;How to know when the RecyclerView has finished laying down the items?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果有什么建议或者问题可以随时联系我，共同探讨学习：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Github： &lt;a href=&#34;https://github.com/likfe&#34;&gt;likfe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CSDN：&lt;a href=&#34;https://micro.blog.csdn.net/&#34;&gt;他叫自己Mr.张&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;掘金：&lt;a href=&#34;https://juejin.im/user/56042f4b60b2f3a91f58461d&#34;&gt;cafeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;微博：&lt;a href=&#34;http://weibo.com/zyansen&#34;&gt;cafeting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</content>
        <category term="Android" />
        <category term="RecyclerView" />
        <updated>2020-04-22T12:34:19.000Z</updated>
    </entry>

    <follow_challenge>
        <feedId>73986782175755264</feedId>
        <userId>72100854660436992</userId>
    </follow_challenge>
</feed>
