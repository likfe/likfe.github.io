<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://likfe.com</id>
    <title>Cafeting • Posts by &#34;adb&#34; tag</title>
    <link href="https://likfe.com" />
    <updated>2018-01-17T02:52:38.000Z</updated>
    <category term="Android" />
    <category term="Flurry" />
    <category term="Confluence" />
    <category term="反编译" />
    <category term="ReactNative" />
    <category term="AccessibilityNodeInfo" />
    <category term="StackOverflow" />
    <category term="Proxy" />
    <category term="AndroidStudio" />
    <category term="Translucent" />
    <category term="SwipeBack" />
    <category term="PopWindow" />
    <category term="AMH" />
    <category term="Flarum" />
    <category term="PHP" />
    <category term="Composer" />
    <category term="ViewPager" />
    <category term="ADB" />
    <category term="Clipboard" />
    <category term="framework" />
    <category term="gradle" />
    <category term="DialogFragment" />
    <category term="PopupWindow" />
    <category term="Google" />
    <category term="Glide" />
    <category term="Intent" />
    <category term="RecyclerView" />
    <category term="Lambda" />
    <category term="Leancloud" />
    <category term="Gradle" />
    <category term="Messenger" />
    <category term="Make" />
    <category term="Mac" />
    <category term="Linux" />
    <category term="JDK" />
    <category term="Fragment" />
    <category term="View" />
    <category term="Scrollbar" />
    <category term="备案" />
    <category term="域名" />
    <category term="Github" />
    <category term="GreenDao" />
    <category term="Rust" />
    <category term="IDEA" />
    <category term="GooglePlay" />
    <category term="Docker" />
    <category term="Jenkins" />
    <category term="MAMP" />
    <category term="树莓派" />
    <category term="Sublime Text" />
    <category term="Emmet" />
    <category term="ThinkPHP" />
    <category term="GitBook" />
    <category term="OSX" />
    <entry>
        <id>https://likfe.com/2018/01/17/android-adb-set-clipboard/</id>
        <title>Android 必知必会 - 使用 ADB 操作 Clipboard</title>
        <link rel="alternate" href="https://likfe.com/2018/01/17/android-adb-set-clipboard/"/>
        <content type="html">&lt;p&gt;关键词：&lt;code&gt;service call&lt;/code&gt; 、&lt;code&gt;clipboard&lt;/code&gt; 、&lt;code&gt;Unknown package&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;手里一个项目需要执行个骚操作，其中有一个步骤是使用 ADB 来操作 Clipboard（粘贴板），搜索许久发现&lt;strong&gt;直接操作并不可行&lt;/strong&gt;，确切的说是在 Android API &amp;gt;&amp;#x3D;11 时是不可行的。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;blockquote&gt;
&lt;p&gt;操作环境：macOS Sierra 10.12.6 + iTerm2，一些命令可能会因系统等不同而略有不同，请自行测试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;前置知识点&#34;&gt;&lt;a href=&#34;#前置知识点&#34; class=&#34;headerlink&#34; title=&#34;前置知识点&#34;&gt;&lt;/a&gt;前置知识点&lt;/h2&gt;&lt;p&gt;首先了解下 ADB Shell 中的 &lt;code&gt;service&lt;/code&gt; ，在命令行里执行能看到如下信息：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ adb shell&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ service&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Usage: service [-h|-?]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       service list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       service check SERVICE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       service call SERVICE CODE [i32 N | i64 N | f N | d N | s16 STR ] ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Options:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   i32: Write the 32-bit &lt;span class=&#34;built_in&#34;&gt;integer&lt;/span&gt; N into the send parcel.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   i64: Write the 64-bit &lt;span class=&#34;built_in&#34;&gt;integer&lt;/span&gt; N into the send parcel.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   f:   Write the 32-bit single-precision number N into the send parcel.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   d:   Write the 64-bit double-precision number N into the send parcel.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   s16: Write the UTF-16 string STR into the send parcel.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ service list | grep clipboard&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# If use windows system, use findstr: &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# service list | findstr &amp;quot;clipboard&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63	clipboard: [android.content.IClipboard]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下面找 CODE ，查看 Clipboard 的源码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// API &amp;lt; 11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; TRANSACTION_getClipboardText &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; TRANSACTION_hasClipboardText &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; TRANSACTION_setClipboardText &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// API &amp;gt;= 11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;TRANSACTION_setPrimaryClip&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;TRANSACTION_getPrimaryClip&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;TRANSACTION_getPrimaryClipDescription&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;TRANSACTION_hasPrimaryClip&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;TRANSACTION_addPrimaryClipChangedListener&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;TRANSACTION_removePrimaryClipChangedListener&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;TRANSACTION_hasClipboardText&lt;/span&gt; &lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;分析&#34;&gt;&lt;a href=&#34;#分析&#34; class=&#34;headerlink&#34; title=&#34;分析&#34;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;p&gt;Clipboard 源码指出这些事务需要什么参数。TRANSACTION_setPrimaryClip 需要一个 ClipData，它不是一个 i32 或 s16，因此与服务调用不兼容。 更重要的是，这些事务需要调用包名称作为参数，剪贴板服务验证指定的包名称与调用的 uid 相匹配。 当使用adb shell 时，调用的 uid 是 UID_ROOT 或者 UID_SHELL，它们都不拥有任何包，所以没有办法通过这个检查。 简而言之，新的剪贴板服务不能以这种方式使用。&lt;/p&gt;
&lt;p&gt;所以在 API &amp;gt;&amp;#x3D; 11 的系统上使用 &lt;code&gt;service call clipboard [1 | 2 | 3] [i32 N | i64 N | f N | d N | s16 STR ]&lt;/code&gt; 已经不可行了。&lt;/p&gt;
&lt;p&gt;所以无论命令正确与否，都会提示 &lt;code&gt;Unknown package&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ service call clipboard 2 s16 &lt;span class=&#34;string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Result: Parcel(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  0x00000000: fffffffd 00000013 006e0055 006e006b &lt;span class=&#34;string&#34;&gt;&amp;#x27;........U.n.k.n.&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  0x00000010: 0077006f 0020006e 00610070 006b0063 &lt;span class=&#34;string&#34;&gt;&amp;#x27;o.w.n. .p.a.c.k.&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  0x00000020: 00670061 00200065 00620061 00000063 &lt;span class=&#34;string&#34;&gt;&amp;#x27;a.g.e. .a.b.c...&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;就 Android 目前的各版本系统市场占有率而言，&lt;strong&gt;使用 ADB 操作 Clipboard 是一个不可行的方案了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/7283446/pasting-text-into-android-emulator-clipboard-using-adb-shell&#34;&gt;Pasting text into Android emulator clipboard using adb shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/14243427/set-clipboard-text-via-adb-shell-as-of-api-level-11&#34;&gt;Set clipboard text via adb shell as of API level 11&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;有什么建议或者问题可以随时联系我，共同探讨学习：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;微博：&lt;a href=&#34;http://weibo.com/zyansen&#34;&gt;cafeting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github： &lt;a href=&#34;https://github.com/likfe&#34;&gt;likfe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CSDN：&lt;a href=&#34;http://blog.csdn.net/ys743276112&#34;&gt;他叫自己Mr.张&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</content>
        <category term="Android" />
        <category term="ADB" />
        <category term="Clipboard" />
        <updated>2018-01-17T02:52:38.000Z</updated>
    </entry>
    <entry>
        <id>https://likfe.com/2017/01/05/android-app-encrypt/</id>
        <title>【译】在 Jelly Bean 中使用应用加密</title>
        <link rel="alternate" href="https://likfe.com/2017/01/05/android-app-encrypt/"/>
        <content type="html">&lt;p&gt;翻译自：&lt;a href=&#34;http://nelenkov.blogspot.jp/2012/07/using-app-encryption-in-jelly-bean.html&#34;&gt;Using app encryption in Jelly Bean&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关键词 : &lt;code&gt;adb install -l&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最新的 Android 4.1（Jelly Bean）版本在上周的 Google I &amp;#x2F; O 大会上发布了，它有一大堆新功能和改进。 其中一个有趣的功能是&lt;strong&gt;应用程序加密&lt;/strong&gt;，除了简短的说明还没有任何细节：“从 Jelly Bean 版本起，Google Play 中的付费应用程序在分发和存储之前，会使用设备特定的密钥加密”。缺乏细节当然会引起猜测，有些人甚至担心，当他们使用一个新的设备时必须回购他们的付费应用程序。 在本文中，我们将介绍如何在操作系统中实施应用加密，展示如何在不通过 Google Play 的情况下安装加密的应用，并了解 Google Play 如何提供加密的应用。&lt;/p&gt;
&lt;h2 id=&#34;操作系统对加密应用程序的支持&#34;&gt;&lt;a href=&#34;#操作系统对加密应用程序的支持&#34; class=&#34;headerlink&#34; title=&#34;操作系统对加密应用程序的支持&#34;&gt;&lt;/a&gt;操作系统对加密应用程序的支持&lt;/h2&gt;&lt;p&gt;本文之前的版本是基于 Eclipse 框架和二进制的系统镜像，并且缺少一部分。由于 Jelly Bean 已经开源，下面的讨论已经修改，现在是基于 AOSP 代码（4.1.1_r1）。如果你回来重读本文，重点放在第二部分。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;Android 上的应用可以通过几种不同的方式安装：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过应用商店（例如 &lt;a href=&#34;https://play.google.com/store&#34;&gt;Google Play Store&lt;/a&gt;，也称为 Android Market）&lt;/li&gt;
&lt;li&gt;直接在手机上打开应用文件或电子邮件附件（如果启用“位置来源”选项）&lt;/li&gt;
&lt;li&gt;使用通过 USB 连接的计算机的 &lt;code&gt;adb install&lt;/code&gt; SDK 命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前两个不提供任何选项或者特定视角的底层实现，让我们探索第三个。看看使用 adb 命令的输出，可以看到 install 命令在最新的 SDK 版本中获得了几个新选项：&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ adb install [-l] [-r] [-s] [--algo &amp;lt;algorithm name&amp;gt; --key &amp;lt;hex-encoded key&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--iv &amp;lt;hex-encoded iv&amp;gt;] &amp;lt;file&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;显然 &lt;code&gt;—algo&lt;/code&gt; 、 &lt;code&gt;—key&lt;/code&gt; 和 &lt;code&gt;—iv&lt;/code&gt; 参数与加密应用程序有关，所以在进入详细信息之前，首先尝试安装一个加密的 APK。使用 **&lt;a href=&#34;http://openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; enc ** 命令加密文件相当容易，通常它已经在大多数 Linux 系统上安装。我们使用 CBC 模式下的 AES 算法，配合一个128 bit 的 Key（下文可以看到，这一个不是很安全的密钥），为使事情更简单，这里使用与密钥相同的初始化向量（initialization vector, IV）。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;openssl enc -aes-128-cbc -K 000102030405060708090A0B0C0D0E0F&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-iv 000102030405060708090A0B0C0D0E0F -in my-app.apk -out my-app-enc.apk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;让我们尝试安装它来检查 Android 是否喜欢我们新加密的应用程序：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;adb install --algo &lt;span class=&#34;string&#34;&gt;&amp;#x27;AES/CBC/PKCS5Padding&amp;#x27;&lt;/span&gt; --key 000102030405060708090A0B0C0D0E0F&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--iv 000102030405060708090A0B0C0D0E0F my-app-enc.apk&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pkg: /data/local/tmp/my-app-enc.apk&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Success&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;“Success” 的输出结果看起来似乎很有前途，然后确认应用的图标显示在系统面板中并且启动时无错误。实际的 APK 文件像往常一样被复制在 &lt;code&gt;/data/app&lt;/code&gt; 中，将其哈希值与我们加密的 APK 进行比较，发现它实际上是一个不同的文件。安装后的文件的哈希值和原始（未加密） APK 的完全相同，因此我们可以得出结论，APK 在安装是使用我们提供的加密参数（算法、密钥和 IV）进行解密。让我们看看这是如何实现的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;adb install&lt;/code&gt; 命令根本上是调用 &lt;code&gt;pm&lt;/code&gt; Android 命令行实用程序，它允许我们列出、安装和删除包（应用程序）。 通常 PackageManagerService 是负责在 Android 上安装应用程序的组件，pm 只是一个方便的前端。 应用程序通常通过 &lt;a href=&#34;https://developer.android.com/reference/android/content/pm/PackageManager.html&#34;&gt;PackageManager&lt;/a&gt; 类来访问包服务。 浏览其代码并检查加密相关方法，我们发现：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;installPackageWithVerification&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Uri packageURI,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;        IPackageInstallObserver observer, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; flags, String installerPackageName,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;        Uri verificationURI, ManifestDigest manifestDigest,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;        ContainerEncryptionParams encryptionParams)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;ContainerEncryptionParams 类看起来特别有可能，所以让我们看看里面：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ContainerEncryptionParams&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Parcelable&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String mEncryptionAlgorithm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; IvParameterSpec mEncryptionSpec;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; SecretKey mEncryptionKey;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; String mMacAlgorithm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; AlgorithmParameterSpec mMacSpec;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; SecretKey mMacKey;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;byte&lt;/span&gt;[] mMacTag;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; mAuthenticatedDataStart;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;long&lt;/span&gt; mEncryptedDataStart;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我们使用的 &lt;code&gt;adb install&lt;/code&gt; 参数完全对应于类的前三个字段。 除此之外，该类还存储 MAC 相关参数，因此可以安全地假设 Android 现在可以检查应用程序二进制文件的完整性。 不幸的是，pm 命令没有任何 MAC 相关的参数（它实际上有，但由于某些原因，在当前生成中禁用），所以为了尝试 MAC 支持，我们需要直接调用 &lt;code&gt;installPackageWithVerification&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;该方法对于 SDK 应用程序是隐藏的，因此从应用程序里调用它的唯一方法是使用反射。事实证明，它的大多数参数类（ IPackageInstallObserver，ManifestDigest 和 ContainerEncryptionParams ）也被隐藏，但这只是一个小陷阱。 对于 Android 预加载框架类，即使你的应用程序捆绑了一个框架类，系统副本仍旧会在运行时使用它。这意味着我们必须做的是为 &lt;code&gt;installPackageWithVerification&lt;/code&gt; 方法获取一个句柄，将所需的类添加到我们的应用程序中的 &lt;code&gt;andorid.content.pm&lt;/code&gt; 包中。一旦我们有一个方法句柄，我们只需要实例化 &lt;code&gt;ContainerEncryptionParams&lt;/code&gt; 类，然后提供所有的加密和 MAC 相关的参数。需要注意的是，由于我们的整个文件是加密的，并且 MAC 是在其所有内容上计算的（见下文），我们为加密和认证数据的开头指定为 0，将文件大小指定为数据的结尾（查看&lt;a href=&#34;https://github.com/nelenkov/jb-app-encryption&#34;&gt;示例代码&lt;/a&gt;）。为了计算 MAC 值（标签），我们再次使用 OpenSSL：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;openssl dgst -hmac &lt;span class=&#34;string&#34;&gt;&amp;#x27;hmac_key_1&amp;#x27;&lt;/span&gt; -sha1 -hex my-app-enc.apk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;HMAC-SHA1(my-app-enc.apk)= 0dc53c04d33658ce554ade37de8013b2cff0a6a5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;请注意，&lt;code&gt;dgst&lt;/code&gt; 命令不支持使用十六进制或 Base64 的 HMAC 密钥，因此您只能使用 ASCII 字符。 这对于生产使用可能不是一个好主意，因此请考虑使用真正的密钥并以某种其他方式（使用 JCE 等）来计算 MAC。&lt;/p&gt;
&lt;p&gt;我们的应用程序现在大部分已准备就绪，但安装应用程序需要 &lt;code&gt;INSTALL_PACKAGES&lt;/code&gt; 权限，该权限与保护级别 &lt;code&gt;signatureOrSystem&lt;/code&gt; 一起定义。 因此，它只被授予使用系统（ROM）密钥签名的应用程序或安装在 &lt;code&gt;/system&lt;/code&gt; 分区中的应用程序。 构建 Jelly Bean ROM 是一个有趣的练习，但现在，我们只需将我们的应用程序复制到 &lt;code&gt;/system/app&lt;/code&gt;，以获得安装软件包（在模拟器或 Root 过的设备上）的必要权限。 一旦完成，我们可以通过 &lt;code&gt;PackageManager&lt;/code&gt; 安装加密的应用程序，Android 将通过比较指定的 MAC 标记与基于实际文件内容计算的值来解密 APK 并验证包没有被篡改。 您可以通过稍微更改加密和 MAC 参数来使用示例应用程序进行测试，这将导致安装错误。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://mmmedia.qiniudn.com/2017-01-08-160231.jpg&#34; alt=&#34;jb-app-encryption&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;android.content.pm&lt;/code&gt; 包有一些更有趣的类，例如 &lt;code&gt;MacAuthenticatedInputStream&lt;/code&gt; 和 &lt;code&gt;ManifestDigest&lt;/code&gt; ，但实际的 APK 加密和 MAC 验证是由 &lt;code&gt;DefaultContainerService$ApkContainer&lt;/code&gt; 做的，它是 &lt;code&gt;DefaultContainerService&lt;/code&gt;（aka，&lt;code&gt;Package Access Helper&lt;/code&gt;）的一部分。&lt;/p&gt;
&lt;h2 id=&#34;前向锁定（Forward-locking）&#34;&gt;&lt;a href=&#34;#前向锁定（Forward-locking）&#34; class=&#34;headerlink&#34; title=&#34;前向锁定（Forward locking）&#34;&gt;&lt;/a&gt;前向锁定（Forward locking）&lt;/h2&gt;&lt;p&gt;在移动（功能）手机上，通常当铃声、壁纸或者其他数字商品开始进行销售时，&lt;strong&gt;Forward locking&lt;/strong&gt; 会弹出。它的名称来自它的意图：阻止用户转发他们已经购买的文件给自己的朋友和家人。Android 上的主要数字内容是原生应用程序，随着付费应用越来越受欢迎，共享（二次销售）成为一个问题。应用程序包（APKs）在 Android 上是公共可读的，这使得即使是在生产设备中提取应用程序也相对容易。虽然公共可读的应用程序文件可能听起来像是一个坏主意，它根植于 Android 的开放和可扩展性—第三方启动器、Widget 容器和应用程序可以轻松的提取 APKs 的 Icon、Widget 的可定义 Intents等等。为了锁定付费应用程序而不失去任何操作系统的灵活性，Android 引入了 &lt;strong&gt;Forward locking&lt;/strong&gt;（又称“拷贝保护”）。它的想法是把应用程序包分为两部分：一个公共可读的部分，包括资源文件和 manifest （保存在 &lt;code&gt;/data/app&lt;/code&gt; ）；一个系统用户可读的包含可执行代码的包（保存在 &lt;code&gt;/data/app-private&lt;/code&gt; ）。代码包受文件系统权限保护，虽然这使得大多数消费者设备上的用户无法访问它，但是只需要获得 &lt;code&gt;root&lt;/code&gt; 访问权限即可提取它。这种方法很快就被启用，引入了在线 Android 授权（LVL）作为替代品。然而，这将应用程序保护实施从操作系统转移到应用程序开发人员，并取得了不同的结果。&lt;/p&gt;
&lt;p&gt;在 Jelly Bean 中，&lt;strong&gt;Forward locking&lt;/strong&gt;  的实现已经重新设计，现在提供了将 APK 存储在加密容器中的能力，该加密容器需要在运行时安装设备特定密钥。让我们更详细地研究一下实现。&lt;/p&gt;
&lt;h2 id=&#34;Jelly-Bean-实现&#34;&gt;&lt;a href=&#34;#Jelly-Bean-实现&#34; class=&#34;headerlink&#34; title=&#34;Jelly Bean 实现&#34;&gt;&lt;/a&gt;Jelly Bean 实现&lt;/h2&gt;&lt;p&gt;虽然对于 JB（Jelly Bean），把加密的应用程序容器作为一个前向锁定机制是新加的，但加密容器的想法开始于 Froyo。 当时（2010年5月），大多数Android 设备都配备有有限的内部存储空间和相当大（几GB）的外部存储设备，通常采用 micro SD 卡的形式。 为了使文件共享更容易，外部存储使用 FAT 文件系统进行了格式化，该文件系统缺少文件权限。 因此，任何人（任何应用程序）都可以读取和写入 SD 卡上的文件。 为了防止用户简单地将付费应用程序复制到 SD 卡上，Froyo 创建了一个加密的文件系统映像文件，并在您选择将应用移动到外部存储时将 APK 存储在其中。 然后使用 Linux 的设备映射程序在运行时安装映像，系统将从新创建的安装点（每个应用程序一个）加载应用程序文件。 基于此，JB 的容器使用 EXT4 文件系统，它允许权限。 典型的前向锁定应用程序的挂载点现在如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;shell@android:/mnt/asec/org.mypackage-1 # ls -l&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ls -l&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;drwxr-xr-x system   system            2012-07-16 15:07 lib&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;drwx------ root     root              1970-01-01 09:00 lost+found&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-rw-r----- system   u0_a96    1319057 2012-07-16 15:07 pkg.apk&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-rw-r--r-- system   system     526091 2012-07-16 15:07 res.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这里 &lt;strong&gt;res.zip&lt;/strong&gt; 拥有应用程序资源，是公共可读的，而保存完整 APK 的 &lt;strong&gt;pkg.apk&lt;/strong&gt; 文件只能由系统和应用程序的专用用户（u0_a96）读取。 实际的应用程序容器存储在&lt;code&gt;/data/app-asec&lt;/code&gt; 中，文件名为 &lt;code&gt;pacakge.name-1.asec&lt;/code&gt; 。 ASEC 容器管理（创建&amp;#x2F;删除和挂载&amp;#x2F;卸载）在系统卷守护程序（vold）中实现，框架服务通过通过本地 &lt;strong&gt;socket&lt;/strong&gt; 发送命令与之通信。 我们可以使用 &lt;strong&gt;vdc&lt;/strong&gt; 实用程序从 &lt;strong&gt;shell&lt;/strong&gt; 管理转发锁定的应用程序：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;vdc asec list&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;vdc asec list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111 0 com.mypackage-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111 0 org.foopackage-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200 0 asec operation succeeded&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;vdc asec unmount org.foopackage-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200 0 asec operation succeeded&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;vdc asec mount org.foopackage-1 000102030405060708090a0b0c0d0e0f 1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;org.foopackage-1 000102030405060708090a0b0c0d0e0f  1000                    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200 0 asec operation succeeded&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;vdc asec path org.foopackage-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;vdc asec path org.foopackage-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211 0 /mnt/asec/org.foopackage-1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;所有命令都将命名空间 ID（实际上基于包名称）作为参数，对于 &lt;strong&gt;mount&lt;/strong&gt; 命令，您需要指定加密密钥和装载点的所有者 UID（1000是系统）。 那就是如何存储和使用应用程序，剩下的是找出实际的加密算法和密钥。 两者从原始的 Froyo 应用程序到 SD 实现没有变化：Twofish 与128位密钥存储在 &lt;code&gt;/data/misc/systemkeys&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;shell@android:/data/misc/systemkeys $ ls&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ls&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AppsOnSD.sks&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;shell@android:/data/misc/systemkeys $ od -t x1 AppsOnSD.sks&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;od -t x1 AppsOnSD.sks&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0000000 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0000020&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通过指定 &lt;code&gt;pm install &lt;/code&gt;命令的 &lt;code&gt;-l&lt;/code&gt; 选项或为 &lt;code&gt;PackageManager&lt;/code&gt; 的 &lt;code&gt;installPackage*&lt;/code&gt; 方法指定 &lt;code&gt;INSTALL_FORWARD_LOCK&lt;/code&gt; 标志（请参阅&lt;a href=&#34;https://github.com/nelenkov/jb-app-encryption&#34;&gt;示例应用程序&lt;/a&gt;）来触发转发锁定应用程序。&lt;/p&gt;
&lt;h2 id=&#34;加密应用程序和-Google-Play&#34;&gt;&lt;a href=&#34;#加密应用程序和-Google-Play&#34; class=&#34;headerlink&#34; title=&#34;加密应用程序和 Google Play&#34;&gt;&lt;/a&gt;加密应用程序和 Google Play&lt;/h2&gt;&lt;p&gt;所有这一切都很有趣，但正如我们所见，安装应用程序、加密或其他都需要系统权限，因此它只能由自定义运营商Android 固件和下一个版本友好的 CyanogenMod ROM 使用。 目前唯一利用了新的加密应用程序和前向锁定基础设施的应用程序是 Play Store（谁出来了这些名字，真的？）Android 客户端。 要详细了解 Google Play 客户端的工作原理，需要详细了解底层协议（这始终是一个移动目标），但随意查看最新的 Android 客户端确实显示了一些有用的信息。 Google Play 服务器会发送相当多的有关您即将下载和安装的应用的元数据，例如下载网址，APK 文件大小，版本代码和退款窗口。 其中新增的是 &lt;code&gt;EncryptionParams&lt;/code&gt; ，它看起来非常类似于上面显示的&lt;code&gt;ContainerEncryptionParams&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AndroidAppDelivery$EncryptionParams&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; cachedSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String encryptionKey;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String hmacKey;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; version;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;加密算法和 HMAC 算法总是分别设置为 &lt;code&gt;&amp;#39;AES / CBC / PKCS5Padding&amp;#39;&lt;/code&gt; 和 &lt;code&gt;&amp;#39;HMACSHA1&amp;#39;&lt;/code&gt; 。 IV 和 MAC 标签与加密的APK 捆绑在一个 blob 中。 一旦读取和验证所有参数，它们基本上将转换为 &lt;code&gt;ContainerEncryptionParams&lt;/code&gt; 实例，并使用熟悉的 &lt;code&gt;PackageManager.installPackageWithVerification()&lt;/code&gt; 方法安装应用程序。 如可能预期的，安装付费应用程序时，将设置 &lt;code&gt;INSTALL_FORWARD_LOCK&lt;/code&gt; 标志。 操作系统从这里获取它，并且过程与上一节中描述的相同：免费应用程序被解密，APK最终在 &lt;code&gt;/data/app&lt;/code&gt; 中，而在 &lt;code&gt;/data/app-asec&lt;/code&gt; 中的加密容器被创建和装载在付费应用的 &lt;code&gt;/mnt/asec/package.name&lt;/code&gt; 下。&lt;/p&gt;
&lt;p&gt;那么在实践中这是什么意思？ Google Play 现在声称，付费应用程序始终以加密形式传输和存储，因此，如果您决定使用 Jelly Bean 提供的应用程序加密设施实现它，则您自己的应用程序分发渠道也会如此。 应用程序必须在某些时候可用于操作系统，所以如果你有 root 用户访问正在运行的 Android 设备，仍然可以提取前向锁定 APK 或容器加密密钥，但这确实是所有软件的解决方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新：&lt;/strong&gt;虽然正向锁定使得复制付费应用程序更难，似乎它与其他服务的集成仍然有一些问题。 根据&lt;a href=&#34;http://code.google.com/p/android/issues/detail?id=34880&#34;&gt;这里&lt;/a&gt;的多个开发人员和用户的报告，它目前打破了应用程序注册自己账户管理的实现，包含大多数付费小部件的应用程序。 这是由于一些服务在 &lt;code&gt;/mnt/asec&lt;/code&gt; 被挂载之前被初始化，因此不能访问它。 据说有一个可用的修复（没有Gerrit链接），并应在 Jelly Bean 维护版中发布。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新2&lt;/strong&gt;：似乎最新版本的 Google Play 客户端（3.7.15）安装了带有小部件的付费应用程序，并且可能还会在 &lt;code&gt;/data/app&lt;/code&gt; 中管理帐户（临时？）解决方法。 下载的 APK 仍会加密传输。 例如：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;shell@android:/data/app # ls -l|grep -i beautiful&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ls -l|grep -i beautiful&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-rw-r--r-- system   system    6046274 2012-08-06 10:45 com.levelup.beautifulwidgets-1.apk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这就是现在的情况。 希望，很快就会从官方来源获得有关应用加密操作系统实施和设计以及 Google Play 商店的使用情况的更详细信息。 在那之前，获取&lt;a href=&#34;https://github.com/nelenkov/jb-app-encryption&#34;&gt;示例项目&lt;/a&gt;，启动 OpenSSL 并尝试。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://plus.google.com/117221066931981967754&#34;&gt;Nikolay Elenkov&lt;/a&gt; 发布于 2012 年 7 月 6 日。&lt;/p&gt;
</content>
        <category term="Android" />
        <category term="ADB" />
        <updated>2017-01-05T11:56:25.000Z</updated>
    </entry>

    <follow_challenge>
        <feedId>73986782175755264</feedId>
        <userId>72100854660436992</userId>
    </follow_challenge>
</feed>
